{
    "build.sh": "#!/bin/bash\ndocker build -t gcc:debian -f Dockerfile.build .\ndocker run --net=host --user $(id -u):$(id -g) --rm -ti -v $(pwd):/opt/build gcc:debian vault.c -o vault ",
    "Dockerfile.build": "FROM debian:bullseye-slim as build\n\nRUN apt update; apt -y install build-essential\nWORKDIR /opt/build\n\nENTRYPOINT [\"gcc\"]",
    "obfuscate.py": "flag = bytearray(b\"gigem{p455w0rd_1n_m3m0ry1}\")\n\n\nfor i in range(len(flag)):\n\tprint(\"{} - {}\".format(i,(i+1) % len(flag)))\n\tflag[i] ^= flag[(i+1) % len(flag)]\nfor i in range(len(flag)):\n\tflag[i] ^= 43\nfor i in range(len(flag)):\n\tflag[i] += 15\nfor i in range(0,len(flag),2):\n\tflag[i], flag[i+1] = flag[i+1], flag[i]\n\nprint(len(flag))\nprint(flag)",
    "README.md": "# Vault\n\n<link to the binary>\n\n## Setup\n\n1. `./build.sh`\n\n## Brief Dev Description\n\nThe string stored inside the binary is obfuscated so that you can't find it with strings or similar tools.  The flag is deobfuscated before being compared to the input, so if you check the memory of the program while its running you can leak the flag.  Alternatively you could reverse the deobfuscate function.  It isn't very difficult.  \n\n## Solution\n\n1. ltrace ./vault\n2. see the flag in the strcmp call\n",
    "vault.c": "\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar* deobfuscate(char* text) {\n\tint len = strlen(text);\n\tfor(int i = 0; i < len; i += 2) {\n\t\tchar temp = text[i];\n\t\ttext[i] = text[i+1];\n\t\ttext[i+1] = temp;\n\t}\n\tfor(int i = 0; i < len; i += 1) {\n\t\ttext[i] -= 15;\n\t}\n\tfor(int i = 0; i < len; i += 1) {\n\t\ttext[i] ^= 43;\n\t}\n\tfor(int i = len; i > 0; i -= 1) {\n\t\ttext[i-1] ^= text[i % len];\n\t}\n\n\treturn text;\n}\n\nint main() {\n\tchar* flag = malloc(26);\n\tstrcpy(flag, \"4428/L9~x:x{\\x1fL\\x83T()\\x84\\x84x\\x85r/gv\");\n\tdeobfuscate(flag);\n\tchar* input = malloc(27);\n\tprintf(\"%s\", \"Enter password: \");\n\tfgets(input, 27, stdin);\n\tif(strcmp(flag, input) == 0) {\n\t\tprintf(\"Correct!  That's the password!\\n\");\n\t} else {\n\t\tprintf(\"Sorry, that isn't the right password.\\n\");\n\t}\n}",
    "category": "Reversing"
}