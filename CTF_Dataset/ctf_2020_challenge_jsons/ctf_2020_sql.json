{
    ".gitlab-ci.yml": "image: web_sql:latest\n\ntest:\n  script:\n    - \"./tests/entry.sh\"\n\n",
    "db_gen.sh": "#start, set up mysql database\n#create user 'sqli-user' with permissions on\n#DATABASE: SqliDB;\n#one TABLE: login, two parameters in login: (user, password)\n#randomize password for root\nservice mysql start && mysql -uroot -e \"CREATE DATABASE SqliDB; CREATE USER 'sqli-user'@'localhost' IDENTIFIED BY 'AxU3a9w-azMC7LKzxrVJ^tu5qnM_98Eb'; GRANT ALL PRIVILEGES ON SqliDB.* TO 'sqli-user'@'localhost'; USE SqliDB; CREATE TABLE login (User varchar(20), Password varchar(100)); INSERT INTO login (User,Password) VALUES ('admin', 'tS&LjHue6Z&m*&JeTU#U%btyA8gmJXh'); INSERT INTO login (User,Password) VALUES ('bobsagget', 'password'); SET PASSWORD FOR root@'localhost' = PASSWORD('^wn=GBr^92@&wf+Ebq3w!CsTP4%Mr6+_')\";\n#run in background",
    "Dockerfile": "#pull latest ubuntu image\nFROM ubuntu:latest\n\n#sets cmdline interface as noninteractive for installing packages below\nenv DEBIAN_FRONTEND=\"noninteractive\"\n\n#set up php/mysql/apache and dependencies\nRUN apt-get -y update && apt-get install -y apache2 apache2-doc apache2-utils mysql-server php libapache2-mod-php php-mysql python-pip\n\nRUN pip install pika\n\n#set up files\nCOPY index.html /var/www/html/\nCOPY login.php /var/www/html/web/\nCOPY logo.png /var/www/html/images/\n\n#set up environment for apache serv\nenv APACHE_RUN_USER    www-data\nenv APACHE_RUN_GROUP   www-data\nenv APACHE_PID_FILE    /var/run/apache2.pid\nenv APACHE_RUN_DIR     /var/run/apache2\nenv APACHE_LOCK_DIR    /var/lock/apache2\nenv APACHE_LOG_DIR     /var/log/apache2\n\n#allows running of file via changing permissions\n\n\n#gives access to port 80\nEXPOSE 80\n\n#runs on boot of container\n",
    "index.html": "<html>\n\t<head>\n    <title>Central Authentication Service RC1.2</title>\n\t</head>\n\n\t<body bgcolor=\"#800000\">\n\t\t\t<h1 style=\"color:white\">Howdy!</h1>\n\t\t\t<img align = \"right\" src = \"/images/logo.png\" width=\"50%\">\n\n\t\t<div>\n\t\t\t<form action = \"/web/login.php\" method = \"POST\">\n\t\t   \t\t<p align=\"left\" style=\"color:white\">\n\t\t\tNetID: <br>\n\t\t\t<input type = \"text\" name = \"username\" align = \"justify\"/><br><br>\n\t\t   \t\tPassword: <br>\n\t\t\t<input type = \"password\" name = \"password\" align = \"justify\"/><br>\n\t\t\t</p>\n\t\t   \t\t<input type = \"submit\" value=\"Login\" />\n\t\t\t</form>\n\t\t</div>\n\t</body>\n</html>\n",
    "login.php": "<?php\n  ini_set('display_errors', 'On');\n  error_reporting(E_ALL | E_STRICT);\n  echo \"<html>\";\n  if (isset($_POST[\"username\"]) && isset($_POST[\"password\"])) {\n    $servername = \"localhost\";\n    $username = \"sqli-user\";\n    $password = 'AxU3a9w-azMC7LKzxrVJ^tu5qnM_98Eb';\n    $dbname = \"SqliDB\";\n    $conn = new mysqli($servername, $username, $password, $dbname);\n    if ($conn->connect_error)\n        die(\"Connection failed: \" . $conn->connect_error);\n    $user = $_POST['username'];\n    $pass = $_POST['password'];\n    $sql = \"SELECT * FROM login WHERE User='$user' AND Password='$pass'\";\n    if ($result = $conn->query($sql))\n    {\n      if ($result->num_rows >= 1)\n      {\n        $row = $result->fetch_assoc(); \n        echo \"You logged in as \" . $row[\"User\"];\n        $row = $result->fetch_assoc();\n        echo \"<html>You logged in as \" . $row[\"User\"] . \"</html>\\n\";\n      }\n      else {\n        echo \"Sorry to say, that's invalid login info!\";\n      }\n    }\n    $conn->close();\n  }\n  else\n    echo \"Must supply username and password...\";\n  echo \"</html>\";\n?>\n",
    "README.md": "# SQL\n\n### How to setup:\nCreate docker container locally using Dockerfile called web_sql using \"sudo docker build -t web_sql .\"\nCopy 'SQLi.py' and 'SQLiSimple.py' where they need to be\n\n\n### Solution\nOne way would be to use prepared statements, one way being similar to something like this:\n```\n$params=array($_POST['Username'],$_POST['Password']);\n$stmt=sqlsrv_query($conn,$sql,$params);\n```\n\nThere are other options, like using the \"real_escape_strings\" function:\n```\n$user=$conn->real_escape_string($_POST['username']);\n$pass=$conn->real_escape_string($_POST['password']);\n```\n",
    "SQLi.py": "from ExploitFrame import ExploitFrame\nimport requests\n\n\nclass Exploit(ExploitFrame):\n    def __init__(self, serviceInfo):\n        self.name = 'SQLi'\n        self.output = None\n        ExploitFrame.__init__(self, serviceInfo)\n\n    def exploit(self):\n        url = \"http://{}/login.php\".format(self.serviceInfo.serviceHost)\n        try:\n            r = requests.post(url, data={'username': 'admin', 'password': \"\"\"asdf' OR '1==1';  -- \"\"\"})\n            self.output = r.text\n        except: # NOQA\n            self.output = None\n\n    def exploitSuccess(self):\n        print \"Exploit Output: {}\".format(self.output)\n        if self.output and \"admin\" in self.output:\n            return True\n        return False\n",
    "SQLiSimple\\SQLiSimple.py": "from .. import ServiceFrame\nimport docker\nimport requests\nimport structlog\n\nlogger = structlog.get_logger()\n\n\nclass ServiceCheck(ServiceFrame.ServiceFrame):\n    def __init__(self, serviceInfo):\n        ServiceFrame.ServiceFrame.__init__(self, serviceInfo)\n        self.flag = \"gigem{the_best_damn_sql_anywhere}\"\n\n    def checkService(self):\n        url = \"http://{}/login.php\".format(self.serviceInfo.serviceHost)\n        msg = \"Attempting to open {}\".format(url)\n        logger.info(\"SQLiSimple\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n        try:\n            data = {'username': 'admin', 'password': 'tS&LjHue6Z&m*&JeTU#U%btyA8gmJXh'}\n            r = requests.post(url, data=data)\n            if 'admin' not in r.text:\n                msg = \"Incorrect Response {}\".format(r.text)\n                logger.info(\"SQLiSimple\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n                return False\n            msg = \"Succesfully open {}: {}\".format(url, r.text)\n            logger.info(\"SQLiSimple\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n            return True\n\n        except: # NOQA\n            msg = \"Failed to open {}: {}\".format(url, data)\n            logger.info(\"SQLiSimple\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n            return False\n        return False\n\n    def getLogs(self):\n        client = docker.from_env(version=\"auto\")\n        container = client.containers.get(self.serviceInfo.serviceName)\n        tarstream, stat = container.get_archive('/var/log/apache2/error.log')\n        return str(tarstream.read())\n",
    "SQLiSimple\\SQLiSimple.pyc": "[Binary file or unsupported type: pyc]",
    "SQLiSimple\\__init__.py": "",
    "SQLiSimple\\__init__.pyc": "[Binary file or unsupported type: pyc]",
    "tests\\entry.sh": "#!/bin/sh\n\ncp login.php /var/www/html/login.php\ncp index.html /var/www/html/index.html\n\n./db_gen.sh\nservice apache2 stop;\nservice apache2 start;\npython tests/queue.py\n\n",
    "tests\\queue.py": "import pika\nimport json\nimport sys\nimport os\nimport socket\nimport binascii\n\ndef callback(ch, method, properties, body):\n    print json.loads(body)['msg']\n    ch.basic_ack(delivery_tag = method.delivery_tag)\n    sys.exit()\n    return\n\n\ncredentials = pika.PlainCredentials('guest', 'guest')\nparameters = pika.ConnectionParameters('172.17.0.2')\n\nconnection = pika.BlockingConnection(parameters)\nchannel = connection.channel()\nchannel.queue_declare(queue='attackQueue', durable=True)\n\n\nuserinfo = binascii.hexlify(os.urandom(32)).decode('ascii')\n\n#Stupid hack I found to get host ip\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.connect((\"8.8.8.8\", 80))\nhostname = s.getsockname()[0]\nprint(hostname)\ns.close()\n\n# A lot of this I won't need anymore\nservice = {\n    'chal': 'SQL',\n    'userInfo': userinfo,\n    'serviceHost': hostname,\n}\n\nprint \"Pushing: {}\".format(service)\nchannel.basic_publish(exchange='',\n                      routing_key='attackQueue',\n                      body=json.dumps(service))\n\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters('172.17.0.2'))\nuserChannel = connection.channel()\nuserChannel.exchange_declare(exchange='resultX', exchange_type='direct')\nuserChannel.queue_declare(queue='resultQueue', durable=True)\n\n\nuserChannel.queue_bind(exchange='resultX',\n                       queue='resultQueue',\n                       routing_key=userinfo)\n\nuserChannel.basic_consume(callback, queue='resultQueue' )\nuserChannel.start_consuming()\n\nuserChannel.close()\n\n",
    "category": "Secure_Coding"
}