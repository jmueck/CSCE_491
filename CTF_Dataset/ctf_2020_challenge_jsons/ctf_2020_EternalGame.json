{
    "Dockerfile": "FROM alpine\n\nRUN apk --no-cache add socat python\n\nRUN addgroup ctf\n\nRUN mkdir /crypto\n\nRUN adduser -G ctf --home=/crypto --disabled-password cryptouser\n\nCOPY game.py /crypto/game.py\nCOPY flag.txt /crypto/flag.txt\nCOPY start.sh /crypto/start.sh\nCOPY key.txt /crypto/key.txt\n\nRUN chown -R cryptouser /crypto\n\nEXPOSE 8812\n\nENTRYPOINT [\"/crypto/start.sh\"]\n",
    "flag.txt": "gigem{a11_uR_h4sH_rR_be10nG_to_m3Ee3}\n",
    "game.py": "from collections import defaultdict\nimport random\nimport hashlib\nimport sys\n\nx = 1\nd = defaultdict(int)\ngame_running = True\nhigh_score = 653086069891774904466108141306028536722619133804\n\ndef gen_hash(x):\n    with open('key.txt', 'r') as f:\n        key = f.read()[:-1]\n        return hashlib.sha512(key + x).hexdigest()\n\ndef extract_int(s):\n    i = len(s)-1\n    result = 0\n    while i >= 0 and s[i].isdigit():\n        result *= 10\n        result += ord(s[i]) - ord('0')\n        i -= 1\n    return result\n\ndef multiply():\n    global x\n    print 'Multiplier: '\n    sys.stdout.flush()\n    m = extract_int(raw_input())\n    sys.stdout.flush()\n    if m < 2 or m > 10:\n        print 'Disallowed value.'\n    elif d[m] == 5:\n        print 'You already multiplied by ' + str(m) + ' five times!'\n    else:\n        x *= m\n        d[m] += 1\n    sys.stdout.flush()\n\ndef print_value():\n    print x\n    sys.stdout.flush()\n\ndef get_proof():\n    global game_running\n    game_running = False\n    print gen_hash(str(x))\n    sys.stdout.flush()\n\ngame_options = [multiply, print_value, get_proof]\ndef play_game():\n    global game_running\n    game_running = True\n    print(\n            '''\n            Welcome the The Game. You are allowed to multiply the initial number (which is 1) by any\n            number in the range 2-10. Make decisions wisely! You can only multiply by each\n            number at most 5 times... so be careful. Also, at a random point during The Game, an asteroid\n            will impact the Earth and The Game will be over.\n\n            Feel free to get your proof of achievement and claim your prize at the main menu once\n            you start reaching big numbers. Bet you can't beat my high score!\n            '''\n            )\n    while game_running:\n        print '1. Multiply'\n        print '2. Print current value'\n        print '3. Get proof and quit'\n        sys.stdout.flush()\n        game_options[extract_int(raw_input())-1]()\n        sys.stdout.flush()\n        if random.randint(1, 20) == 10:\n            print 'ASTEROID!'\n            game_running = False\n        sys.stdout.flush()\n\ndef prize():\n    print 'Input the number you reached: '\n    sys.stdout.flush()\n    num = raw_input()\n    sys.stdout.flush()\n    print 'Present the proof of your achievement: '\n    sys.stdout.flush()\n    proof = raw_input()\n    sys.stdout.flush()\n    num_hash = gen_hash(num)\n    num = extract_int(num)\n\n    if proof == num_hash:\n        if num > high_score:\n            with open('flag.txt', 'r') as f:\n                print f.read()\n        elif num > 10**18:\n            print 'It sure is a good thing I wrote this in Python. Incredible!'\n        elif num > 10**9:\n            print 'This is becoming ridiculous... almost out of bounds on a 32 bit integer!'\n        elif num > 10**6:\n            print 'Into the millions!'\n        elif num > 1000:\n            print 'Good start!'\n        else:\n            print 'You can do better than that.'\n    else:\n        print 'Don\\'t play games with me. I told you you couldn\\'t beat my high score, so why are you even trying?'\n    sys.stdout.flush()\n\ndef new():\n    global x\n    global d\n    x = 1\n    d = defaultdict(int)\n    sys.stdout.flush()\n    play_game()\n\nmain_options = [new, prize, exit]\n\ndef main_menu():\n    print '1. New Game'\n    print '2. Claim Prize'\n    print '3. Exit'\n    sys.stdout.flush()\n    main_options[extract_int(raw_input())-1]()\n    sys.stdout.flush()\n\nif __name__ == '__main__':\n    while True:\n        main_menu()\n",
    "key.txt": "AndiAu13Nv\n",
    "README.md": "# EternalGame\n\n## Description\n\n```text\nNo one has ever won my game except me!\n<game.py link>\nnc <ip here> 8812\n```\n\n## Documentation\n\n`game.py` runs over socat, and competitors are provided with the source. It's a simple game in which players multiply a number\nby any number between 2 and 10 (but each can only be used up to five times). The goal is to get to some huge number which is\nimpossible with the restrictions given. There must be another way.\n\n### Setup\n\n1. `docker build -t eternalgame .`\n2. `docker run -p 8812:8812 -d eternalgame`\n\n## Solution\n\nThe idea is well-described [here](https://blog.skullsecurity.org/2012/everything-you-need-to-know-about-hash-length-extension-attacks).\n\nIt boils down to the fact that we are using SHA-512 in a way it was not designed to be used (HMAC would be the appropriate\nthing to use here). The solution is to extend a hash given to you by the game by adding the padding and then a bunch of 0x39\n('9' characters) to beat the high score.\n",
    "solver.py": "from pwn import *\nimport time\n\nans = []\nr = remote('172.17.0.2', 8812)\nr.sendline('2')\nr.sendline('1\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00X999999999999999999999999999999999999999999999999999999999999999999999999999999999999')\nr.sendline('7d90e5f31de6e26873c6cdf274c37f0193d48bcc21820410d60d9c8c02996d005e26021c9db41c8890fc51c29758c3d5e9f8b477c449e9afbbe12bcfdcd7a49f')\nr.interactive()\n",
    "solver.sh": "#!/bin/bash\n\nif ! command -v hashpump | grep -q \"hashpump\"; then\n  echo -e \"You need hashpump to do this\"\n  exit 1\nfi\n\necho -e \"Getting base hash...\"\n\nhigh_score=653086069891774904466108141306028536722619133804\nbase_hash=$((echo 1; echo 3; echo 3) | socat - tcp:172.17.0.2:8812 | tail -n 4 | head -n 1)\nkey_size=0\n\necho -e \"Discovered base hash of $base_hash\"\necho -e \"Bruting for key size...\"\n\nfor i in {1..50}; do\n  if (echo \"2\"; printf '%b\\n' \"$(hashpump -s ${base_hash} -d 1 -a 1 -k ${i})\" | tac; echo \"3\") | socat - tcp:172.17.0.2:8812 | tail -n 4 | head -n 1 | grep -q \"better\"; then\n    echo -e \"Discovered key size of $i, continuing...\"\n    key_size=$i\n    break\n  fi\ndone\n\necho -e \"Beginning brute to overcome the size...\"\n\nfor i in {1..100}; do\n  out=$((echo \"2\"; printf '%b\\n' \"$(hashpump -s ${base_hash} -d 1 -a $(python3 -c 'print('${high_score}'+'${i}')') -k ${key_size})\" | tac; echo \"3\") | socat - tcp:172.17.0.2:8812)\n  if echo \"$out\" | grep -q \"gigem\"; then\n    echo \"$out\" | grep \"gigem\"\n    break\n  fi\ndone\n",
    "start.sh": "#!/bin/sh\n\nwhile : \ndo\n    su -c \"exec socat -d tcp-listen:8812,reuseaddr,fork exec:\\\"python /crypto/game.py\\\",stderr\" - cryptouser;\ndone\n",
    "category": "Crypto"
}