{
    "Dockerfile": "FROM ubuntu:16.04\n\nRUN apt update --fix-missing\nRUN apt install -y socat\n\nRUN groupadd ctf\n\nRUN mkdir /rev\n\nCOPY simple /rev/simple\nCOPY flag.txt /rev/flag.txt\n\nRUN useradd -G ctf --home=/rev revuser\nRUN useradd -G ctf --home=/rev revflag\n\nRUN chown revflag:revflag /rev/flag.txt\nRUN chown revflag:revflag /rev/simple\n\nRUN chmod 4755 /rev/simple\nRUN chmod 444 /rev/flag.txt\n\nEXPOSE 7223\n\nCMD [\"su\", \"-c\", \"exec socat TCP-LISTEN:7223,reuseaddr,fork EXEC:/rev/simple,stderr\", \"-\", \"revuser\"]",
    "flag.txt": "gigem{k3y63n_m3?_k3y63n_y0u!}\n",
    "Makefile": "all: rev\n\nrev: simple_keygen.c\n\tgcc simple_keygen.c -o simple",
    "out.txt": "",
    "README.md": "# KeyGenMe\n\n## Challenge\n\n`nc pwn.tamuctf.com 7223`\n\n## Setup\nBuild the container with `docker build -t advkeygen .` and run it with `docker run -it --rm advkeygen`\n\n## Solution\nSend the string `jfZxShcfa7hcX9cn` to stdin, this string is encrypted using multiplication addition and modulus and compared to static string. This would be computed one byte at a time in reverse order.    \n```python\nfrom pwn import *\n\np = remote('172.17.0.2', 7223)\n\npayload = \"jfZxShcfa7hcX9cn\"\n\np.send(payload + '\\n')\np.interactive()\n```\n",
    "simple": "[Binary file or unsupported type: c:\\users\\jomue\\tamuctf-2019-master\\tamuctf-2019-master\\reversing\\keygenme\\simple]",
    "simple_keygen.c": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <stdlib.h>\n\nchar * enc(const char * key)\n{\n    char * result = (char *) malloc(64);\n    \n    int length = strlen(key);\n    unsigned char seed = 0x48;\n    for(int i = 0; i < length; i++)\n    {\n        result[i] = 48+(seed*key[i] + seed*12 + 17)%70;\n        seed = result[i];\n    }\n    return result; \n}\n\n_Bool verify_key(char * key)\n{\n    if(strlen(key) < 10 || strlen(key) > 64)\n    {\n        return false;\n    }\n    char * result = enc(key);\n    // random password: jfZxShcfa7hcX9cn\n    char * compare = \"[OIonU2_<__nK<KsK\";\n    return !strcmp(compare, result);\n}\n\nint main()                                                                  \n{\n    setvbuf(stdout,0, _IONBF,0);\n    printf(\"\\nPlease Enter a product key to continue: \\n\");\n    char pkey[65];\n    fgets((char*)pkey, 65, stdin);\n    if (verify_key(pkey))                                                   \n    {\n        FILE* infile = fopen(\"flag.txt\", \"r\");\n        if (infile == NULL)                                                 \n        {\n            printf(\"Too bad the flag is only on the remote server!\\n\");\n            return 0;                                                       \n        }\n        char output[100];\n        fgets(output, 100, infile);\n        printf(\"%s\", output);                                                     \n    }\n}\n",
    "solve.py": "from pwn import *\n\np = remote('172.17.0.2', 7223)\n\npayload = \"jfZxShcfa7hcX9cn\"\n\np.send(payload + '\\n')\np.interactive()\n\n",
    "category": "Reversing"
}