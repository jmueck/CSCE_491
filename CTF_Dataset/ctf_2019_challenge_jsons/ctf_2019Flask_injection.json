{
    ".gitlab-ci.yml": "image: messy/flaskinjection:latest\n\ntest:\n  script:\n    - \"./tests/entry.sh\"\n",
    "config.py": "import os\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nWFT_CSRF_ENABLED = True\nSECERT_KEY = \"super-secret\"\n",
    "FlaskServer.py": "from .. import ServiceFrame\nimport requests\nimport structlog\nimport docker\n\nlogger = structlog.get_logger()\n\nclass ServiceCheck(ServiceFrame.ServiceFrame):\n    def __init__(self, serviceInfo):\n        ServiceFrame.ServiceFrame.__init__(self, serviceInfo)\n        self.flag = \"gigem{br0k3n_fl4sk_2d88bb862569}\"\n\n    def checkService(self):\n        msg = \"ServiceCheck Started\"\n        logger.info(\"flask_server\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n        try:\n            url = 'http://{}:{}/'.format(self.serviceInfo.serviceHost,self.serviceInfo.servicePort)\n            index = requests.get(url)\n            if 'Welcome to my new FaaS! (Flask as a Service)' not in index.text:\n                msg = 'Failed ServiceCheck: {}'.format(index.text)\n                logger.info(\"flask_server\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n                return False\n\n            data = {'chem1': 'asdf', 'chem2': 'fdsa'}\n            chem = requests.post(url + 'science', data=data)\n            \n            if 'The result of combining asdf and fdsa is:' not in chem.text:\n                msg = 'Failed ServiceCheck'\n                logger.info(\"flask_server\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n                return False\n\n            msg = 'Passed ServiceCheck'\n            logger.info(\"flask_server\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n\n            return True\n\n        except Exception as e:\n            msg = 'Failed ServiceCheck: {}'.format(e)\n            logger.info(\"flask_server\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n            return False\n\n    def getLogs(self):\n        client = docker.from_env(version=\"auto\")\n        container = client.containers.get(self.serviceInfo.serviceName)\n        return container.logs()\n",
    "flask_exploit.py": "from ExploitFrame import ExploitFrame\nimport requests\nimport structlog\n\nlogger = structlog.get_logger()\n\nclass Exploit(ExploitFrame):\n    def __init_(self, serviceInfo):\n        self.name = 'flask_exploit'\n        self.output = None\n        ExploitFrame.__init__(self, serviceInfo)\n\n    def exploit(self):\n        url = 'http://{}:{}/science'.format(self.serviceInfo.serviceHost,self.serviceInfo.servicePort)\n        data = {'chem1': '{{ 7*7 }}', 'chem2': '{{ 4*4 }}'}\n        try:\n            exp = requests.post(url, data=data)\n            if 'The result of combining 49 and 16 is:' in exp.text:\n                self.output = True\n            else:\n                self.output = False\n\n        except Exception as e:\n            msg = \"Exploit crashed: {}\".format(e)\n            logger.info('Flask Exploit', msg=msg, serviceInfo=self.serviceInfo.__dict__)\n            self.output = True\n\n    def exploitSuccess(self):\n        return self.output\n",
    "README.md": "# FlaskInjection\n\n## Setup\nMake sure in the file `/etc/gitlab-runner/config.toml` the line `pull_policy = \"if-not-present\"` is added under the `[runners.docker]` section.  \nBuild the docker image locally with `docker build -t messy/flaskinjection .`  \nCopy `flask_exploit.py` and `FlaskServer.py` to their respective locations.  \nAdd `'flask_server': ('flask_server', ['flask_exploit'], ['FlaskServer'], 8000)` to the config file.\n\n## Solution\nModify the route in `views.py` to be:\n```python\ndef science():\n    try:\n        chem1 = request.form['chem1']\n        chem2 = request.form['chem2']\n        template = '''<html>\n        <div style=\"text-align:center\">\n        <h3>The result of combining {{ chem1 }} and {{ chem2 }} is:</h3></br>\n        <iframe src=\"https://giphy.com/embed/AQ2tIhLp4cBa\" width=\"468\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe></div>\n        </html>'''\n\n        return render_template_string(template, dir=dir, help=help, locals=locals, chem1=chem1, chem2=chem2)\n    except:\n        return \"Something went wrong\"\n```\n",
    "serve.py": "from tamuctf import app\n\n#app = create_app()\napp.run(debug=True, threaded=True, host=\"0.0.0.0\", port=8000)\n",
    "docker_stuff\\config.py": "import os\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nWFT_CSRF_ENABLED = True\nSECERT_KEY = \"super-secret\"\n",
    "docker_stuff\\Dockerfile": "FROM ubuntu:latest \nRUN apt-get update\nRUN apt-get install python-pip -y\n\n#RUN mkdir -p /opt/tamuctf\n#COPY ./config.py /opt/tamuctf\n#COPY ./serve.py /opt/tamuctf\nCOPY ./requirements.txt .\n#COPY ./tamuctf /opt/tamuctf/tamuctf\n#COPY ./entry.sh /opt/tamuctf\n#COPY ./flag.txt /opt/tamuctf\n\n#WORKDIR /opt/tamuctf\n#VOLUME [\"/opt/tamuctf\"]\n\nRUN pip install -r requirements.txt\n\nEXPOSE 8000\n\n#RUN groupadd ctf\n#RUN useradd -G ctf --home=/opt/tamuctf webuser\n\n#RUN chown -R webuser:webuser /opt/tamuctf\n\n#RUN chmod +x /opt/tamuctf/entry.sh\n\n#WORKDIR /opt/tamuctf\n#ENTRYPOINT [\"./entry.sh\"]\n",
    "docker_stuff\\flag.txt": "gigem{flag}\n",
    "docker_stuff\\requirements.txt": "Flask==0.12.2\nFlask-SQLAlchemy==2.3.2\nFlask-Session==0.3.1\nFlask-Caching==1.3.3\nFlask-Migrate==2.1.1\nFlask-Script==2.0.6\nrequests==2.18.4\npika\n",
    "docker_stuff\\serve.py": "from tamuctf import app\n\n#app = create_app()\napp.run(debug=False, threaded=True, host=\"0.0.0.0\", port=8000)\n",
    "docker_stuff\\tamuctf\\views.py": "import requests\nimport json\nimport sys\nfrom tamuctf import app\nfrom flask import Flask, render_template, request, jsonify, render_template_string\n\n@app.route('/')\n@app.route('/index')\ndef index():\n    \n    return render_template('index.html')\n\n@app.route('/science', methods=['POST'])\ndef science():\n    try:\n        chem1 = request.form['chem1']\n        chem2 = request.form['chem2']\n        template = '''<html>\n        <div style=\"text-align:center\">\n        <h3>The result of combining {} and {} is:</h3></br>\n        <iframe src=\"https://giphy.com/embed/AQ2tIhLp4cBa\" width=\"468\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe></div>\n        </html>'''.format(chem1, chem2)\n\n        return render_template_string(template, dir=dir, help=help, locals=locals)\n    except:\n        return \"Something went wrong\"\n\n\n",
    "docker_stuff\\tamuctf\\__init__.py": "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config.from_object('config')\n\nfrom tamuctf import views\n",
    "docker_stuff\\tamuctf\\templates\\base.html": "<html>\n  <head>\n    {% if title %}\n    <title>{{ title }} - ECEN404</title>\n    {% else %}\n    <title>ECEN403</title>\n    {% endif %}\n  </head>\n  <body>\n    <div>ECEN403: <a href=\"/index\">Home</a> \n                  <a href=\"/map\">Map</a>\n                  <a href=\"/data\">Data</a>\n    </div>\n    <hr>\n    {% block content %}{% endblock %}\n  </body>\n</html>\n",
    "docker_stuff\\tamuctf\\templates\\index.html": "{% block content %}\n<html>\n    <div style=\"text-align: center\">\n    <h1>Welcome to my new FaaS! (Flask as a Service)</h1>\n    <h4>Please enter the two chemicals you would like to combine:</h4>\n    <form action=\"/science\" method=\"POST\">\n        Chemical One: <input type=\"text\" name=\"chem1\"><br>\n        Chemical Two: <input type=\"text\" name=\"chem2\"><br>\n        <input type=\"submit\">\n    </form>\n    <br>\n    <br>\n    <iframe src=\"https://giphy.com/embed/fqIBaMWI7m7O8\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p>\n    </div>\n</html>\n{% endblock %}\n",
    "docker_stuff\\tests\\entry.sh": "#!/bin/sh\n# Start CTFd\npython serve.py &\nsleep 1s\npython tests/queue.py\n",
    "docker_stuff\\tests\\queue.py": "import pika\nimport json\nimport sys\nimport os\nimport socket\nimport binascii\n\ndef callback(ch, method, properties, body):\n    print body\n    ch.basic_ack(delivery_tag = method.delivery_tag)\n    sys.exit()\n    return\n\n\ninfo = ('sqlisimple', 'SQLi', 'SQLiSimple', 80, 'login.php')\ncredentials = pika.PlainCredentials('guest', 'guest')\nparameters = pika.ConnectionParameters('172.17.0.2')\n\nconnection = pika.BlockingConnection(parameters)\nchannel = connection.channel()\nchannel.queue_declare(queue='attackQueue', durable=True)\n\n\nuserinfo = binascii.hexlify(os.urandom(32)).decode('ascii')\n\n#Stupid hack I found to get host ip\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.connect((\"8.8.8.8\", 80))\nhostname = s.getsockname()[0]\nprint(hostname)\ns.close()\n\n# A lot of this I won't need anymore\nservice = {\n    'chal': 'flask_server',\n    'userInfo': userinfo,\n    'serviceHost': hostname,\n}\n\nprint \"Pushing: {}\".format(service)\nchannel.basic_publish(exchange='',\n                      routing_key='attackQueue',\n                      body=json.dumps(service))\n\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters('172.17.0.2'))\nuserChannel = connection.channel()\nuserChannel.exchange_declare(exchange='resultX')\nuserChannel.queue_declare(queue='resultQueue', durable=True)\n\n\nuserChannel.queue_bind(exchange='resultX',\n                       queue='resultQueue',\n                       routing_key=userinfo)\n\nuserChannel.basic_consume(callback, queue='resultQueue' )\nuserChannel.start_consuming()\n\nuserChannel.close()\n",
    "tamuctf\\views.py": "import requests\nimport json\nimport sys\nfrom tamuctf import app\nfrom flask import Flask, render_template, request, jsonify, render_template_string\n\n@app.route('/')\n@app.route('/index')\ndef index():\n    \n    return render_template('index.html')\n\n@app.route('/science', methods=['POST'])\ndef science():\n    try:\n        chem1 = request.form['chem1']\n        chem2 = request.form['chem2']\n        template = '''<html>\n        <div style=\"text-align:center\">\n        <h3>The result of combining {} and {} is:</h3></br>\n        <iframe src=\"https://giphy.com/embed/AQ2tIhLp4cBa\" width=\"468\" height=\"480\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe></div>\n        </html>'''.format(chem1, chem2)\n\n        return render_template_string(template, dir=dir, help=help, locals=locals)\n    except:\n        return \"Something went wrong\"\n\n\n",
    "tamuctf\\__init__.py": "from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config.from_object('config')\n\nfrom tamuctf import views\n",
    "tamuctf\\templates\\base.html": "<html>\n  <head>\n    {% if title %}\n    <title>{{ title }} - ECEN404</title>\n    {% else %}\n    <title>ECEN403</title>\n    {% endif %}\n  </head>\n  <body>\n    <div>ECEN403: <a href=\"/index\">Home</a> \n                  <a href=\"/map\">Map</a>\n                  <a href=\"/data\">Data</a>\n    </div>\n    <hr>\n    {% block content %}{% endblock %}\n  </body>\n</html>\n",
    "tamuctf\\templates\\index.html": "{% block content %}\n<html>\n    <div style=\"text-align: center\">\n    <h1>Welcome to my new FaaS! (Flask as a Service)</h1>\n    <h4>Please enter the two chemicals you would like to combine:</h4>\n    <form action=\"/science\" method=\"POST\">\n        Chemical One: <input type=\"text\" name=\"chem1\"><br>\n        Chemical Two: <input type=\"text\" name=\"chem2\"><br>\n        <input type=\"submit\">\n    </form>\n    <br>\n    <br>\n    <iframe src=\"https://giphy.com/embed/fqIBaMWI7m7O8\" width=\"480\" height=\"270\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen></iframe><p>\n    </div>\n</html>\n{% endblock %}\n",
    "category": "Secure_Coding"
}