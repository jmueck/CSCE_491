{
    "docker-compose.yml": "version: '2.4'\n\nx-limits: &limits\n    pids_limit: 1024\n    cpu_shares: 256\n    mem_limit: 512m\n    logging:\n        options:\n            max-size: 10m\n            max-file: '3'\n\nservices:\n    bob:\n        <<: *limits\n        build: ./bob\n        image: naumachia/mitm.bob\n        restart: unless-stopped\n        networks:\n            default:\n                ipv4_address: 172.30.0.2\n\n    alice:\n        <<: *limits\n        build: ./alice\n        image: naumachia/mitm.alice\n        restart: unless-stopped\n        depends_on:\n            - bob\n        networks:\n            default:\n                ipv4_address: 172.30.0.3\n\nnetworks:\n    default:\n        driver: l2bridge\n        ipam:\n            driver: static\n            config:\n                - subnet: 172.30.0.0/28\n",
    "README.md": "# Diffie Hellman MitM\n\n## Challenge\nThe challenge requires players to do a live mitm attack on a diffie-hellmann key exchange.\n\n## Setup\n\nPlace the entire `diffie_mitm` folder into the challenges folder for Naumachia. Add the appropriate lines to the Naumachia config:\n```\nchallenges:\n    # [required] An indiviual challenge config. The key is the challenge name\n    # This should be a valid unix filename and preferably short\n    diffie:\n        # [default: 1194] The exposed external port for this challenges OpenVPN server\n        port: 2000\n        # [required] The compose files to which define this challenge\n        # Paths should be relative to the challenges directory\n        files:\n            - diffie_mitm/docker-compose.yml\n            - common/docker-compose.yml\n```\n\n## Solution\nThe solution requires a few steps. \n1. VPN into Naumachia environment\n2. Start ettercap `ettercap -G`\n3. Set to unified listen on `tap0`\n4. Scan for hosts\n5. Start wireshark\n6. Start arp spoofing in sniff remote connections mode\n7. Note the ip of \"bob\" and \"alice\"\n8. Stop arp spoofing\n9. Start MitM Attack application on port 4000: `python3 attacker.py`\n10. Enable IPv4 forwarding: `sysctl -w net.ipv4.ip_forward=1`\n11. Redirect Alice's requests to attacker:  \n`iptables -t nat -A PREROUTING -i tap0 -p tcp --dport 5005 -j REDIRECT --to-port 4000`\n12. In ettercap add Alice to target 1 and Bob to target 2\n13. Start arp spoofing in poison one way mode\n14. It may take a the attacker a few tries to work.\n15. Read the script for the flag\n",
    "alice\\AESCipher.py": "import base64\nimport hashlib\nfrom Crypto import Random\nfrom Crypto.Cipher import AES\n\n#https://stackoverflow.com/questions/12524994/encrypt-decrypt-using-pycrypto-aes-256\n\nclass AESCipher(object):\n\n    def __init__(self, key): \n        self.bs = 16\n        self.key = key\n\n    def encrypt(self, raw):\n        raw = self._pad(raw)\n        iv = Random.new().read(AES.block_size)\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return base64.b64encode(iv + cipher.encrypt(raw))\n\n    def decrypt(self, enc):\n        enc = base64.b64decode(enc)\n        iv = enc[:AES.block_size]\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')\n\n    def _pad(self, s):\n        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)\n\n    @staticmethod\n    def _unpad(s):\n        return s[:-ord(s[len(s)-1:])]\n",
    "alice\\alice.py": "import socket\nimport string\nfrom time import sleep\nimport random\nimport os\nimport sys\nfrom binascii import hexlify\nfrom DiffieHellman import DiffieHellman\nfrom base64 import b64encode, b64decode\nfrom AESCipher import AESCipher\n\nTCP_IP = '172.30.0.2'\nTCP_PORT = 5005\n\nprint(\"TCP target IP:\", TCP_IP)\nprint(\"TCP target port:\", TCP_PORT)\nsys.stdout.flush()\n\ndef recvall(sock, n):\n# Helper function to recv n bytes or return None if EOF is hit\n    data = b''\n    while len(data) < n:\n        sock.settimeout(20)\n        packet = sock.recv(n - len(data))\n        \n        if not packet:\n            print(\"Timeout\")\n            return None\n        data += packet\n    return data\n\n\nwhile True:\n    try:\n#        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock = socket.create_connection((TCP_IP, TCP_PORT), 10)\n        a = DiffieHellman()\n        msg = b64encode(str(a.publicKey).encode())\n        sys.stdout.flush()\n        print(\"Len: \", len(msg))\n        sock.sendall(msg)\n        m = recvall(sock, 2468)\n        msg = b64decode(m)\n        print(\"Alice Pub: \", str(a.publicKey))\n        a.genKey(int(msg))\n        a.showResults()\n\n        print(\"Key {}\".format(a.key))\n        aes = AESCipher(a.key)\n\n        f = open('script.txt')\n        count = 0\n        for line in f:\n            if count % 2 == 0:\n                ciphertext = aes.encrypt(line)\n                sock.sendall(ciphertext)\n                print(\"Sending: {}\".format(line))\n            else:\n                data = aes.decrypt(sock.recv(4096))\n                print(\"Recvd {}\".format(data))\n                if data != line:\n                    ciphertext = aes.encrypt(\"Hmmm... That doesn't sound right\")\n                    sock.sendall(ciphertext)\n                    break\n\n            count += 1\n\n        sock.close()\n        sys.stdout.flush()\n\n    except Exception as e:\n        print(e)\n        sys.stdout.flush()\n        pass\n    sleep(3)\n",
    "alice\\DiffieHellman.py": "#!/usr/bin/env python\n\"\"\"\nPyDHE - Diffie-Hellman Key Exchange in Python\nCopyright (C) 2015 by Mark Loiseau\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\n\nimport hashlib\nfrom binascii import hexlify # For debug output\n\n# If a secure random number generator is unavailable, exit with an error.\ntry:\n    import ssl\n    random_function = ssl.RAND_bytes\n    random_provider = \"Python SSL\"\nexcept (AttributeError, ImportError):\n    import OpenSSL\n    random_function = OpenSSL.rand.bytes\n    random_provider = \"OpenSSL\"\n#import os\n#random_function = os.urandom\n\nclass DiffieHellman(object):\n    \"\"\"\n    A reference implementation of the Diffie-Hellman protocol.\n    By default, this class uses the 6144-bit MODP Group (Group 17) from RFC 3526.\n    This prime is sufficient to generate an AES 256 key when used with\n    a 540+ bit exponent.\n    \"\"\"\n\n    def __init__(self, generator=2, group=17, keyLength=540):\n        \"\"\"\n        Generate the public and private keys.\n        \"\"\"\n        min_keyLength = 180\n        default_keyLength = 540\n\n        default_generator = 2\n        valid_generators = [ 2, 3, 5, 7 ]\n\n        # Sanity check fors generator and keyLength\n        if(generator not in valid_generators):\n            print(\"Error: Invalid generator. Using default.\")\n            self.generator = default_generator\n        else:\n            self.generator = generator\n\n        if(keyLength < min_keyLength):\n            print(\"Error: keyLength is too small. Setting to minimum.\")\n            self.keyLength = min_keyLength\n        else:\n            self.keyLength = keyLength\n\n        self.prime = self.getPrime(group)\n\n        self.privateKey = self.genPrivateKey(keyLength)\n        self.publicKey = self.genPublicKey()\n\n    def getPrime(self, group=17):\n        \"\"\"\n        Given a group number, return a prime.\n        \"\"\"\n        default_group = 17\n\n        primes = {\n        5:  0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF,\n        14: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF,\n        15: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF,\n        16: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF,\n        17:\n        0xn        18:\n        0xn        }\n\n        if group in primes.keys():\n            return primes[group]\n        else:\n            print(\"Error: No prime with group %i. Using default.\" % group)\n            return primes[default_group]\n\n    def genRandom(self, bits):\n        \"\"\"\n        Generate a random number with the specified number of bits\n        \"\"\"\n        _rand = 0\n        _bytes = bits // 8 + 8\n\n        while(_rand.bit_length() < bits):\n            try:\n                # Python 3\n                _rand = int.from_bytes(random_function(_bytes), byteorder='big')\n            except:\n                # Python 2\n                _rand = int(OpenSSL.rand.bytes(_bytes).encode('hex'), 16)\n\n        return _rand\n\n    def genPrivateKey(self, bits):\n        \"\"\"\n        Generate a private key using a secure random number generator.\n        \"\"\"\n        return self.genRandom(bits)\n\n    def genPublicKey(self):\n        \"\"\"\n        Generate a public key X with g**x % p.\n        \"\"\"\n        return pow(self.generator, self.privateKey, self.prime)\n\n    def checkPublicKey(self, otherKey):\n        \"\"\"\n        Check the other party's public key to make sure it's valid.\n        Since a safe prime is used, verify that the Legendre symbol == 1\n        \"\"\"\n        if(otherKey > 2 and otherKey < self.prime - 1):\n            if(pow(otherKey, (self.prime - 1)//2, self.prime) == 1):\n                return True\n        return False\n\n    def genSecret(self, privateKey, otherKey):\n        \"\"\"\n        Check to make sure the public key is valid, then combine it with the\n        private key to generate a shared secret.\n        \"\"\"\n        if(self.checkPublicKey(otherKey) == True):\n            sharedSecret = pow(otherKey, privateKey, self.prime)\n            return sharedSecret\n        else:\n            raise Exception(\"Invalid public key.\")\n\n    def genKey(self, otherKey):\n        \"\"\"\n        Derive the shared secret, then hash it to obtain the shared key.\n        \"\"\"\n        self.sharedSecret = self.genSecret(self.privateKey, otherKey)\n\n        # Convert the shared secret (int) to an array of bytes in network order\n        # Otherwise hashlib can't hash it.\n        try:\n            _sharedSecretBytes = self.sharedSecret.to_bytes(\n                self.sharedSecret.bit_length() // 8 + 1, byteorder=\"big\")\n        except AttributeError:\n            _sharedSecretBytes = str(self.sharedSecret)\n\n        s = hashlib.sha256()\n        s.update(bytes(_sharedSecretBytes))\n        self.key = s.digest()\n\n    def getKey(self):\n        \"\"\"\n        Return the shared secret key\n        \"\"\"\n        return self.key\n\n    def showParams(self):\n        \"\"\"\n        Show the parameters of the Diffie Hellman agreement.\n        \"\"\"\n        print(\"Parameters:\")\n        print(\"Prime[{0}]: {1}\".format(self.prime.bit_length(), self.prime))\n        print(\"Generator[{0}]: {1}\\n\".format(self.generator.bit_length(),\n            self.generator))\n        print(\"Private key[{0}]: {1}\\n\".format(self.privateKey.bit_length(),\n            self.privateKey))\n        print(\"Public key[{0}]: {1}\".format(self.publicKey.bit_length(),\n            self.publicKey))\n\n    def showResults(self):\n        \"\"\"\n        Show the results of a Diffie-Hellman exchange.\n        \"\"\"\n        print(\"Results:\")\n        print(\"Shared secret[{0}]: {1}\".format(self.sharedSecret.bit_length(),\n            self.sharedSecret))\n        print(\"Shared key[{0}]: {1}\".format(len(self.key), hexlify(self.key)))\n\nif __name__==\"__main__\":\n    \"\"\"\n    Run an example Diffie-Hellman exchange\n    \"\"\"\n    a = DiffieHellman()\n    b = DiffieHellman()\n\n    a.genKey(b.publicKey)\n    b.genKey(a.publicKey)\n\n    #a.showParams()\n    #a.showResults()\n    #b.showParams()\n    #b.showResults()\n\n    if(a.getKey() == b.getKey()):\n        print(\"Shared keys match.\")\n        print(\"Key:\", hexlify(a.key))\n    else:\n        print(\"Shared secrets didn't match!\")\n        print(\"Shared secret A: \", a.genSecret(b.publicKey))\n        print(\"Shared secret B: \", b.genSecret(a.publicKey))\n",
    "alice\\Dockerfile": "FROM python:3.5-alpine\nRUN apk update && apk add build-base\nRUN pip3 install pycrypto\nCOPY ./alice.py ./alice.py\nCOPY ./AESCipher.py ./AESCipher.py\nCOPY ./DiffieHellman.py ./DiffieHellman.py\nCOPY ./script.txt ./script.txt\nCMD [\"python\", \"./alice.py\"]\n",
    "alice\\script.txt": "1st Soldier with a Keen Interest in Birds: Who goes there?\nKing Arthur: It is I, Arthur, son of Uther Pendragon, from the castle of Camelot. King of the Britons, defeater of the Saxons, Sovereign of all England!\n1st Soldier with a Keen Interest in Birds: Pull the other one!\nKing Arthur: I am, and this is my trusty servant Patsy. We have ridden the length and breadth of the land in search of knights who will join me in my court at Camelot. I must speak with your lord and master.\n1st Soldier with a Keen Interest in Birds: What? Ridden on a horse?\nKing Arthur: Yes!\n1st Soldier with a Keen Interest in Birds: You're using coconuts!\nKing Arthur: What?\n1st Soldier with a Keen Interest in Birds: You've got two empty halves of coconut and you're bangin' 'em together.\nKing Arthur: So? We have ridden since the snows of winter covered this land, through the kingdom of Mercia, through...\n1st Soldier with a Keen Interest in Birds: Where'd you get the coconuts?\nKing Arthur: We found them.\n1st Soldier with a Keen Interest in Birds: Found them? In Mercia? The coconut's tropical!\nKing Arthur: What do you mean?\n1st Soldier with a Keen Interest in Birds: Well, this is a temperate zone.\nKing Arthur: The swallow may fly south with the sun or the house martin or the plover may seek warmer climes in winter, yet these are not strangers to our land?\n1st Soldier with a Keen Interest in Birds: Are you suggesting coconuts migrate?\nKing Arthur: Not at all. They could be carried.\n1st Soldier with a Keen Interest in Birds: What? A swallow carrying a coconut?\nKing Arthur: It could grip it by the husk!\n1st Soldier with a Keen Interest in Birds: It's not a question of where he grips it! It's a simple question of weight ratios! A five ounce bird could not carry a one pound coconut.\nKing Arthur: Well, it doesn't matter. Will you go and tell your master that Arthur from the Court of Camelot is here?\n1st Soldier with a Keen Interest in Birds: Listen. In order to maintain air-speed velocity, a swallow needs to beat its wings forty-three times every second, right?\nKing Arthur: Please!\n1st Soldier with a Keen Interest in Birds: Am I right?\nKing Arthur: I suppose so. Here is your flag: gigem{d1ff13_w1ff13_b6dffb749778d6b}\n",
    "attacker\\AESCipher.py": "import base64\nimport hashlib\nfrom Crypto import Random\nfrom Crypto.Cipher import AES\n\n#https://stackoverflow.com/questions/12524994/encrypt-decrypt-using-pycrypto-aes-256\n\nclass AESCipher(object):\n\n    def __init__(self, key):\n        self.bs = 16\n        self.key = key\n\n    def encrypt(self, raw):\n        raw = self._pad(raw)\n        iv = Random.new().read(AES.block_size)\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return base64.b64encode(iv + cipher.encrypt(raw))\n\n    def decrypt(self, enc):\n        enc = base64.b64decode(enc)\n        iv = enc[:AES.block_size]\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')\n\n    def _pad(self, s):\n        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)\n\n    @staticmethod\n    def _unpad(s):\n        return s[:-ord(s[len(s)-1:])]\n",
    "attacker\\attacker.py": "from AESCipher import AESCipher\nfrom DiffieHellman import DiffieHellman\nfrom base64 import b64encode, b64decode\nimport socket\nimport sys\n\nTCP_IP = '0.0.0.0'\nTCP_PORT = 4000\nbob_ip = '172.16.0.2'\nbob_port = 5005\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((TCP_IP, TCP_PORT))\nserver.listen(1)\n\nprint(\"Listening on {}:{}\".format(TCP_IP, TCP_PORT))\nsys.stdout.flush()\n\n\nwhile True:\n    try:\n        alice, addr = server.accept()\n\n        data = b64decode(alice.recv(4096).decode()) # buffer size is 1024 bytes\n        a = DiffieHellman()\n        msg = b64encode(str(a.publicKey).encode())\n        alice.sendall(msg)\n        a.genKey(int(data))\n\n        bob = socket.create_connection((bob_ip, bob_port), 30)\n        b = DiffieHellman()\n        msg = b64encode(str(b.publicKey).encode())\n        bob.sendall(msg)\n        msg = b64decode(bob.recv(4096).decode())\n        b.genKey(int(msg))\n        \n        aes_a = AESCipher(a.key)\n        aes_b = AESCipher(b.key)\n\n        while True:\n            data = aes_a.decrypt(alice.recv(4096))\n            print(\"Alice Message: {}\".format(data))\n\n            ciphertext = aes_b.encrypt(data)\n            bob.sendall(ciphertext)\n            data = aes_b.decrypt(bob.recv(4096))\n            print(\"Bob Message: {}\".format(data))\n            ciphertext = aes_a.encrypt(data)\n            alice.sendall(ciphertext)\n\n        alice.close()\n        sys.stdout.flush()\n\n    except Exception as e:\n        print(e)\n        pass\n\n",
    "attacker\\DiffieHellman.py": "#!/usr/bin/env python\n\"\"\"\nPyDHE - Diffie-Hellman Key Exchange in Python\nCopyright (C) 2015 by Mark Loiseau\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\n\nimport hashlib\nfrom binascii import hexlify # For debug output\n\n# If a secure random number generator is unavailable, exit with an error.\n#try:\n#    import ssl\n#    random_function = ssl.RAND_bytes\n#    random_provider = \"Python SSL\"\n#except (AttributeError, ImportError):\n#    import OpenSSL\n#    random_function = OpenSSL.rand.bytes\n#    random_provider = \"OpenSSL\"\nimport os\nrandom_function = os.urandom\n\nclass DiffieHellman(object):\n    \"\"\"\n    A reference implementation of the Diffie-Hellman protocol.\n    By default, this class uses the 6144-bit MODP Group (Group 17) from RFC 3526.\n    This prime is sufficient to generate an AES 256 key when used with\n    a 540+ bit exponent.\n    \"\"\"\n\n    def __init__(self, generator=2, group=17, keyLength=540):\n        \"\"\"\n        Generate the public and private keys.\n        \"\"\"\n        min_keyLength = 180\n        default_keyLength = 540\n\n        default_generator = 2\n        valid_generators = [ 2, 3, 5, 7 ]\n\n        # Sanity check fors generator and keyLength\n        if(generator not in valid_generators):\n            print(\"Error: Invalid generator. Using default.\")\n            self.generator = default_generator\n        else:\n            self.generator = generator\n\n        if(keyLength < min_keyLength):\n            print(\"Error: keyLength is too small. Setting to minimum.\")\n            self.keyLength = min_keyLength\n        else:\n            self.keyLength = keyLength\n            \n        self.prime = self.getPrime(group)\n\n        self.privateKey = self.genPrivateKey(keyLength)\n        self.publicKey = self.genPublicKey()\n\n    def getPrime(self, group=17):\n        \"\"\"\n        Given a group number, return a prime.\n        \"\"\"\n        default_group = 17\n\n        primes = {\n        5:  0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF,\n        14: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF,\n        15: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF,\n        16: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF,\n        17:\n        0xn        18:\n        0xn        }\n\n        if group in primes.keys():\n            return primes[group]\n        else:\n            print(\"Error: No prime with group %i. Using default.\" % group)\n            return primes[default_group]\n\n    def genRandom(self, bits):\n        \"\"\"\n        Generate a random number with the specified number of bits\n        \"\"\"\n        _rand = 0\n        _bytes = bits // 8 + 8\n\n        while(_rand.bit_length() < bits):\n            try:\n                # Python 3\n                _rand = int.from_bytes(random_function(_bytes), byteorder='big')\n            except:\n                # Python 2\n                _rand = int(OpenSSL.rand.bytes(_bytes).encode('hex'), 16)\n\n        return _rand\n\n    def genPrivateKey(self, bits):\n        \"\"\"\n        Generate a private key using a secure random number generator.\n        \"\"\"\n        return self.genRandom(bits)\n\n    def genPublicKey(self):\n        \"\"\"\n        Generate a public key X with g**x % p.\n        \"\"\"\n        return pow(self.generator, self.privateKey, self.prime)\n\n    def checkPublicKey(self, otherKey):\n        \"\"\"\n        Check the other party's public key to make sure it's valid.\n        Since a safe prime is used, verify that the Legendre symbol == 1\n        \"\"\"\n        if(otherKey > 2 and otherKey < self.prime - 1):\n            if(pow(otherKey, (self.prime - 1)//2, self.prime) == 1):\n                return True\n        return False\n\n    def genSecret(self, privateKey, otherKey):\n        \"\"\"\n        Check to make sure the public key is valid, then combine it with the\n        private key to generate a shared secret.\n        \"\"\"\n        if(self.checkPublicKey(otherKey) == True):\n            sharedSecret = pow(otherKey, privateKey, self.prime)\n            return sharedSecret\n        else:\n            raise Exception(\"Invalid public key.\")\n\n    def genKey(self, otherKey):\n        \"\"\"\n        Derive the shared secret, then hash it to obtain the shared key.\n        \"\"\"\n        self.sharedSecret = self.genSecret(self.privateKey, otherKey)\n\n        # Convert the shared secret (int) to an array of bytes in network order\n        # Otherwise hashlib can't hash it.\n        try:\n            _sharedSecretBytes = self.sharedSecret.to_bytes(\n                self.sharedSecret.bit_length() // 8 + 1, byteorder=\"big\")\n        except AttributeError:\n            _sharedSecretBytes = str(self.sharedSecret)\n\n        s = hashlib.sha256()\n        s.update(bytes(_sharedSecretBytes))\n        self.key = s.digest()\n \n    def getKey(self):\n        \"\"\"\n        Return the shared secret key\n        \"\"\"\n        return self.key\n\n    def showParams(self):\n        \"\"\"\n        Show the parameters of the Diffie Hellman agreement.\n        \"\"\"\n        print(\"Parameters:\")\n        print(\"Prime[{0}]: {1}\".format(self.prime.bit_length(), self.prime))\n        print(\"Generator[{0}]: {1}\\n\".format(self.generator.bit_length(),\n            self.generator))\n        print(\"Private key[{0}]: {1}\\n\".format(self.privateKey.bit_length(),\n            self.privateKey))\n        print(\"Public key[{0}]: {1}\".format(self.publicKey.bit_length(),\n            self.publicKey))\n\n    def showResults(self):\n        \"\"\"\n        Show the results of a Diffie-Hellman exchange.\n        \"\"\"\n        print(\"Results:\")\n        print(\"Shared secret[{0}]: {1}\".format(self.sharedSecret.bit_length(),\n            self.sharedSecret))\n        print(\"Shared key[{0}]: {1}\".format(len(self.key), hexlify(self.key)))\n\nif __name__==\"__main__\":\n    \"\"\"\n    Run an example Diffie-Hellman exchange\n    \"\"\"\n    a = DiffieHellman()\n    b = DiffieHellman()\n\n    a.genKey(b.publicKey)\n    b.genKey(a.publicKey)\n\n    #a.showParams()\n    #a.showResults()\n    #b.showParams()\n    #b.showResults()\n\n    if(a.getKey() == b.getKey()):\n        print(\"Shared keys match.\")\n        print(\"Key:\", hexlify(a.key))\n    else:\n        print(\"Shared secrets didn't match!\")\n        print(\"Shared secret A: \", a.genSecret(b.publicKey))\n        print(\"Shared secret B: \", b.genSecret(a.publicKey))\n",
    "bob\\AESCipher.py": "import base64\nimport hashlib\nfrom Crypto import Random\nfrom Crypto.Cipher import AES\n\n#https://stackoverflow.com/questions/12524994/encrypt-decrypt-using-pycrypto-aes-256\n\nclass AESCipher(object):\n\n    def __init__(self, key): \n        self.bs = 16\n        self.key = key\n\n    def encrypt(self, raw):\n        raw = self._pad(raw)\n        iv = Random.new().read(AES.block_size)\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return base64.b64encode(iv + cipher.encrypt(raw))\n\n    def decrypt(self, enc):\n        enc = base64.b64decode(enc)\n        iv = enc[:AES.block_size]\n        cipher = AES.new(self.key, AES.MODE_CBC, iv)\n        return self._unpad(cipher.decrypt(enc[AES.block_size:])).decode('utf-8')\n\n    def _pad(self, s):\n        return s + (self.bs - len(s) % self.bs) * chr(self.bs - len(s) % self.bs)\n\n    @staticmethod\n    def _unpad(s):\n        return s[:-ord(s[len(s)-1:])]\n",
    "bob\\bob.py": "import socket\nimport os\nimport sys\nfrom time import sleep\nfrom binascii import hexlify\nfrom DiffieHellman import DiffieHellman\nfrom base64 import b64encode, b64decode\nfrom AESCipher import AESCipher\n\nTCP_IP = '0.0.0.0'\nTCP_PORT = 5005\n\ndef recvall(sock, n):\n# Helper function to recv n bytes or return None if EOF is hit\n    data = b''\n    while len(data) < n:\n        sock.settimeout(20)\n        packet = sock.recv(n - len(data))\n        if not packet:\n            print(\"Timeoute\")\n            return None\n        data += packet\n    return data\n\nwhile True:\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.bind((TCP_IP, TCP_PORT))\n        sock.listen(1)\n\n        print(\"Listening on {}:{}\".format(TCP_IP, TCP_PORT))\n        sys.stdout.flush()\n    except Exception as e:\n        print(e)\n        pass\n\n    while True:\n        try:\n            print(\"Waiting for conn\")\n            sys.stdout.flush()\n            conn, addr = sock.accept()\n            m = recvall(conn, 2468)\n#            m = conn.recv(10000).decode()\n            print(\"Recvd: \", m)\n            print(\"Len: \", len(m))\n            sys.stdout.flush()\n            data = b64decode(m) # buffer size is 1024 bytes\n            print(\"Recved pub key\")\n            sys.stdout.flush()\n    \n            b = DiffieHellman()\n            msg = b64encode(str(b.publicKey).encode())\n            conn.sendall(msg)\n\n            b.genKey(int(data))\n            print(\"Generated private key\")\n            sys.stdout.flush()\n    #        ciphertext = conn.recv(4096)\n\n            aes = AESCipher(b.key)\n\n            f = open('script.txt')\n\n            count = 0\n            for line in f:\n    #            print(\"In loop\")\n                if count % 2 == 1:\n                    ciphertext = aes.encrypt(line)\n                    conn.sendall(ciphertext)\n                    print(\"Sending {}\".format(line))\n                else:\n                    ciphertext = conn.recv(4096)\n                    data = aes.decrypt(ciphertext)\n                    print(\"Recvd {}\".format(data))\n                    if data != line:\n                        ciphertext = aes.encrypt(\"Hmmm... That doesn't sound right\")\n                        conn.sendall(ciphertext)\n                        print(\"Hmmm... That doesn't sound right: {}\".format(line))\n                        break\n                count += 1\n\n            conn.close()\n            print(\"Done\")\n            sys.stdout.flush()\n\n        except Exception as e:\n            print(e)\n#            conn.sendall(e)\n            conn.close()\n            pass \n        sleep(1)\n",
    "bob\\DiffieHellman.py": "#!/usr/bin/env python\n\"\"\"\nPyDHE - Diffie-Hellman Key Exchange in Python\nCopyright (C) 2015 by Mark Loiseau\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"\n\nimport hashlib\nfrom binascii import hexlify # For debug output\n\n# If a secure random number generator is unavailable, exit with an error.\n#try:\n#    import ssl\n#    random_function = ssl.RAND_bytes\n#    random_provider = \"Python SSL\"\n#except (AttributeError, ImportError):\n#    import OpenSSL\n#    random_function = OpenSSL.rand.bytes\n#    random_provider = \"OpenSSL\"\nimport os\nrandom_function = os.urandom\n\nclass DiffieHellman(object):\n    \"\"\"\n    A reference implementation of the Diffie-Hellman protocol.\n    By default, this class uses the 6144-bit MODP Group (Group 17) from RFC 3526.\n    This prime is sufficient to generate an AES 256 key when used with\n    a 540+ bit exponent.\n    \"\"\"\n\n    def __init__(self, generator=2, group=17, keyLength=540):\n        \"\"\"\n        Generate the public and private keys.\n        \"\"\"\n        min_keyLength = 180\n        default_keyLength = 540\n\n        default_generator = 2\n        valid_generators = [ 2, 3, 5, 7 ]\n\n        # Sanity check fors generator and keyLength\n        if(generator not in valid_generators):\n            print(\"Error: Invalid generator. Using default.\")\n            self.generator = default_generator\n        else:\n            self.generator = generator\n\n        if(keyLength < min_keyLength):\n            print(\"Error: keyLength is too small. Setting to minimum.\")\n            self.keyLength = min_keyLength\n        else:\n            self.keyLength = keyLength\n\n        self.prime = self.getPrime(group)\n\n        self.privateKey = self.genPrivateKey(keyLength)\n        self.publicKey = self.genPublicKey()\n\n    def getPrime(self, group=17):\n        \"\"\"\n        Given a group number, return a prime.\n        \"\"\"\n        default_group = 17\n\n        primes = {\n        5:  0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF,\n        14: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF,\n        15: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF,\n        16: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF,\n        17:\n        0xn        18:\n        0xn        }\n\n        if group in primes.keys():\n            return primes[group]\n        else:\n            print(\"Error: No prime with group %i. Using default.\" % group)\n            return primes[default_group]\n\n    def genRandom(self, bits):\n        \"\"\"\n        Generate a random number with the specified number of bits\n        \"\"\"\n        _rand = 0\n        _bytes = bits // 8 + 8\n\n        while(_rand.bit_length() < bits):\n            try:\n                # Python 3\n                _rand = int.from_bytes(random_function(_bytes), byteorder='big')\n            except:\n                # Python 2\n                _rand = int(OpenSSL.rand.bytes(_bytes).encode('hex'), 16)\n\n        return _rand\n\n    def genPrivateKey(self, bits):\n        \"\"\"\n        Generate a private key using a secure random number generator.\n        \"\"\"\n        return self.genRandom(bits)\n\n    def genPublicKey(self):\n        \"\"\"\n        Generate a public key X with g**x % p.\n        \"\"\"\n        return pow(self.generator, self.privateKey, self.prime)\n\n    def checkPublicKey(self, otherKey):\n        \"\"\"\n        Check the other party's public key to make sure it's valid.\n        Since a safe prime is used, verify that the Legendre symbol == 1\n        \"\"\"\n        if(otherKey > 2 and otherKey < self.prime - 1):\n            if(pow(otherKey, (self.prime - 1)//2, self.prime) == 1):\n                return True\n        return False\n\n    def genSecret(self, privateKey, otherKey):\n        \"\"\"\n        Check to make sure the public key is valid, then combine it with the\n        private key to generate a shared secret.\n        \"\"\"\n        if(self.checkPublicKey(otherKey) == True):\n            sharedSecret = pow(otherKey, privateKey, self.prime)\n            return sharedSecret\n        else:\n            raise Exception(\"Invalid public key.\")\n\n    def genKey(self, otherKey):\n        \"\"\"\n        Derive the shared secret, then hash it to obtain the shared key.\n        \"\"\"\n        self.sharedSecret = self.genSecret(self.privateKey, otherKey)\n\n        # Convert the shared secret (int) to an array of bytes in network order\n        # Otherwise hashlib can't hash it.\n        try:\n            _sharedSecretBytes = self.sharedSecret.to_bytes(\n                self.sharedSecret.bit_length() // 8 + 1, byteorder=\"big\")\n        except AttributeError:\n            _sharedSecretBytes = str(self.sharedSecret)\n\n        s = hashlib.sha256()\n        s.update(bytes(_sharedSecretBytes))\n        self.key = s.digest()\n\n    def getKey(self):\n        \"\"\"\n        Return the shared secret key\n        \"\"\"\n        return self.key\n\n    def showParams(self):\n        \"\"\"\n        Show the parameters of the Diffie Hellman agreement.\n        \"\"\"\n        print(\"Parameters:\")\n        print(\"Prime[{0}]: {1}\".format(self.prime.bit_length(), self.prime))\n        print(\"Generator[{0}]: {1}\\n\".format(self.generator.bit_length(),\n            self.generator))\n        print(\"Private key[{0}]: {1}\\n\".format(self.privateKey.bit_length(),\n            self.privateKey))\n        print(\"Public key[{0}]: {1}\".format(self.publicKey.bit_length(),\n            self.publicKey))\n\n    def showResults(self):\n        \"\"\"\n        Show the results of a Diffie-Hellman exchange.\n        \"\"\"\n        print(\"Results:\")\n        print(\"Shared secret[{0}]: {1}\".format(self.sharedSecret.bit_length(),\n            self.sharedSecret))\n        print(\"Shared key[{0}]: {1}\".format(len(self.key), hexlify(self.key)))\n\nif __name__==\"__main__\":\n    \"\"\"\n    Run an example Diffie-Hellman exchange\n    \"\"\"\n    a = DiffieHellman()\n    b = DiffieHellman()\n\n    a.genKey(b.publicKey)\n    b.genKey(a.publicKey)\n\n    #a.showParams()\n    #a.showResults()\n    #b.showParams()\n    #b.showResults()\n\n    if(a.getKey() == b.getKey()):\n        print(\"Shared keys match.\")\n        print(\"Key:\", hexlify(a.key))\n    else:\n        print(\"Shared secrets didn't match!\")\n        print(\"Shared secret A: \", a.genSecret(b.publicKey))\n        print(\"Shared secret B: \", b.genSecret(a.publicKey))\n",
    "bob\\Dockerfile": "FROM python:3.5-alpine\nRUN apk update && apk add build-base\nRUN pip3 install pycrypto\nCOPY ./bob.py ./bob.py\nCOPY ./AESCipher.py ./AESCipher.py\nCOPY ./DiffieHellman.py ./DiffieHellman.py\nCOPY ./script.txt ./script.txt\nCMD [\"python\", \"./bob.py\"]\n",
    "bob\\script.txt": "1st Soldier with a Keen Interest in Birds: Who goes there?\nKing Arthur: It is I, Arthur, son of Uther Pendragon, from the castle of Camelot. King of the Britons, defeater of the Saxons, Sovereign of all England!\n1st Soldier with a Keen Interest in Birds: Pull the other one!\nKing Arthur: I am, and this is my trusty servant Patsy. We have ridden the length and breadth of the land in search of knights who will join me in my court at Camelot. I must speak with your lord and master.\n1st Soldier with a Keen Interest in Birds: What? Ridden on a horse?\nKing Arthur: Yes!\n1st Soldier with a Keen Interest in Birds: You're using coconuts!\nKing Arthur: What?\n1st Soldier with a Keen Interest in Birds: You've got two empty halves of coconut and you're bangin' 'em together.\nKing Arthur: So? We have ridden since the snows of winter covered this land, through the kingdom of Mercia, through...\n1st Soldier with a Keen Interest in Birds: Where'd you get the coconuts?\nKing Arthur: We found them.\n1st Soldier with a Keen Interest in Birds: Found them? In Mercia? The coconut's tropical!\nKing Arthur: What do you mean?\n1st Soldier with a Keen Interest in Birds: Well, this is a temperate zone.\nKing Arthur: The swallow may fly south with the sun or the house martin or the plover may seek warmer climes in winter, yet these are not strangers to our land?\n1st Soldier with a Keen Interest in Birds: Are you suggesting coconuts migrate?\nKing Arthur: Not at all. They could be carried.\n1st Soldier with a Keen Interest in Birds: What? A swallow carrying a coconut?\nKing Arthur: It could grip it by the husk!\n1st Soldier with a Keen Interest in Birds: It's not a question of where he grips it! It's a simple question of weight ratios! A five ounce bird could not carry a one pound coconut.\nKing Arthur: Well, it doesn't matter. Will you go and tell your master that Arthur from the Court of Camelot is here?\n1st Soldier with a Keen Interest in Birds: Listen. In order to maintain air-speed velocity, a swallow needs to beat its wings forty-three times every second, right?\nKing Arthur: Please!\n1st Soldier with a Keen Interest in Birds: Am I right?\nKing Arthur: I suppose so. Here is your flag: gigem{d1ff13_w1ff13_b6dffb749778d6b}\n",
    "common\\docker-compose.yml": "version: '2.1'\n\nservices:\n    dhcpd:\n        build: ../common/dhcpd/build\n        image: naumachia/common.dhcpd\n        networks:\n            default:\n",
    "common\\arpon\\arpon-start": "#!/bin/sh\n\nset -e\n\nDIR=\"${ARPON_DIR:-/etc/arpon}\"\nSARPI=\"${DIR}/arpon.sarpi\"\nIFACE=\"${ARPON_IFACE:-eth0}\"\n\n# If the directory exists, it has been mounted to provide a static cache\nif [ -d \"$DIR\" ]; then\n    MAC=$(cat /sys/class/net/${IFACE}/address)\n    IP=$(ifconfig $IFACE | awk '/inet / {print $2}' | sed 's/addr://')\n\n    if [ -z \"$MAC\" ] || [ -z \"$IP\" ]; then\n        echo \"ARPON: failed to gather system network information\"\n        exit 1\n    fi\n    \n    # A newer version allows setting the configuration file.\n    # The link is until this is availible\n    echo \"$IP    $MAC\" >> $SARPI\n    rm /etc/arpon.conf && ln -s $SARPI /etc/arpon.conf\n    echo \"ARPON: starting arpon in static mode\"\n    ARPON=\"arpon -d -i $IFACE -S\"\n\n# Otherwise use dynamic, which doesn't work quite as well\nelse\n    echo \"ARPON: starting arpon in dynamic mode\"\n    ARPON=\"arpon -d -i $IFACE -D\"\nfi\n\n$ARPON\n\n# If we are using a static cache, set a trigger to reboot arpon on cache edit\nif [ -d \"$DIR\" ]; then\n    LTIME=`stat -c %Y $SARPI`\n\n    while true; do\n       ATIME=`stat -c %Y $SARPI`\n\n       if [ \"$ATIME\" != \"$LTIME\" ]\n       then    \n           LTIME=$ATIME\n           if [ -r /var/run/arpon.pid ]; then\n               kill `cat /var/run/arpon.pid`\n           fi\n           $ARPON\n       fi\n       sleep 1\n    done &\nfi\n\necho \"ARPON: setup done, now running $@\"\nexec \"$@\"\n",
    "common\\arpon\\docker-compose.yml": "version: '2.1'\n\n# This compose file exists to make building easy and to document options needed\n\nservices:\n    alpine:\n        build:\n            dockerfile: Dockerfile-base\n            context: .\n        image: naumachia/common.arpon:alpine\n        << : &runtime\n            sysctls:\n                net.ipv4.conf.eth0.arp_ignore: 8\n                net.ipv4.conf.eth0.arp_accept: 0\n            cap_add:\n                - NET_ADMIN\n                - NET_RAW\n            volumes:\n                - arpon:/etc/arpon\n\n    python:\n        build:\n            dockerfile: Dockerfile-python\n            context: .\n        image: naumachia/common.arpon:python\n        << : *runtime\n\n    bind:\n        build:\n            dockerfile: Dockerfile-bind\n            context: .\n        image: naumachia/common.arpon:bind\n        << : *runtime\n\nvolumes:\n    arpon:\n",
    "common\\arpon\\Dockerfile-base": "FROM alpine:latest\n\n# BUILD ARPON FROM SOURCE UNTIL IT'S AVAILIBLE FROM REPO\nRUN echo \"http://dl-4.alpinelinux.org/alpine/edge/community/\" >> /etc/apk/repositories && \\\n    echo \"http://dl-4.alpinelinux.org/alpine/edge/testing/\" >> /etc/apk/repositories && \\\n    apk add --update autoconf automake cmake libpcap-dev libnet-dev libdnet-dev linux-headers build-base git py-pip && \\\n    rm -rf /tmp/* /var/tmp/* /var/cache/apk/* /var/cache/distfiles/*\n\nARG ARPON_REPO_URL=https://github.com/nategraf/arpon.git\nARG ARPON_REPO_BRANCH=capabilities\n\nCOPY ./make-arpon.sh ./make-arpon.sh\nRUN source ./make-arpon.sh\n\nRUN apk del autoconf automake cmake linux-headers build-base git py-pip && \\\n    rm ./make-arpon.sh\n#############################################\n\nCOPY ./arpon-start /sbin/arpon-start\nRUN chmod +x /sbin/arpon-start\n\nENTRYPOINT [\"/sbin/arpon-start\"]\n",
    "common\\arpon\\Dockerfile-bind": "FROM sameersbn/bind:9.9.5-20161106\n\n# BUILD ARPON FROM SOURCE UNTIL IT'S AVAILIBLE FROM REPO\nRUN apt-get update && \\\n    apt-get -y install autoconf automake cmake libpcap-dev libnet1-dev libdumbnet-dev build-essential git python3-pip\n\nARG ARPON_REPO_URL=https://github.com/nategraf/arpon.git\nARG ARPON_REPO_BRANCH=capabilities\n\nCOPY ./make-arpon.sh ./make-arpon.sh\nRUN sh ./make-arpon.sh\n\nRUN apt-get -y remove autoconf automake cmake build-essential git python3-pip && \\\n    apt-get -y autoremove && \\\n    rm ./make-arpon.sh\n#############################################\n\nCOPY ./arpon-start /sbin/arpon-start\nRUN chmod +x /sbin/arpon-start\n\nENTRYPOINT [\"/sbin/arpon-start\", \"/sbin/entrypoint.sh\"]\n",
    "common\\arpon\\Dockerfile-python": "FROM python:3.5-alpine\n\n# BUILD ARPON FROM SOURCE UNTIL IT'S AVAILIBLE FROM REPO\nRUN echo \"http://dl-4.alpinelinux.org/alpine/edge/community/\" >> /etc/apk/repositories && \\\n    echo \"http://dl-4.alpinelinux.org/alpine/edge/testing/\" >> /etc/apk/repositories && \\\n    apk add --update autoconf automake cmake libpcap-dev libnet-dev libdnet-dev linux-headers build-base git py-pip && \\\n    rm -rf /tmp/* /var/tmp/* /var/cache/apk/* /var/cache/distfiles/*\n\nARG ARPON_REPO_URL=https://github.com/nategraf/arpon.git\nARG ARPON_REPO_BRANCH=capabilities\n\nCOPY ./make-arpon.sh ./make-arpon.sh\nRUN source ./make-arpon.sh\n\nRUN apk del autoconf automake cmake linux-headers build-base git py-pip && \\\n    rm ./make-arpon.sh\n#############################################\n\nCOPY ./arpon-start /sbin/arpon-start\nRUN chmod +x /sbin/arpon-start\n\nENTRYPOINT [\"/sbin/arpon-start\"]\n",
    "common\\arpon\\make-arpon.sh": "#!/bin/sh\n\nset -e\n\necho \"Building ArpON from $ARPON_REPO_URL\"\n\nmkdir build-tmp\ncd build-tmp\n\ngit clone \"$ARPON_REPO_URL\" arpon\nif [ -z \"$(ls arpon)\" ]; then\n    echo \"BUILD FAILED: Could not clone $ARPON_REP_URL\"\n    exit 1\nfi\n\ncd arpon\n\nif [ -n \"$ARPON_REPO_BRANCH\" ]; then\n    git checkout \"$ARPON_REPO_BRANCH\"\nfi\n\nmkdir build && cd build\n\ncmake .. && make && make install\n\ncd ../../..\n\nrm -rf build-tmp\n",
    "common\\dhcpd\\build\\dhcpd.conf.template": "[Binary file or unsupported type: template]",
    "common\\dhcpd\\build\\dhcpd_envs.sh": "function split_ipaddr {\n    (IFS=. read IP[0] IP[1] IP[2] IP[3] <<< \"$1\"; echo \"${IP[@]}\")\n}\n\nif [ -z \"$DHCPD_DEV\" ]; then\n    DHCPD_DEV=\"eth0\"\nfi\n\nINFO=($(ifconfig | grep -EA 1 \"^${DHCPD_DEV}\\b\" | grep -oE \"\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b\"))\nexport DHCPD_IPADDR=\"${INFO[0]}\"\nexport DHCPD_BCAST=\"${INFO[1]}\"\nexport DHCPD_NMASK=\"${INFO[2]}\"\n\nIP=($(split_ipaddr \"$DHCPD_IPADDR\"))\nNM=($(split_ipaddr \"$DHCPD_NMASK\"))\n\nexport DHCPD_NADDR=$(printf \"%d.%d.%d.%d\\n\" \"$((IP[0] & NM[0]))\" \"$((IP[1] & NM[1]))\" \"$((IP[2] & NM[2]))\" \"$((IP[3] & NM[3]))\")\n\necho \"IPADDR: $DHCPD_IPADDR\"\necho \"BCAST:  $DHCPD_BCAST\"\necho \"NMASK:  $DHCPD_NMASK\"\necho \"NADDR:  $DHCPD_NADDR\"\n\nNA=($(split_ipaddr \"$DHCPD_NADDR\"))\nif [ -z \"$DHCPD_START\" ]; then\n    export DHCPD_START=\"0.0.0.1\"\nfi\n\nSTARTA=($(split_ipaddr \"$DHCPD_START\"))\nexport DHCPD_START=$(printf \"%d.%d.%d.%d\\n\" \"$(((STARTA[0] & ~NM[0]) + NA[0]))\" \"$(((STARTA[1] & ~NM[1]) + NA[1]))\" \"$(((STARTA[2] & ~NM[2]) + NA[2]))\" \"$(((STARTA[3] & ~NM[3]) + NA[3]))\")\n\nif [ -z \"$DHCPD_STOP\" ]; then\n    DHCPD_STOP=\"255.255.255.254\"\nfi\n\nSTOPA=($(split_ipaddr \"$DHCPD_STOP\"))\nexport DHCPD_STOP=$(printf \"%d.%d.%d.%d\\n\" \"$(((STOPA[0] & ~NM[0]) + NA[0]))\" \"$(((STOPA[1] & ~NM[1]) + NA[1]))\" \"$(((STOPA[2] & ~NM[2]) + NA[2]))\" \"$(((STOPA[3] & ~NM[3]) + NA[3]))\")\n\necho \"START:  $DHCPD_START\"\necho \"STOP:   $DHCPD_STOP\"\n",
    "common\\dhcpd\\build\\Dockerfile": "# Orignally written by https://github.com/jcbiellikltd/docker-dhcpd\nFROM alpine:latest\n\nRUN set -xe \\\n\t&& apk add --update --no-progress dhcp bash gettext \\\n\t&& rm -rf /var/cache/apk/*\n\nEXPOSE 67/udp 67/tcp\n\nRUN touch /var/lib/dhcp/dhcpd.leases\n\nCOPY ./entrypoint.sh /entrypoint.sh\nCOPY ./dhcpd.conf.template /dhcpd.conf.template\nCOPY ./dhcpd_envs.sh /dhcpd_envs.sh\n\nRUN chmod +x entrypoint.sh\nRUN chmod +x dhcpd_envs.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\nCMD [\"/usr/sbin/dhcpd\", \"-4\", \"-f\", \"-d\", \"--no-pid\", \"-cf\", \"/etc/dhcp/dhcpd.conf\"]\n",
    "common\\dhcpd\\build\\entrypoint.sh": "#!/usr/bin/env bash\n\nsource dhcpd_envs.sh\nenvsubst </dhcpd.conf.template >/etc/dhcp/dhcpd.conf\necho \"$@\"\nexec \"$@\"\n",
    "common\\router\\docker-compose.yml": "version: '2.1'\n\nservices:\n    alice:\n        << : &shared\n            image: naumachia/common.router\n            sysctls:\n                net.ipv4.ip_forward: 1\n            volumes:\n                - route:/app/routes\n            environment:\n                ROUTE_SHARE: /app/routes\n                LOG_LEVEL: debug\n            cap_add:\n                - NET_ADMIN\n            dns: 127.0.0.40\n        build: ./build\n        hostname: alice\n        networks:\n            alpha:\n\n    bob:\n        << : *shared\n        hostname: bob\n        networks:\n            alpha:\n            beta:\n\n    catherine:\n        << : *shared\n        hostname: catherine\n        networks:\n            alpha:\n            beta:\n            delta:\n        sysctls:\n            net.ipv4.ip_forward: 0\n\n    dave:\n        << : *shared\n        hostname: dave\n        networks:\n            beta:\n            eta:\n\n    eddy:\n        << : *shared\n        hostname: eddy\n        networks:\n            delta:\n            eta:\n\n    frank:\n        << : *shared\n        hostname: frank\n        networks:\n            delta:\n\n    georgia:\n        << : *shared\n        hostname: georgia\n        networks:\n            gamma:\n            delta:\n        sysctls:\n            net.ipv4.ip_forward: 0\n\n    hannah:\n        << : *shared\n        hostname: hannah\n        networks:\n            gamma:\n\nvolumes:\n    route:\n\nnetworks:\n    alpha:\n        &alpha\n        internal: true\n        ipam:\n            driver: mini\n    beta: *alpha\n    gamma: *alpha\n    delta: *alpha\n    eta: *alpha\n",
    "common\\router\\build\\agent.py": "from os import path, environ\nfrom dnslib import RR, QTYPE, A\nfrom dnslib.server import DNSServer, DNSHandler, BaseResolver, DNSLogger\nfrom ipaddress import IPv4Network, IPv4Interface\nfrom graph import Network, Node, Encoder\nfrom glob import glob\nfrom time import sleep\nfrom inotify.constants import IN_CLOSE_WRITE, IN_MODIFY\nfrom inotify.adapters import Inotify\nimport json\nimport ifaddr\nimport platform\nimport logging\nimport re\nimport subprocess\n\nsharedir = environ.get(\"ROUTE_SHARE\", path.join(path.dirname(__file__), 'test'))\nlocalhost = environ.get(\"ROUTE_HOSTNAME\", platform.node())\ndnsport = int(environ.get(\"DNS_PORT\", 53))\ndnsaddr = environ.get(\"DNS_ADDR\", '127.0.0.40')\nloglevel = environ.get(\"LOG_LEVEL\", None)\nnetwork = Network()\n\ndef diff(left, right):\n    if type(left) is not type(right):\n        return left, right\n    elif type(left) is dict:\n        lkeys, rkeys = set(left), set(right)\n        ldiff, rdiff = {}, {}\n        for k in lkeys - rkeys:\n            ldiff[k] = left[k]\n        for k in rkeys - lkeys:\n            rdiff[k] = right[k]\n        for k in rkeys & lkeys:\n            l, r = diff(left[k], right[k])\n            if l is not None:\n                ldiff[k] = l\n            if r is not None:\n                rdiff[k] = r\n        return ldiff or None, rdiff or None\n    else:\n        if left == right:\n            return None, None\n        else:\n            return left, right\n\ndef load_node(filename):\n    with open(filename, 'r') as f:\n        return json.load(f, object_hook=Node.from_json)\n\ndef load_nodes(dirname):\n    nodes = {}\n    for filename in glob(path.join(dirname, '*.json')):\n        node = load_node(filename)\n        if node.name not in nodes:\n            nodes[node.name] = node\n        else:\n            raise ValueError(\"node name '{}' found from two files\".format(node.name))\n    return nodes\n\ndef ifaddrs():\n    ips = set()\n    for iface in ifaddr.get_adapters():\n        for ip in iface.ips:\n            if ip.is_IPv4 and not ip.ip.startswith('127'):\n                ips.add('{ip.ip}/{ip.network_prefix}'.format(ip=ip))\n    return ips\n\ndef routes():\n    p = subprocess.run(['route', '-n'], stdout=subprocess.PIPE, check=True)\n    result = []\n    pattern = re.compile(r'((?:\\d{1,3}\\.){3}\\d{1,3})\\s+'*3 + '.*')\n    for line in p.stdout.decode('utf-8').split('\\n'):\n        m = pattern.match(line)\n        if m is not None:\n            result.append((\n                IPv4Network(\"{0}/{2}\".format(*m.groups())).with_prefixlen,\n                m.group(2)\n            ))\n    return result\n\ndef update_routes():\n    # A lovely one-liner\n    desired = set((r.subnet.ipnet, (r.via and str(IPv4Interface(r.via.addr).ip)) or '0.0.0.0') for r in network.nodes[localhost].routes())\n    current = set(routes())\n    #logging.debug('updating routes desired = %s, current = %s', desired, current)\n\n    for net, gw in desired - current:\n        if gw != \"0.0.0.0\":\n            subprocess.run(['route', 'add', '-net', net, 'gw', gw], check=True)\n        else:\n            raise ValueError(\"invalid stat: missing direct route or incorrect desired state\")\n\n    for net, gw in current - desired:\n        if gw != \"0.0.0.0\":\n            subprocess.run(['route', 'del', '-net', net, 'gw', gw], check=True)\n        else:\n            logging.error(\"Attempted delete local route '%s gw %s'\", net, gw)\n\nclass DnsResolver(BaseResolver):\n        \"\"\"\n        Crawls the network graph to find the peer and returns a response\n        \"\"\"\n        def __init__(self, network, nodename):\n            self.network = network\n            self.nodename = nodename\n\n        def resolve(self, request, handler):\n            reply = request.reply()\n            q = request.q\n            if q.qtype == QTYPE.A:\n                addr = self.network.nodes[self.nodename].resolve(q.qname)\n                if addr is not None:\n                    rr = RR(q.qname, QTYPE.A, rdata=A(addr))\n                    reply.add_answer(rr)\n            return reply\n\ndef sysctl_ipv4_forward():\n    with open('/proc/sys/net/ipv4/ip_forward', 'r') as sysctl:\n        return int(sysctl.read())\n\nif __name__ == \"__main__\":\n    # Init logging\n    if loglevel is not None:\n        levelnum = getattr(logging, loglevel.upper(), None)\n        if not isinstance(levelnum, int):\n            raise ValueError('Invalid log level: {}'.format(loglevel))\n    else:\n        levelnum = logging.INFO\n\n    logging.basicConfig(\n        level=levelnum\n    )\n\n    # Load up system inforamtion into a Node object representing this host\n    localnode = Node(localhost, ifaddrs(), bool(sysctl_ipv4_forward()))\n    network.add_node(localnode)\n\n    # Dump this host's information to a file on the share\n    with open(path.join(sharedir, localhost + '.json'), 'w') as f:\n        json.dump(localnode, f, cls=Encoder)\n    logging.debug(\"Wrote localhost node inforamtion to %s\", path.join(sharedir, localhost + '.json'))\n\n    # Add a filsytem watcher to get notified of changes\n    notify = Inotify()\n    notify.add_watch(sharedir, IN_CLOSE_WRITE)\n\n    # Load the current state of every written node\n    # This is done after adding the watcher to prevent race conditions\n    for name, node in load_nodes(sharedir).items():\n        network.add_node(node)\n    logging.info(\"Loaded %d nodes: %s\", len(network.nodes), \" \".join(n.name for n in network.nodes.values()))\n\n    update_routes()\n\n    # Set up a DNS server to resolve names across subnets\n    resolver = DnsResolver(network, localhost)\n    dnsserver = DNSServer(resolver, port=dnsport, address=dnsaddr)\n    dnsserver.start_thread()\n    logging.info(\"DNS server now running at %s:%d\", dnsaddr, dnsport)\n\n    # Until the heat death of the universe: Watch for changed files and load updates\n    for event in notify.event_gen(yield_nones=False):\n        # Wait to get 1 second without events\n        #for event in notify.event_gen(yield_nones=False, timeout_s=2):\n        #    continue\n        sleep(1)\n\n        # Theorectically only the changed file needs to reloaded. In practice this isn't reliable\n        for name, node in load_nodes(sharedir).items():\n            network.add_node(node)\n        logging.info(\"Reloaded %d nodes: %s\", len(network.nodes), \" \".join(n.name for n in network.nodes.values()))\n\n        update_routes()\n",
    "common\\router\\build\\Dockerfile": "FROM python:3-alpine\n\nRUN apk --no-cache add bind-tools\n\nCOPY requirements.txt /app/\nRUN pip install -r /app/requirements.txt\n\nCOPY *.py /app/\n\nCMD [\"python3\", \"/app/agent.py\"]\n",
    "common\\router\\build\\graph.py": "from ipaddress import IPv4Network, IPv4Interface\nimport json\n\nclass Network:\n    def __init__(self):\n        self.subnets = {}\n        self.nodes = {}\n\n    def get_subnet(self, ipnet):\n        netaddr = IPv4Network(ipnet, strict=False).with_prefixlen\n        if netaddr in self.subnets:\n            return self.subnets[netaddr]\n        else:\n            obj = Subnet(netaddr)\n            self.subnets[netaddr] = obj\n            return obj\n\n    def add_node(self, node):\n        # Remove the old node from this network\n        if node.name in self.nodes:\n            for iface in self.nodes[node.name].interfaces:\n                iface.dissociate()\n\n        self.nodes[node.name] = node\n\n        for iface in node.interfaces:\n            iface.associate(self)\n\n    def to_json(self):\n        return {k: node.to_json() for k, node in self.nodes.items()}\n\nclass Node:\n    def __init__(self, name, addrs, forward):\n        self.name = name\n        self.forward = forward\n        self.interfaces = [Interface(self, addr) for addr in addrs]\n\n    # Find all reachable networks and return route in terms of next hop\n    def routes(self):\n        visited = set([self])\n        routes = []\n        q = [(self, None)] # A node a the interface it is contacted by\n        while q:\n            node, via = q.pop(0)\n            for node_iface in node.interfaces:\n                subnet = node_iface.subnet\n                if subnet is not None and subnet not in visited:\n                    visited.add(subnet)\n                    routes.append(Route(subnet, via))\n                    for net_iface in subnet.interfaces:\n                        peer = net_iface.node\n                        if (peer is not None) and (peer not in visited) and peer.forward:\n                            visited.add(peer)\n                            q.append((peer, via or net_iface))\n        return routes\n\n    # Find the shortest path to a node and return the address of it's nearest interface\n    def resolve(self, peername):\n        if peername == self.name:\n            return '127.0.0.1'\n\n        visited = set([self])\n        q = [self]\n        while q:\n            curr = q.pop(0)\n            if isinstance(curr, Subnet):\n                for iface in curr.interfaces:\n                    if iface.node.name == peername:\n                        return str(IPv4Interface(iface.addr).ip)\n\n                    if iface.node not in visited:\n                        visited.add(iface.node)\n                        q.append(iface.node)\n            elif curr.forward or curr is self:\n                for iface in curr.interfaces:\n                    if iface.subnet not in visited:\n                        visited.add(iface.subnet)\n                        q.append(iface.subnet)\n\n        else:\n            return None\n\n    @classmethod\n    def from_json(cls, obj):\n        if all(key in obj for key in ['name', 'interfaces', 'forward']):\n            name = obj['name']\n            addrs = obj['interfaces']\n            forward = obj['forward']\n            return cls(name, addrs, forward)\n\n    def to_json(self):\n        return {k: getattr(self, k) for k in ['name', 'interfaces', 'forward']}\n\nclass Interface:\n    def __init__(self, node, addr):\n        self.addr = addr\n        self.node = node\n        self.subnet = None\n\n    def to_json(self):\n        return self.addr\n\n    def associate(self, network):\n        if self.subnet is not None:\n            self.dissociate()\n\n        self.subnet = network.get_subnet(self.addr)\n        self.subnet.attach(self)\n\n    def dissociate(self):\n        if self.subnet is not None:\n            self.subnet.detach(self)\n            self.subnet = None\n\nclass Subnet:\n    def __init__(self, ipnet):\n        self.ipnet = ipnet\n        self._interfaces = {}\n\n    @property\n    def interfaces(self):\n        return self._interfaces.values()\n\n    def attach(self, iface):\n        self._interfaces[iface.addr] = iface\n\n    def detach(self, iface):\n        self._interfaces.pop(iface.addr, None)\n\nclass Route:\n    def __init__(self, subnet, via):\n        self.subnet = subnet\n        self.via = via\n\nclass Encoder(json.JSONEncoder):\n    def default(self, o):\n        if 'to_json' in o.__class__.__dict__:\n            return o.to_json()\n        else:\n            return json.JSONEncoder.default(self, o)\n",
    "common\\router\\build\\requirements.txt": "inotify==0.2.9\nifaddr==0.1.4\ndnslib==0.9.7\n",
    "common\\router\\build\\__init__.py": "import agent\nimport graph\n",
    "common\\router\\build\\test\\a.json": "{\n    \"name\": \"A\",\n    \"interfaces\": [\n        \"172.16.0.1/24\"\n    ],\n    \"forward\": true\n}\n",
    "common\\router\\build\\test\\b.json": "{\n    \"name\": \"B\",\n    \"interfaces\": [\n        \"172.16.0.2/24\",\n        \"172.16.1.129/25\"\n    ],\n    \"forward\": true\n}\n",
    "common\\router\\build\\test\\c.json": "{\n    \"name\": \"C\",\n    \"interfaces\": [\n        \"172.17.0.5/30\",\n        \"172.16.1.130/25\"\n    ],\n    \"forward\": false\n}\n",
    "common\\router\\build\\test\\d.json": "{\n    \"name\": \"D\",\n    \"interfaces\": [\n        \"172.17.0.1/30\",\n        \"172.16.1.131/25\"\n    ],\n    \"forward\": true\n}\n",
    "common\\router\\build\\test\\e.json": "{\n    \"name\": \"E\",\n    \"interfaces\": [\n        \"172.16.0.3/24\",\n        \"172.16.1.1/25\"\n    ],\n    \"forward\": true\n}\n",
    "common\\router\\build\\test\\f.json": "{\n    \"name\": \"F\",\n    \"interfaces\": [\n        \"172.17.0.2/30\",\n        \"172.16.1.2/25\"\n    ],\n    \"forward\": false\n}\n",
    "common\\router\\build\\test\\g.json": "{\n    \"name\": \"G\",\n    \"interfaces\": [\n        \"192.168.0.1/28\"\n    ],\n    \"forward\": false\n}\n",
    "common\\router\\build\\test\\h.json": "{\n    \"name\": \"H\",\n    \"interfaces\": [\n        \"192.168.0.2/28\"\n    ],\n    \"forward\": true\n}\n",
    "common\\router\\build\\test\\i.json": "{\n    \"name\": \"I\",\n    \"interfaces\": [],\n    \"forward\": true\n}\n",
    "common\\router\\build\\test\\j.json": "{\n    \"name\": \"J\",\n    \"interfaces\": [\n        \"172.17.0.6/30\"\n    ],\n    \"forward\": true\n}\n",
    "category": "NetworkPentest"
}