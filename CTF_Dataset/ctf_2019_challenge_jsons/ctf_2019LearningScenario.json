{
    "README.md": "# Introduction to Reverse Engineering Challenge\n\n### Reversing 1: You can solve this one with strings!\n\n For this problem, provide the Unix Executable and the ctf-er should be able to run strings and and get the flag (once they figure out the lines are base64 encoded)\n\n### Reversing 2: gotta do a little more than just strings on this one (uncompyle6 or any python decompiler will do)\n\n For this problem, provide the .pyc problem which the ctf-er once decompiled will then have to figure out how the program works.. by you know.. reverse engineering to get the flag.\n\n### Reversing 3: Cheers to exposure to basic assembly for future reverse engineering problems!\n\n This one is assembly where you can really read what's going. I put random stuff between halves of the printed out flags to make it a little harder to figure out but it's still pretty decipherable and will help beginners be less terrified of assembly.\n\n### Reversing 4: Assembly Reverse Engineering Problem\n\nFlag is not hardcoded and is full assembly with rot13 functions.\n",
    "reversing1": "[Binary file or unsupported type: c:\\users\\jomue\\tamuctf-2019-master\\tamuctf-2019-master\\reversing\\learningscenario\\reversing1]",
    "reversing1.cpp": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n\tcout << \"QUFBQUFBQUFBQUFBQUFBQQ==\\n\";\n\tcout << \"Hello! I bet you are looking for the flag..\\n\";\n\tcout << \"I really like basic encoding.. can you tell what kind I used??\\n\";\n\tcout << \"RkxBR2ZsYWdGTEFHZmxhZ0ZMQUdmbGFn\\n\";\n\tcout << \"Q2FuIHlvdSByZWNvZ25pemUgYmFzZTY0Pz8=\\n\";\n\tcout << \"RkxBR2ZsYWdGTEFHZmxhZ0ZMQUdmbGFn\\n\";\n\tstring eflag = \"Z2lnZW17M2E1eV9SM3YzcjUxTjYhfQ==\\n\";\n\tcout << \"WW91IGp1c3QgbWlzc2VkIHRoZSBmbGFn\\n\";\n\treturn 0;\n}\n",
    "reversing2.py": "from datetime import datetime\n\n# ASCII values: so potential solution would be to notice and convert Fqaa (which is the flag)\nFqaa = [103, 105, 103, 101, 109, 123, 100, 101, 99, 111, 109, 112, 105, 108, 101, 125] \nXidT = [83, 117, 112, 101, 114, 83, 101, 99, 114, 101, 116, 75, 101, 121]\n\n\ndef main():\n\tprint \"Clock.exe\"\n\tinput = raw_input(\">: \").strip()\n\tkUIl = \"\"\n\tfor i in XidT:\n\t\tkUIl += chr(i)\n\t\n\tif input == kUIl:\n\t\talYe = \"\"\n\t\tfor i in Fqaa:\n\t\t\talYe += chr(i)\n\t\tprint alYe\n\t\t\n\telse:\n\t\tprint datetime.now()\n\n\n\nif __name__ == '__main__':\n\tmain()",
    "reversing2.pyc": "[Binary file or unsupported type: pyc]",
    "reversing3.c": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n\nchar* concat(const char *s1, const char *s2)\n{\n\tchar *result = malloc(strlen(s1) + strlen(s2) + 1);\n\tstrcpy(result, s1);\n\tstrcpy(result, s2);\n\treturn result;\n}\n\n\nint main() \n{\n\t/*Comments*/\n\n\t//char ans[] = {65, 53, 53, 51, 77, 98, 49, 89};\n\tchar ans[8] = \"\";\n\tans[0]=65;\n\tans[1]=53;\n\tans[2]=53;\n\tans[3]=51;\n\tans[4]=77;\n\tans[5]=98;\n\tans[6]=49;\n\tans[7]=89;\n\n\n\n\tint i;\n\t\n\tint x=0, y=1, z=2, a, b;\n\ta = z*z*z*(x+y+y+y)/14;\n\tb = z*z*z*(x+y+y)/3;\n\n\tprintf(\"The answer: %d\\n\", a);\n\tprintf(\"Maybe it's this:%d\\n\", b);\n\n\tprintf(\"gigem{%s}\\n\",ans);\n\n\n\treturn 0;\n}",
    "reversing3.s": "\t.section\t__TEXT,__text,regular,pure_instructions\n\t.build_version macos, 10, 14\n\t.globl\t_concat                 ## -- Begin function concat\n\t.p2align\t4, 0x90\n_concat:                                ## @concat\n\t.cfi_startproc\n## %bb.0:\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\tsubq\t$48, %rsp\n\tmovq\t%rdi, -8(%rbp)\n\tmovq\t%rsi, -16(%rbp)\n\tmovq\t-8(%rbp), %rdi\n\tcallq\t_strlen\n\tmovq\t-16(%rbp), %rdi\n\tmovq\t%rax, -32(%rbp)         ## 8-byte Spill\n\tcallq\t_strlen\n\tmovq\t-32(%rbp), %rsi         ## 8-byte Reload\n\taddq\t%rax, %rsi\n\taddq\t$1, %rsi\n\tmovq\t%rsi, %rdi\n\tcallq\t_malloc\n\tmovq\t$-1, %rdx\n\tmovq\t%rax, -24(%rbp)\n\tmovq\t-24(%rbp), %rdi\n\tmovq\t-8(%rbp), %rsi\n\tcallq\t___strcpy_chk\n\tmovq\t$-1, %rdx\n\tmovq\t-24(%rbp), %rdi\n\tmovq\t-16(%rbp), %rsi\n\tmovq\t%rax, -40(%rbp)         ## 8-byte Spill\n\tcallq\t___strcpy_chk\n\tmovq\t-24(%rbp), %rdx\n\tmovq\t%rax, -48(%rbp)         ## 8-byte Spill\n\tmovq\t%rdx, %rax\n\taddq\t$48, %rsp\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n                                        ## -- End function\n\t.globl\t_main                   ## -- Begin function main\n\t.p2align\t4, 0x90\n_main:                                  ## @main\n\t.cfi_startproc\n## %bb.0:\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\tsubq\t$80, %rsp\n\tleaq\tL_.str(%rip), %rdi\n\tmovl\t$3, %eax\n\tmovl\t$14, %ecx\n\txorl\t%esi, %esi\n\tmovl\t$8, %edx\n                                        ## kill: def %rdx killed %edx\n\tleaq\t-16(%rbp), %r8\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %r9\n\tmovq\t(%r9), %r9\n\tmovq\t%r9, -8(%rbp)\n\tmovl\t$0, -20(%rbp)\n\tmovq\t%rdi, -56(%rbp)         ## 8-byte Spill\n\tmovq\t%r8, %rdi\n\tmovl\t%ecx, -60(%rbp)         ## 4-byte Spill\n\tmovl\t%eax, -64(%rbp)         ## 4-byte Spill\n\tcallq\t_memset\n\tmovb\t$65, -16(%rbp)\n\tmovb\t$53, -15(%rbp)\n\tmovb\t$53, -14(%rbp)\n\tmovb\t$51, -13(%rbp)\n\tmovb\t$77, -12(%rbp)\n\tmovb\t$98, -11(%rbp)\n\tmovb\t$49, -10(%rbp)\n\tmovb\t$89, -9(%rbp)\n\tmovl\t$0, -28(%rbp)\n\tmovl\t$1, -32(%rbp)\n\tmovl\t$2, -36(%rbp)\n\tmovl\t-36(%rbp), %eax\n\timull\t-36(%rbp), %eax\n\timull\t-36(%rbp), %eax\n\tmovl\t-28(%rbp), %ecx\n\taddl\t-32(%rbp), %ecx\n\taddl\t-32(%rbp), %ecx\n\taddl\t-32(%rbp), %ecx\n\timull\t%ecx, %eax\n\tcltd\n\tmovl\t-60(%rbp), %ecx         ## 4-byte Reload\n\tidivl\t%ecx\n\tmovl\t%eax, -40(%rbp)\n\tmovl\t-36(%rbp), %eax\n\timull\t-36(%rbp), %eax\n\timull\t-36(%rbp), %eax\n\tmovl\t-28(%rbp), %esi\n\taddl\t-32(%rbp), %esi\n\taddl\t-32(%rbp), %esi\n\timull\t%esi, %eax\n\tcltd\n\tmovl\t-64(%rbp), %esi         ## 4-byte Reload\n\tidivl\t%esi\n\tmovl\t%eax, -44(%rbp)\n\tmovl\t-40(%rbp), %esi\n\tmovq\t-56(%rbp), %rdi         ## 8-byte Reload\n\tmovb\t$0, %al\n\tcallq\t_printf\n\tleaq\tL_.str.1(%rip), %rdi\n\tmovl\t-44(%rbp), %esi\n\tmovl\t%eax, -68(%rbp)         ## 4-byte Spill\n\tmovb\t$0, %al\n\tcallq\t_printf\n\tleaq\tL_.str.2(%rip), %rdi\n\tleaq\t-16(%rbp), %rsi\n\tmovl\t%eax, -72(%rbp)         ## 4-byte Spill\n\tmovb\t$0, %al\n\tcallq\t_printf\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rsi\n\tmovq\t(%rsi), %rsi\n\tmovq\t-8(%rbp), %rdi\n\tcmpq\t%rdi, %rsi\n\tmovl\t%eax, -76(%rbp)         ## 4-byte Spill\n\tjne\tLBB1_2\n## %bb.1:\n\txorl\t%eax, %eax\n\taddq\t$80, %rsp\n\tpopq\t%rbp\n\tretq\nLBB1_2:\n\tcallq\t___stack_chk_fail\n\tud2\n\t.cfi_endproc\n                                        ## -- End function\n\t.section\t__TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n\t.asciz\t\"The answer: %d\\n\"\n\nL_.str.1:                               ## @.str.1\n\t.asciz\t\"Maybe it's this:%d\\n\"\n\nL_.str.2:                               ## @.str.2\n\t.asciz\t\"gigem{%s}\\n\"\n\n\n.subsections_via_symbols\n",
    "rot13.c": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n\nint ra(int c){\n  if('a' <= c && c <= 'z'){\n    return rb(c,'a');\n  } else if ('A' <= c && c <= 'Z') {\n    return rb(c, 'A');\n  } else {\n    return c;\n  }\n}\n\nint rb(int c, int basis){\n  c = (((c-basis)+13)%26)+basis;\n  return c;\n}\n\nvoid app(char* s, char c) {\n        int len = strlen(s);\n        s[len] = c;\n        s[len+1] = '\\0';\n}\n\nint main() {\n  \n\tchar alpha[26] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','x','y','z'};\n\tchar x=0, y, flag, em, gigme[5], JIk[5];\n\tunsigned char ans, answ, gig;\n\tint i=0, lG;\n\twhile(i<3) {\n\t\tgig = 150;\n\t\tem = 25;\n\t\ty = 13;\n\t\tflag = 2;\n\t\tans = (((gig + em)/y)*(flag*flag*flag))+(x*x*x);\n\t\tansw = round(ans);\n\t\tx += 1;\n\t\t\n\t\tapp(gigme, answ);\n\t\ti += 1;\n\t}\n\tlG = sizeof(gigme);\n\n\tfor (i = 0; i <= lG; i++)\n\t\tJIk[i] = ra(gigme[i]);\n\n\n  return 0;\n}",
    "rot13.s": "\t.section\t__TEXT,__text,regular,pure_instructions\n\t.build_version macos, 10, 14\n\t.globl\t_ra                     ## -- Begin function ra\n\t.p2align\t4, 0x90\n_ra:                                    ## @ra\n\t.cfi_startproc\n## %bb.0:\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\tsubq\t$16, %rsp\n\tmovl\t$97, %eax\n\tmovl\t%edi, -8(%rbp)\n\tcmpl\t-8(%rbp), %eax\n\tjg\tLBB0_3\n## %bb.1:\n\tcmpl\t$122, -8(%rbp)\n\tjg\tLBB0_3\n## %bb.2:\n\tmovl\t$97, %esi\n\tmovl\t-8(%rbp), %edi\n\tcallq\t_rb\n\tmovl\t%eax, -4(%rbp)\n\tjmp\tLBB0_7\nLBB0_3:\n\tmovl\t$65, %eax\n\tcmpl\t-8(%rbp), %eax\n\tjg\tLBB0_6\n## %bb.4:\n\tcmpl\t$90, -8(%rbp)\n\tjg\tLBB0_6\n## %bb.5:\n\tmovl\t$65, %esi\n\tmovl\t-8(%rbp), %edi\n\tcallq\t_rb\n\tmovl\t%eax, -4(%rbp)\n\tjmp\tLBB0_7\nLBB0_6:\n\tmovl\t-8(%rbp), %eax\n\tmovl\t%eax, -4(%rbp)\nLBB0_7:\n\tmovl\t-4(%rbp), %eax\n\taddq\t$16, %rsp\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n                                        ## -- End function\n\t.globl\t_rb                     ## -- Begin function rb\n\t.p2align\t4, 0x90\n_rb:                                    ## @rb\n\t.cfi_startproc\n## %bb.0:\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\tmovl\t$26, %eax\n\tmovl\t%edi, -4(%rbp)\n\tmovl\t%esi, -8(%rbp)\n\tmovl\t-4(%rbp), %esi\n\tsubl\t-8(%rbp), %esi\n\taddl\t$13, %esi\n\tmovl\t%eax, -12(%rbp)         ## 4-byte Spill\n\tmovl\t%esi, %eax\n\tcltd\n\tmovl\t-12(%rbp), %esi         ## 4-byte Reload\n\tidivl\t%esi\n\taddl\t-8(%rbp), %edx\n\tmovl\t%edx, -4(%rbp)\n\tmovl\t-4(%rbp), %edx\n\tmovl\t%edx, %eax\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n                                        ## -- End function\n\t.globl\t_app                    ## -- Begin function app\n\t.p2align\t4, 0x90\n_app:                                   ## @app\n\t.cfi_startproc\n## %bb.0:\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\tsubq\t$16, %rsp\n\tmovb\t%sil, %al\n\tmovq\t%rdi, -8(%rbp)\n\tmovb\t%al, -9(%rbp)\n\tmovq\t-8(%rbp), %rdi\n\tcallq\t_strlen\n\tmovl\t%eax, %esi\n\tmovl\t%esi, -16(%rbp)\n\tmovb\t-9(%rbp), %cl\n\tmovq\t-8(%rbp), %rax\n\tmovslq\t-16(%rbp), %rdi\n\tmovb\t%cl, (%rax,%rdi)\n\tmovq\t-8(%rbp), %rax\n\tmovl\t-16(%rbp), %esi\n\taddl\t$1, %esi\n\tmovslq\t%esi, %rdi\n\tmovb\t$0, (%rax,%rdi)\n\taddq\t$16, %rsp\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n                                        ## -- End function\n\t.globl\t_main                   ## -- Begin function main\n\t.p2align\t4, 0x90\n_main:                                  ## @main\n\t.cfi_startproc\n## %bb.0:\n\tpushq\t%rbp\n\t.cfi_def_cfa_offset 16\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\n\t.cfi_def_cfa_register %rbp\n\tsubq\t$96, %rsp\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tmovq\t%rax, -8(%rbp)\n\tmovl\t$0, -52(%rbp)\n\tmovq\tL_main.alpha(%rip), %rax\n\tmovq\t%rax, -48(%rbp)\n\tmovq\tL_main.alpha+8(%rip), %rax\n\tmovq\t%rax, -40(%rbp)\n\tmovq\tL_main.alpha+16(%rip), %rax\n\tmovq\t%rax, -32(%rbp)\n\tmovw\tL_main.alpha+24(%rip), %cx\n\tmovw\t%cx, -24(%rbp)\n\tmovb\t$0, -53(%rbp)\n\tmovl\t$0, -76(%rbp)\nLBB3_1:                                 ## =>This Inner Loop Header: Depth=1\n\tcmpl\t$3, -76(%rbp)\n\tjge\tLBB3_3\n## %bb.2:                               ##   in Loop: Header=BB3_1 Depth=1\n\tleaq\t-61(%rbp), %rdi\n\tmovb\t$-106, -69(%rbp)\n\tmovb\t$25, -56(%rbp)\n\tmovb\t$13, -54(%rbp)\n\tmovb\t$2, -55(%rbp)\n\tmovzbl\t-69(%rbp), %eax\n\tmovsbl\t-56(%rbp), %ecx\n\taddl\t%ecx, %eax\n\tmovsbl\t-54(%rbp), %ecx\n\tcltd\n\tidivl\t%ecx\n\tmovsbl\t-55(%rbp), %ecx\n\tmovl\t%ecx, %edx\n\timull\t%edx, %edx\n\timull\t%ecx, %edx\n\timull\t%edx, %eax\n\tmovsbl\t-53(%rbp), %ecx\n\tmovl\t%ecx, %edx\n\timull\t%edx, %edx\n\timull\t%ecx, %edx\n\taddl\t%edx, %eax\n\tmovb\t%al, %sil\n\tmovb\t%sil, -67(%rbp)\n\tmovzbl\t-67(%rbp), %eax\n\tcvtsi2sdl\t%eax, %xmm0\n\tmovq\t%rdi, -88(%rbp)         ## 8-byte Spill\n\tcallq\t_round\n\tcvttsd2si\t%xmm0, %eax\n\tmovb\t%al, %sil\n\tmovb\t%sil, -68(%rbp)\n\tmovsbl\t-53(%rbp), %eax\n\taddl\t$1, %eax\n\tmovb\t%al, %sil\n\tmovb\t%sil, -53(%rbp)\n\tmovq\t-88(%rbp), %rdi         ## 8-byte Reload\n\tmovsbl\t-68(%rbp), %esi\n\tcallq\t_app\n\tmovl\t-76(%rbp), %eax\n\taddl\t$1, %eax\n\tmovl\t%eax, -76(%rbp)\n\tjmp\tLBB3_1\nLBB3_3:\n\tmovl\t$5, -80(%rbp)\n\tmovl\t$0, -76(%rbp)\nLBB3_4:                                 ## =>This Inner Loop Header: Depth=1\n\tmovl\t-76(%rbp), %eax\n\tcmpl\t-80(%rbp), %eax\n\tjg\tLBB3_7\n## %bb.5:                               ##   in Loop: Header=BB3_4 Depth=1\n\tmovslq\t-76(%rbp), %rax\n\tmovsbl\t-61(%rbp,%rax), %edi\n\tcallq\t_ra\n\tmovb\t%al, %cl\n\tmovslq\t-76(%rbp), %rdx\n\tmovb\t%cl, -66(%rbp,%rdx)\n## %bb.6:                               ##   in Loop: Header=BB3_4 Depth=1\n\tmovl\t-76(%rbp), %eax\n\taddl\t$1, %eax\n\tmovl\t%eax, -76(%rbp)\n\tjmp\tLBB3_4\nLBB3_7:\n\tmovq\t___stack_chk_guard@GOTPCREL(%rip), %rax\n\tmovq\t(%rax), %rax\n\tmovq\t-8(%rbp), %rcx\n\tcmpq\t%rcx, %rax\n\tjne\tLBB3_9\n## %bb.8:\n\txorl\t%eax, %eax\n\taddq\t$96, %rsp\n\tpopq\t%rbp\n\tretq\nLBB3_9:\n\tcallq\t___stack_chk_fail\n\tud2\n\t.cfi_endproc\n                                        ## -- End function\n\t.section\t__TEXT,__cstring,cstring_literals\n\t.p2align\t4               ## @main.alpha\nL_main.alpha:\n\t.asciz\t\"abcdefghijklmnopqrstuvxyz\"\n\n\n.subsections_via_symbols\n",
    "category": "Reversing"
}