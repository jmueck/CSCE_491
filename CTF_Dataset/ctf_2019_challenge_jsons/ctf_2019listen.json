{
    "config.yml": "# [default: false] Indicates whether to deploy a test attacker container called eve\neve: false\n\n# [default: None] A domain name to append to challenge names to create their default common name\ndomain: 165.91.9.92\n\n# [default: './challenges'] The directory which contains your challenges\n# If the the path is relative, it will be relative to the generated docker-compose.yml file\nchallenges_directory: ./challenges\n\n# [optional] Configuration for the registrar server. Set to `null` or `false` to disable\nregistrar:\n    # [default: 3960] The exposed port for the registrar server\n    port: 3960\n    # [default: \"default\"] The docker network the registrar is connected to.\n    # The network will be unmanaged by compose except for the default network\n    network: default\n    # [default: false] Whether to serve using TLS\n    # If enabled, configure.py will set up a CA and certificates for the registrar\n    tls_enabled: true\n    # [default: false] Whether to enable TLS client verification\n    # Only has an effect if tls_enabled is true\n    tls_verify_client: true\n    # [optional] Clients for whom certificates will be generated\n    # Used in conbination with tls_verify_client to provide authentication\n    # For each client in this list a certificate and key will be created in the registrar/certs directory\n    tls_clients:\n        - admin\n        - www\n\n# [required] Configurations for each challenge\nchallenges:\n    # [required] An indiviual challenge config. The key is the challenge name\n    # This should be a valid unix filename and preferably short\n    listen:\n        # [default: 1194] The exposed external port for this challenges OpenVPN server\n        port: 2000\n        # [required] The compose files to which define this challenge\n        # Paths should be relative to the challenges directory\n        files:\n            - listen/docker-compose.yml\n        # [default: {domain}.{challenge name}] The commonname used for the OpenVPN's certificates\n        # This should be the domain name or ip that directs to this challenge\n        commonname: 165.91.9.92\n        # [default: None] If set, the OpenVPN management interface will be opened on localhost and the given port\n        openvpn_management_port: null\n",
    "docker-compose.yml": "version: '2.4'\n\nx-limits: &limits\n    pids_limit: 1024\n    cpu_shares: 256\n    mem_limit: 512m\n    logging:\n        options:\n            max-size: 10m\n            max-file: '3'\n\nservices:\n    hitchhiker:\n        <<: *limits\n        build: ./actor\n        image: naumachia/listen.actor\n        networks:\n            default:\n                ipv4_address: 172.30.0.2\n        restart: unless-stopped        \n\nnetworks:\n    default:\n        driver: l2bridge\n        ipam:\n            driver: static\n            config:\n                - subnet: 172.30.0.0/28\n",
    "README.md": "# Listen\n\n## Challenge\nIntro network exploit challenge where all the user has to do is listen to broadcast traffic.\n\n## Setup\nPlace the challenge files into the `listen` folder in the Naumachia challenges folder.  \nAdd the challenge to the `config.yml` file:\n```\nchallenges:\n    # [required] An indiviual challenge config. The key is the challenge name\n    # This should be a valid unix filename and preferably short\n    listen:\n        # [default: 1194] The exposed external port for this challenges OpenVPN server\n        port: 2000\n        # [required] The compose files to which define this challenge\n        # Paths should be relative to the challenges directory\n        files:\n            - listen/docker-compose.yml\n```\n\n## Solution\n1. VPN into the environment\n2. Set the `tap0` interface to up (`ip link set tap0 up`)\n3. Listen on `tap0` using either wireshark or `tcpdump -i tap0 -A`\n4. Wait until the flag appears\n",
    "actor\\actor.py": "from socket import socket, timeout, AF_INET, SOCK_DGRAM, SO_BROADCAST, SOL_SOCKET\nfrom time import sleep, time\nfrom random import random\nimport os\nimport sys\n\nUDP_PORT = 5005 \nRESTART_DELAY = 15\n\nprint(\"UDP port:\", UDP_PORT)\nsys.stdout.flush()\n\ns = socket(AF_INET, SOCK_DGRAM)\ns.bind(('', UDP_PORT))\ns.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)\n\ndef broadcast(msg):\n    s.sendto(msg.encode('utf-8'), ('172.30.0.15', UDP_PORT))\n    print(msg)\n    sys.stdout.flush()\n\n\nwhile True:\n    sleep(RESTART_DELAY)\n    with open('script.txt', 'r') as script:\n        for line in script:\n            sleep(1)\n            broadcast(line)\n",
    "actor\\Dockerfile": "FROM python:3.5-alpine\nCOPY ./script.txt ./script.txt\nCOPY ./actor.py ./actor.py\nCMD [\"python\", \"./actor.py\"]\n",
    "actor\\script.txt": "\u201cO Deep Thought computer,\" he said, \"the task we have designed you to perform is this. We want you to tell us....\" he paused, \"The Answer.\"\n\"The Answer?\" said Deep Thought. \"The Answer to what?\"\n\"Life!\" urged Fook.\n\"The Universe!\" said Lunkwill.\n\"Everything!\" they said in chorus.\nDeep Thought paused for a moment's reflection.\n\"Tricky,\" he said finally.\n\"But can you do it?\"\nAgain, a significant pause.\n\"Yes,\" said Deep Thought, \"I can do it.\"\n\"There is an answer?\" said Fook with breathless excitement.\n\"Yes,\" said Deep Thought. \"Life, the Universe, and Everything. There is an answer. But, I'll have to think about it.\"\n...\nFook glanced impatiently at his watch.\n\u201cHow long?\u201d he said.\n\u201cSeven and a half million years,\u201d said Deep Thought.\nLunkwill and Fook blinked at each other.\n\u201cSeven and a half million years...!\u201d they cried in chorus.\n\u201cYes,\u201d declaimed Deep Thought, \u201cI said I\u2019d have to think about it, didn\u2019t I?\"\n\n[Seven and a half million years later.... Fook and Lunkwill are long gone, but their descendents continue what they started]\n\n\"We are the ones who will hear,\" said Phouchg, \"the answer to the great question of Life....!\"\n\"The Universe...!\" said Loonquawl.\n\"And Everything...!\"\n\"Shhh,\" said Loonquawl with a slight gesture. \"I think Deep Thought is preparing to speak!\"\nThere was a moment's expectant pause while panels slowly came to life on the front of the console. Lights flashed on and off experimentally and settled down into a businesslike pattern. A soft low hum came from the communication channel.\n\n\"Good Morning,\" said Deep Thought at last.\n\"Er..good morning, O Deep Thought\" said Loonquawl nervously, \"do you have...er, that is...\"\n\"An Answer for you?\" interrupted Deep Thought majestically. \"Yes, I have.\"\nThe two men shivered with expectancy. Their waiting had not been in vain.\n\"There really is one?\" breathed Phouchg.\n\"There really is one,\" confirmed Deep Thought.\n\"To Everything? To the great Question of Life, the Universe and everything?\"\n\"Yes.\"\nBoth of the men had been trained for this moment, their lives had been a preparation for it, they had been selected at birth as those who would witness the answer, but even so they found themselves gasping and squirming like excited children.\n\"And you're ready to give it to us?\" urged Loonsuawl.\n\"I am.\"\n\"Now?\"\n\"Now,\" said Deep Thought.\nThey both licked their dry lips.\n\"Though I don't think,\" added Deep Thought. \"that you're going to like it.\"\n\"Doesn't matter!\" said Phouchg. \"We must know it! Now!\"\n\"Now?\" inquired Deep Thought.\n\"Yes! Now...\"\n\"All right,\" said the computer, and settled into silence again. The two men fidgeted. The tension was unbearable.\n\"You're really not going to like it,\" observed Deep Thought.\n\"Tell us!\"\n\"All right,\" said Deep Thought. \"The Answer to the Great Question...\"\n\"Yes..!\"\n\"Of Life, the Universe and Everything...\" said Deep Thought.\n\"Yes...!\"\n\"Is...\" said Deep Thought, and paused.\n\"Yes...!\"\n\"Is...\"\n\"Yes...!!!...?\"\n\"gigem{f0rty_tw0_c9d950b61ea83}\" said Deep Thought, with infinite majesty and calm.\u201d \n",
    "category": "NetworkPentest"
}