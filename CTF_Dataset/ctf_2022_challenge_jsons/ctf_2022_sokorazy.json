{
    ".gitignore": "/target\n",
    "Cargo.lock": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4361135be9122e0870de935d7c439aef945b9f9ddd4199a553b5270b49c82a27\"\n\n[[package]]\nname = \"atomic-polyfill\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d862f14e042f75b95236d4ef1bb3d5c170964082d1e1e9c3ce689a2cbee217c\"\ndependencies = [\n \"critical-section\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"bare-metal\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5deb64efa5bd81e31fcd1938615a6d98c82eafcbcd787162b6f63b91d6bac5b3\"\ndependencies = [\n \"rustc_version\",\n]\n\n[[package]]\nname = \"bare-metal\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8fe8f5a8a398345e52358e18ff07cc17a568fbca5c6f73873d3a62056309603\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd\"\n\n[[package]]\nname = \"bit_field\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcb6dd1c2376d2e096796e234a70e17e94cc2d5d54ff8ce42b28cef1d0d359a4\"\n\n[[package]]\nname = \"bitfield\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46afbd2983a5d5a7bd740ccb198caf5b82f45c40c09c0eed36052d91cb92e719\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4a45a46ab1f2412e53d3a0ade76ffad2025804294569aae387231a0cd6e0899\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.73\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"194a7a9e6de53fa55116934067c844d9d749312f75c6f6d0980e8c252f8c2146\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5827cebf4670468b8772dd191856768aedcb1b0278a04f989f7766351917b9dc\"\n\n[[package]]\nname = \"cortex-m\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37ff967e867ca14eba0c34ac25cd71ea98c678e741e3915d923999bb2fe7c826\"\ndependencies = [\n \"bare-metal 0.2.5\",\n \"bitfield\",\n \"embedded-hal\",\n \"volatile-register\",\n]\n\n[[package]]\nname = \"critical-section\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01e191a5a6f6edad9b679777ef6b6c0f2bdd4a333f2ecb8f61c3e28109a03d70\"\ndependencies = [\n \"bare-metal 1.0.0\",\n \"cfg-if\",\n \"cortex-m\",\n \"riscv\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aaa7bd5fb665c6864b5f963dd9097905c54125909c7aa94c9e18507cdbe6c53\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6455c0ca19f0d2fbf751b908d5c55c1f5cbc65e03c4225427254b46890bdde1e\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1145cf131a2c6ba0615079ab6a638f7e1973ac9c2634fcbeaaad6114246efe8c\"\ndependencies = [\n \"autocfg\",\n \"cfg-if\",\n \"crossbeam-utils\",\n \"lazy_static\",\n \"memoffset\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bf124c720b7686e3c2663cf54062ab0f68a88af2fb6a030e87e30bf721fcb38\"\ndependencies = [\n \"cfg-if\",\n \"lazy_static\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"embedded-hal\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35949884794ad573cf46071e41c9b60efb0cb311e3ca01f7af807af1debc66ff\"\ndependencies = [\n \"nb 0.1.3\",\n \"void\",\n]\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7896dc8abb250ffdda33912550faa54c88ec8b998dec0b2c55ab224921ce11df\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3fcf0cee53519c866c09b5de1f6c56ff9d647101f81c1964fa632e148896cdf\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5fc25a87fa4fd2094bffb06925852034d90a17f0d1e05197d4956d3555752191\"\ndependencies = [\n \"matches\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3083ce4b914124575708913bca19bfe887522d6e2e6d0952943f5eac4a74010\"\ndependencies = [\n \"futures-core\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c09fd04b7e4073ac7156a9539b57a484a8ea920f79c7c675d05d289ab6110d3\"\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21163e139fa306126e6eedaf49ecdb4588f939600f0b1e770f4205ee4b7fa868\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c66a976bf5909d801bbef33416c41372779507e7a6b3a5e25e4749c58f776a\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8b7abd5d659d9b90c8cba917f6ec750a74e2dc23902ef9cd4cc8c8b22e6036a\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"pin-project-lite\",\n \"pin-utils\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d39cd93900197114fa1fcb7ae84ca742095eed9442088988ae74fa744e930e77\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi 0.10.2+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"h2\"\nversion = \"0.3.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62eeb471aa3e3c9197aa4bfeabfe02982f6dc96f750486c0bb0009ac58b26d2b\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"futures-core\",\n \"futures-sink\",\n \"futures-util\",\n \"http\",\n \"indexmap\",\n \"slab\",\n \"tokio\",\n \"tokio-util\",\n \"tracing\",\n]\n\n[[package]]\nname = \"hash32\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0c35f58762feb77d74ebe43bdbc3210f09be9fe6742234d573bacc26ed92b67\"\ndependencies = [\n \"byteorder\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e\"\n\n[[package]]\nname = \"heapless\"\nversion = \"0.7.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d076121838e03f862871315477528debffdb7462fb229216ecef91b1a3eb31eb\"\ndependencies = [\n \"atomic-polyfill\",\n \"hash32\",\n \"spin\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"http\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31f4c6746584866f0feabcc69893c5b51beef3831656a968ed7ae254cdc4fd03\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ff4f84919677303da5f147645dbea6b1881f368d03ac84e1dc09031ebd7b2c6\"\ndependencies = [\n \"bytes\",\n \"http\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"httparse\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9100414882e15fb7feccb4897e5f0ff0ff1ca7d1a86a23208ada4d7a18e6c6c4\"\n\n[[package]]\nname = \"httpdate\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4a1e36c821dbe04574f602848a19f742f4fb3c98d40449f11bcad18d6b17421\"\n\n[[package]]\nname = \"hyper\"\nversion = \"0.14.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b26ae0a80afebe130861d90abf98e3814a4f28a4c6ffeb5ab8ebb2be311e0ef2\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"httparse\",\n \"httpdate\",\n \"itoa\",\n \"pin-project-lite\",\n \"socket2\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n \"want\",\n]\n\n[[package]]\nname = \"hyper-tls\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6183ddfa99b85da61a140bea0efc93fdf56ceaa041b37d553518030827f9905\"\ndependencies = [\n \"bytes\",\n \"hyper\",\n \"native-tls\",\n \"tokio\",\n \"tokio-native-tls\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"418a0a6fab821475f634efe3ccc45c013f742efe03d853e8d3355d5cb850ecf8\"\ndependencies = [\n \"matches\",\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282a6247722caba404c065016bbfa522806e51714c34f5dfc3e4a3a46fcb4223\"\ndependencies = [\n \"autocfg\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ipnet\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35e70ee094dc02fd9c13fdad4940090f22dbd6ac7c9e7094a46cf0232a50bc7c\"\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a38fc24e30fd564ce974c02bf1d337caddff65be6cc4735a1f7eab22a7440f04\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.121\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"efaa7b300f3b5fe8eb6bf21ce3895e1751d9665086af2d64b42f19701015ff4f\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88943dd7ef4a2e5a4bfa2753aaab3013e34ce2533d1996fb18ef591e315e2b3b\"\ndependencies = [\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6389c490849ff5bc16be905ae24bc913a9c8892e19b2341dbc175e14c341c2b8\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"matches\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3e378b66a060d48947b590737b30a1be76706c8dd7b8ba0f2fe3989c68a853f\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a\"\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"mime\"\nversion = \"0.3.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a60c7ce501c71e03a9c9c0d35b861413ae925bd979cc7a4e30d060069aaac8d\"\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"52da4364ffb0e4fe33a9841a98a3f3014fb964045ce4f7a45a398243c8d6b0c9\"\ndependencies = [\n \"libc\",\n \"log\",\n \"miow\",\n \"ntapi\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n \"winapi\",\n]\n\n[[package]]\nname = \"miow\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9f1c5b025cda876f66ef43a113f91ebc9f4ccef34843000e0adf6ebbab84e21\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"native-tls\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48ba9f7719b5a0f42f338907614285fb5fd70e53858141f69898a1fb7203b24d\"\ndependencies = [\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"openssl\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"schannel\",\n \"security-framework\",\n \"security-framework-sys\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"nb\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"801d31da0513b6ec5214e9bf433a77966320625a37860f910be265be6e18d06f\"\ndependencies = [\n \"nb 1.0.0\",\n]\n\n[[package]]\nname = \"nb\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"546c37ac5d9e56f55e73b677106873d9d9f5190605e41a856503623648488cae\"\n\n[[package]]\nname = \"ntapi\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c28774a7fd2fbb4f0babd8237ce554b73af68021b5f695a3cebd6c59bac0980f\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19e64526ebdee182341572e50e9ad03965aa510cd94427a4549448f285e957a1\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87f3e037eac156d1775da914196f0f37741a274155e34a0b7e427c35d2a2ecb9\"\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c7ae222234c30df141154f159066c5093ff73b63204dcda7121eb082fc56a95\"\ndependencies = [\n \"bitflags\",\n \"cfg-if\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.72\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e46109c383602735fa0a2e48dd2b7c892b048e1bf69e5c3b1d804b7d9c203cb\"\ndependencies = [\n \"autocfg\",\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87f5ec2493a61ac0506c0f4199f99070cbe83857b0337006a30f3e6719b8ef58\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28141e0cc4143da2443301914478dc976a61ffdb3f043058310c70df2fed8954\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e280fbe77cc62c91527259e9442153f4688736748d24660126286329742b4c6c\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58893f751c9b0412871a09abd62ecd2a00298c6c83befa223ef98c52aef40cbe\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7342d5883fbccae1cc37a2353b09c87c9b0f3afd73f5fb9bba687a1f733b029\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"632d02bff7f874a36f33ea8bb416cd484b90cc66c1194b1a1110d067a7013f58\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c06aca804d41dbc8ba42dfd964f0d01334eceb64314b9ecf7c5fad5188a06d90\"\ndependencies = [\n \"autocfg\",\n \"crossbeam-deque\",\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d78120e2c850279833f1dd3582f730c4ab53ed95aeaaaa862a2a5c71b1656d8e\"\ndependencies = [\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n \"lazy_static\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ae183fc1b06c149f0c1793e1eb447c8b04bfe46d48e9e48bfb8d2d7ed64ecf0\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a11647b6b25ff05a515cb92c365cec08801e83423a235b51e231e1808747286\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n\n[[package]]\nname = \"remove_dir_all\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"reqwest\"\nversion = \"0.11.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46a1f7aa4f35e5e8b4160449f51afc758f0ce6454315a9fa7d0d113e958c41eb\"\ndependencies = [\n \"base64\",\n \"bytes\",\n \"encoding_rs\",\n \"futures-core\",\n \"futures-util\",\n \"h2\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"hyper-tls\",\n \"ipnet\",\n \"js-sys\",\n \"lazy_static\",\n \"log\",\n \"mime\",\n \"native-tls\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"tokio\",\n \"tokio-native-tls\",\n \"url\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n \"winreg\",\n]\n\n[[package]]\nname = \"riscv\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6907ccdd7a31012b70faf2af85cd9e5ba97657cc3987c4f13f8e4d2c2a088aba\"\ndependencies = [\n \"bare-metal 1.0.0\",\n \"bit_field\",\n \"riscv-target\",\n]\n\n[[package]]\nname = \"riscv-target\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88aa938cda42a0cf62a20cfe8d139ff1af20c2e681212b5b34adb5a58333f222\"\ndependencies = [\n \"lazy_static\",\n \"regex\",\n]\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f\"\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f05ba609c234e60bee0d547fe94a4c7e9da733d1c962cf6e59efa4cd9c8bc75\"\ndependencies = [\n \"lazy_static\",\n \"winapi\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dc14f172faf8a0194a3aded622712b0de276821addc574fa54fc0a1167e10dc\"\ndependencies = [\n \"bitflags\",\n \"core-foundation\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0160a13a177a45bfb43ce71c01580998474f556ad854dcbca936dd2841a5c556\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\ndependencies = [\n \"semver-parser\",\n]\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.136\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce31e24b01e1e524df96f1c2fdd054405f8d7376249a5110886fb4b658484789\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde-xml-rs\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65162e9059be2f6a3421ebbb4fef3e74b7d9e7c60c50a0e292c6239f19f1edfa\"\ndependencies = [\n \"log\",\n \"serde\",\n \"thiserror\",\n \"xml-rs\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.136\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08597e7152fcd306f41838ed3e37be9eaeed2b61c42e2117266a554fab4662f9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e8d9fa5c3b304765ce1fd9c4c8a3de2c8db365a5b91be52f186efc675681d95\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_urlencoded\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd\"\ndependencies = [\n \"form_urlencoded\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51e73328dc4ac0c7ccbda3a494dfa03df1de2f46018127f60c693f2648455b0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9def91fd1e018fe007022791f865d0ccc9b3a0d5001e01aabb8b40e46000afb5\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2dd574626839106c320a323308629dcb1acfc96e32a8cba364ddc61ac23ee83\"\n\n[[package]]\nname = \"socket2\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"66d72b759436ae32898a2af0a14218dbf55efde3feeb170eb623637db85ee1e0\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"sokoban\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"625cfab63e0e982deae7d2a26c8daffe776bd8feead715c5f4b6cb3369b2575c\"\ndependencies = [\n \"thiserror\",\n]\n\n[[package]]\nname = \"sokorazy\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"heapless\",\n \"rand\",\n \"rand_chacha\",\n \"rayon\",\n \"reqwest\",\n \"serde\",\n \"serde-xml-rs\",\n \"sokoban\",\n \"tokio\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"511254be0c5bcf062b019a6c89c01a664aa359ded62f78aa72c6fc137c0590e5\"\ndependencies = [\n \"lock_api\",\n]\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.89\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea297be220d52398dcc07ce15a209fce436d361735ac1db700cab3b6cdfb9f54\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"libc\",\n \"redox_syscall\",\n \"remove_dir_all\",\n \"winapi\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"854babe52e4df1653706b98fcfc05843010039b406875930a70e4d9644e5c417\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa32fd3f627f367fe16f893e2597ae3c05020f8bba2666a4e6ea73d377e5714b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c1c1d5a42b6245520c249549ec267180beaffcc0615401ac8e31853d4b6d8d2\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c\"\n\n[[package]]\nname = \"tokio\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2af73ac49756f3f7c01172e34a23e5d0216f6c32333757c2c61feb2bbff5a5ee\"\ndependencies = [\n \"bytes\",\n \"libc\",\n \"memchr\",\n \"mio\",\n \"num_cpus\",\n \"once_cell\",\n \"parking_lot\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2\",\n \"tokio-macros\",\n \"winapi\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b557f72f448c511a979e2564e55d74e6c4432fc96ff4f6241bc6bded342643b7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"tokio-native-tls\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7d995660bd2b7f8c1568414c1126076c13fbb725c40112dc0120b78eb9b717b\"\ndependencies = [\n \"native-tls\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tokio-util\"\nversion = \"0.6.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e99e1983e5d376cd8eb4b66604d2e99e79f5bd988c3055891dcd8c9e2604cc0\"\ndependencies = [\n \"bytes\",\n \"futures-core\",\n \"futures-sink\",\n \"log\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"360dfd1d6d30e05fda32ace2c8c70e9c0a9da713275777f5a4dbb8a1893930c6\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a1bdf54a7c28a2bbf701e1d2233f6c77f473486b94bee4f9678da5a148dca7f\"\ndependencies = [\n \"cfg-if\",\n \"pin-project-lite\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa31669fa42c09c34d94d8165dd2012e8ff3c66aca50f3bb226b68f216f2706c\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59547bce71d9c38b83d9c0e92b6066c4253371f15005def0c30d9657f50c7642\"\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a01404663e3db436ed2746d9fefef640d868edae3cceb81c3b8d5732fda678f\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d54590932941a9e9266f0832deed84ebe1bf2e4c9e4a3554d393d18f5e854bf9\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ccb82d61f80a663efe1f787a51b16b5a51e3314d6ac365b08639f52387b33f3\"\n\n[[package]]\nname = \"url\"\nversion = \"2.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a507c383b2d33b5fc35d1861e77e6b383d158b2da5e14fe51b83dfedf6fd578c\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"matches\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"vcell\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77439c1b53d2303b20d9459b1ade71a83c716e3f9c34f3228c00e6f185d6c002\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"void\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n\n[[package]]\nname = \"volatile-register\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ee8f19f9d74293faf70901bc20ad067dc1ad390d2cbf1e3f75f721ffee908b6\"\ndependencies = [\n \"vcell\",\n]\n\n[[package]]\nname = \"want\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ce8a968cb1cd110d136ff8b819a556d6fb6d919363c61534f6860c7eb172ba0\"\ndependencies = [\n \"log\",\n \"try-lock\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.10.2+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25f1af7423d8588a3d840681122e72e6a24ddbcb3f0ec385cac0d12d24256c06\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b21c0df030f5a177f3cba22e9bc4322695ec43e7257d865302900290bcdedca\"\ndependencies = [\n \"bumpalo\",\n \"lazy_static\",\n \"log\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2eb6ec270a31b1d3c7e266b999739109abce8b6c87e4b31fcfcd788b65267395\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f4203d69e40a52ee523b2529a773d5ffc1dc0071801c87b3d270b471b80ed01\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa8a30d46208db204854cadbb5d4baf5fcf8071ba5bf48190c3e59937962ebc\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.79\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d958d035c4438e28c70e4321a2911302f10135ce78a9c7834c0cab4123d06a2\"\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.56\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c060b319f29dd25724f09a2ba1418f142f539b2be99fbf4d2d5a8f7330afb8eb\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.32.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3df6e476185f92a12c072be4a189a0210dcdcf512a1891d6dff9edb874deadc6\"\ndependencies = [\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.32.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8e92753b1c443191654ec532f14c199742964a061be25d77d7a96f09db20bf5\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.32.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a711c68811799e017b6038e0922cb27a5e2f43a2ddb609fe0b6f3eeda9de615\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.32.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"146c11bb1a02615db74680b32a68e2d61f553cc24c4eb5b4ca10311740e44172\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.32.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c912b12f7454c6620635bbff3450962753834be2a594819bd5e945af18ec64bc\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.32.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"504a2476202769977a040c6364301a3f65d0cc9e3fb08600b2bda150a0488316\"\n\n[[package]]\nname = \"winreg\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80d0f4e272c85def139476380b12f9ac60926689dd2e01d4923222f40580869d\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"xml-rs\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2d7d3948613f75c98fd9328cfdcc45acc4d360655289d0a7d4ec931392200a3\"\n",
    "Cargo.toml": "[package]\nname = \"sokorazy\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nanyhow = \"1\"\nheapless = \"0.7\"\nrand = \"0.8\"\nrand_chacha = \"0.3\"\nrayon = \"1.5.1\"\nreqwest = \"0.11\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde-xml-rs = \"0.5.1\"\nsokoban = \"0.1.2\"\ntokio = { version = \"1.17\", features = [\"full\"] }\n\n[[bin]]\nname = \"sokorazy\"\npath = \"src/main.rs\"\n\n[[bin]]\nname = \"solver\"\npath = \"src/solver.rs\"\n",
    "Dockerfile": "FROM ekidd/rust-musl-builder as build\n\nADD Cargo.toml Cargo.toml\nADD Cargo.lock Cargo.lock\nADD src/ src/\nRUN cargo build --release --bin sokorazy\n\nFROM scratch\n\nCOPY --from=build /home/rust/src/target/x86_64-unknown-linux-musl/release/sokorazy /sokorazy\n\nEXPOSE 7304\n\nENTRYPOINT [\"/sokorazy\"]\n",
    "README.md": "# Sokorazy\n\n## Description\nI know, I know, this is a CTF. It's supposed to be about hacking! But I have something a little different for you.\n\n[Sokoban](https://en.wikipedia.org/wiki/Sokoban) is a classic example of a puzzle game turned into computer science problem.\n\nI need you to solve 25 levels in less than 10 minutes. Can you do it?\n\nThank you to Linus \u00c5kesson for the use of his level generation algorithm!\n\n## Solution\nSee `src/solver.rs`.\n",
    "src\\main.rs": "use anyhow::Error;\nuse rand::{RngCore, SeedableRng};\nuse rand_chacha::ChaChaRng;\nuse serde::{Deserialize, Serialize};\nuse serde_xml_rs::from_str;\nuse sokoban::{Block, Direction, State as SokobanState};\nuse std::net::SocketAddr;\nuse std::time::SystemTime;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\nuse tokio::net::{TcpListener, TcpStream};\nuse tokio::sync::{mpsc, oneshot};\n\n#[derive(Debug, Deserialize, Serialize, PartialEq)]\nstruct Response {\n    deal: String,\n}\n\nimpl From<Response> for SokobanState {\n    fn from(resp: Response) -> Self {\n        let dim_r = 12;\n        let dim_c = 18;\n        let container = resp\n            .deal\n            .chars()\n            .map(|c| match c {\n                'w' => Block::Wall,\n                'e' | 'E' | 'm' | 'M' => Block::Floor,\n                'o' | 'O' => Block::Crate,\n                _ => unreachable!(\"Illegal value in response.\"),\n            })\n            .collect::<Vec<_>>();\n        let player = resp\n            .deal\n            .char_indices()\n            .find(|(_, c)| *c == 'm' || *c == 'M')\n            .expect(\"Couldn't find the player\")\n            .0;\n\n        let player = (player / dim_c, player % dim_c);\n        let targets = resp\n            .deal\n            .char_indices()\n            .filter_map(|(i, c)| c.is_ascii_uppercase().then(|| i))\n            .map(|i| (i / dim_c, i % dim_c))\n            .collect::<Vec<_>>();\n        SokobanState::new(container, player, targets, dim_r, dim_c)\n            .expect(\"Expected a valid state from remote\")\n    }\n}\n\nasync fn handle_user_inner(\n    conn: &mut TcpStream,\n    addr: SocketAddr,\n    seed: u32,\n    tx: mpsc::Sender<(u32, usize, oneshot::Sender<anyhow::Result<Response>>)>,\n) -> anyhow::Result<()> {\n    conn.write_all(\n        br#\"Welcome to the sokoban guantlet!\nYou must solve 25 sokoban puzzles in 10 minutes without error to get the flag.\nPuzzles take some time to generate, so please be patient between challenges.\n\n\"#,\n    )\n    .await?;\n    conn.flush().await?;\n    let start_time = SystemTime::now();\n    for level in 0..25 {\n        println!(\"{} advanced to level {}!\", addr, level);\n        conn.write_all(b\"Generating next puzzle...\\n\").await?;\n        conn.flush().await?;\n        let (req_tx, req_rx) = oneshot::channel();\n        tx.send((seed, level, req_tx)).await?;\n        let resp = match req_rx.await? {\n            Ok(r) => r,\n            Err(e) => {\n                eprintln!(\"{:?}\", e);\n                return Err(Error::msg(\n                    \"Couldn't generate the sokoban puzzle; contact an administrator.\",\n                ))\n            }\n        };\n        conn.write_all(b\"Here's your next challenge:\").await?;\n        conn.flush().await?;\n        let mut state = SokobanState::from(resp);\n        conn.write_all(format!(\"{:?}\", state).as_bytes()).await?;\n        conn.flush().await?;\n\n        loop {\n            let c = conn.read_u8().await?;\n            let dir = match c {\n                b'^' => Direction::Up,\n                b'v' => Direction::Down,\n                b'>' => Direction::Right,\n                b'<' => Direction::Left,\n                b'\\n' => break,\n                c => return Err(Error::msg(format!(\"Invalid move character: {}\", c))),\n            };\n            state = state.move_player(dir)?;\n        }\n\n        if state.in_solution_state() {\n            conn.write_all(b\"Correct!\\n\").await?;\n        } else {\n            return Err(Error::msg(\"Puzzle was not in solution state.\"));\n        }\n    }\n\n    if start_time.elapsed()?.as_secs() < 600 {\n        conn.write_all(b\"gigem{dm_addison_if_you_are_interested_in_more_challenges_like_this}\\n\").await?;\n        conn.flush().await?;\n    }\n\n    Ok(())\n}\n\nasync fn handle_user(\n    mut conn: TcpStream,\n    addr: SocketAddr,\n    seed: u32,\n    tx: mpsc::Sender<(u32, usize, oneshot::Sender<anyhow::Result<Response>>)>,\n) {\n    if let Err(e) = handle_user_inner(&mut conn, addr, seed, tx).await {\n        let _ = conn\n            .write_all(format!(\"Encountered error while processing: {}\\n\", e).as_bytes())\n            .await;\n        println!(\n            \"Encountered error while processing from address {}: {}\",\n            addr, e\n        );\n    }\n}\n\nasync fn do_sokoban_request_inner(seed: u32, level: usize) -> anyhow::Result<Response> {\n    let resp = reqwest::get(format!(\n        \"http://www.linusakesson.net/games/autosokoban/board.php?v=1&seed={}&level={}\",\n        seed, level\n    ))\n    .await?\n    .text()\n    .await?;\n\n    let resp: Response = from_str(&resp)?;\n\n    Ok(resp)\n}\n\nasync fn do_sokoban_request(\n    seed: u32,\n    level: usize,\n    tx: oneshot::Sender<anyhow::Result<Response>>,\n) {\n    tx.send(do_sokoban_request_inner(seed, level).await)\n        .expect(\"Couldn't send sokoban result\");\n}\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    let mut rng = ChaChaRng::from_entropy();\n    let server = TcpListener::bind(\"0.0.0.0:7304\").await?;\n\n    // only one sokoban puzzle generated at a time globally\n    let (tx, mut rx) = mpsc::channel(1);\n    tokio::spawn(async move {\n        while let Some((seed, level, tx)) = rx.recv().await {\n            do_sokoban_request(seed, level, tx).await;\n        }\n    });\n\n    while let Ok((conn, addr)) = server.accept().await {\n        let seed = rng.next_u32();\n        println!(\"Starting user session for {} with seed {}\", addr, seed);\n        let tx = tx.clone();\n\n        tokio::spawn(async move {\n            handle_user(conn, addr, seed, tx).await;\n        });\n    }\n\n    Ok(())\n}\n",
    "src\\solver.rs": "use std::collections::{HashMap, HashSet};\nuse std::hash::{Hash, Hasher};\nuse std::iter::repeat;\nuse std::sync::{Arc, RwLock};\nuse std::sync::atomic::{AtomicBool, Ordering};\nuse std::thread::available_parallelism;\nuse heapless::FnvIndexSet;\nuse rand::prelude::*;\nuse rayon::prelude::*;\nuse sokoban::{Block, Direction, State as SokobanState, State};\nuse tokio::io::{AsyncBufReadExt, AsyncWriteExt, BufReader, BufWriter};\nuse tokio::net::TcpStream;\n\nstruct EnrichedState {\n    state: State,\n    moves: Vec<Direction>,\n    positions: Vec<(usize, usize)>,\n}\n\nimpl Hash for EnrichedState {\n    fn hash<H: Hasher>(&self, state: &mut H) {\n        to_watched_state(&self.state).hash(state);\n    }\n}\n\nimpl PartialEq<Self> for EnrichedState {\n    fn eq(&self, other: &Self) -> bool {\n        to_watched_state(&self.state).eq(&to_watched_state(&other.state))\n    }\n}\n\nimpl Eq for EnrichedState {}\n\nfn to_watched_state(state: &State) -> (heapless::Vec<(usize, usize), 8>, (usize, usize)) {\n    let all_crates = (0..12).flat_map(|r| {\n        repeat(r).zip(0..18).filter(|(r, c)| state[(*r, *c)] == Block::Crate)\n    }).collect::<heapless::Vec<_, 8>>();\n    (all_crates, state.player())\n}\n\nfn is_deadended(state: &State) -> bool {\n    let mut crates = Vec::new();\n    for row in 0..12 {\n        for col in 0..18 {\n            if state[(row, col)] == Block::Crate && !state.targets().contains(&(row, col)) {\n                // we only care about crates which aren't in the right place\n                crates.push((row, col));\n            }\n        }\n    }\n    for item in crates {\n        let (row, col) = item;\n        for (pos1, pos2) in [\n            ((row, col + 1), (row + 1, col)),\n            ((row, col + 1), (row - 1, col)),\n            ((row, col - 1), (row + 1, col)),\n            ((row, col - 1), (row - 1, col)),\n        ] {\n            if state[pos1] == Block::Wall && state[pos2] == Block::Wall {\n                // state is deadended; there is no way to move this box\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn l0_dist(pos1: (usize, usize), pos2: (usize, usize)) -> usize {\n    pos1.0.abs_diff(pos2.0).checked_sub(1).unwrap_or(0) + pos1.1.abs_diff(pos2.1).checked_sub(1).unwrap_or(0)\n}\n\nfn maybe_go(orig: (usize, usize), dir: Direction) -> Option<(usize, usize)> {\n    match dir {\n        Direction::Up => orig.0.checked_sub(1).map(|v| (v, orig.1)),\n        Direction::Down => orig.0.checked_add(1).map(|v| (v, orig.1)),\n        Direction::Left => orig.1.checked_sub(1).map(|v| (orig.0, v)),\n        Direction::Right => orig.1.checked_add(1).map(|v| (orig.0, v)),\n    }\n}\n\nfn solve_bfs(state: State) -> Vec<Direction> {\n    let init_watched_state = to_watched_state(&state);\n    let mut configurations = RwLock::new(HashSet::new());\n    configurations.write().unwrap().insert(init_watched_state.clone());\n    let mut seen = HashSet::new();\n    seen.insert(init_watched_state);\n    let mut enriched = HashSet::new();\n    enriched.insert(EnrichedState {\n        positions: vec![state.player()],\n        state,\n        moves: Vec::new(),\n    });\n    let moves = loop {\n        if enriched.len() == 0 {\n            unreachable!(\"Deadended.\");\n        }\n        let next = if enriched.len() > 1000 {\n            println!(\"Using threaded solver: {}\", enriched.len());\n            let mut next = HashSet::with_capacity(enriched.len() * 4);\n            for (result, newly_seen) in enriched.into_par_iter().map(|state| {\n                let mut next = HashSet::with_capacity(4);\n                let mut newly_seen = FnvIndexSet::new();\n                step_bfs(state, &mut next, &seen, &configurations, &mut newly_seen);\n                (next, newly_seen)\n            }).collect::<Vec<_>>() {\n                next.extend(result);\n                seen.extend(newly_seen.iter().cloned());\n            }\n            next\n        } else {\n            let mut next = HashSet::with_capacity(enriched.len() * 4);\n            for state in enriched {\n                let mut newly_seen = FnvIndexSet::new();\n                step_bfs(state, &mut next, &seen, &configurations, &mut newly_seen);\n                seen.extend(newly_seen.iter().cloned());\n            }\n            next\n        };\n        if let Some(state) = next.iter().find(|&state| state.state.in_solution_state()) {\n            break state.moves.clone();\n        }\n        enriched = next;\n    };\n    moves\n}\n\nfn step_bfs(state: EnrichedState, pool: &mut HashSet<EnrichedState>, seen: &HashSet<(heapless::Vec<(usize, usize), 8>, (usize, usize))>, configurations: &RwLock<HashSet<(heapless::Vec<(usize, usize), 8>, (usize, usize))>>, newly_seen: &mut FnvIndexSet<(heapless::Vec<(usize, usize), 8>, (usize, usize)), 4>) {\n    'steploop:\n    for dir in [Direction::Left, Direction::Right, Direction::Up, Direction::Down] {\n        if let Ok(next_state) = state.state.clone().move_player(dir) {\n            let watched_state = to_watched_state(&next_state);\n            if state.state[next_state.player()] == Block::Crate {\n                // we've just moved a crate; make sure we've not tried this already\n                if !configurations.write().unwrap().insert(watched_state.clone()) {\n                    return;\n                }\n            }\n            if seen.contains(&watched_state) {\n                continue 'steploop;\n            }\n            newly_seen.insert(watched_state).unwrap();\n\n            // trim deadended states\n            if is_deadended(&next_state) {\n                continue 'steploop;\n            }\n\n            let mut moves = state.moves.clone();\n            moves.push(dir);\n            let mut positions = state.positions.clone();\n            positions.push(next_state.player());\n            pool.insert(EnrichedState {\n                state: next_state,\n                moves,\n                positions,\n            });\n        }\n    }\n}\n\nfn solve_dfs<const MAX_DEPTH: usize>(state: State, should_continue: Arc<AtomicBool>) -> Option<Vec<Direction>> {\n    let init_watched_state = to_watched_state(&state);\n    let mut configurations = HashSet::new();\n    configurations.insert(init_watched_state.0.clone());\n    let mut seen = HashMap::new();\n    seen.insert(init_watched_state, 0);\n    let mut stack = heapless::Vec::<(State, heapless::Vec<Direction, 4>), MAX_DEPTH>::new();\n    let mut moves = Vec::new();\n    stack.push((state, heapless::Vec::from_slice(&[Direction::Left, Direction::Right, Direction::Up, Direction::Down]).unwrap())).unwrap();\n    let mut rng = thread_rng();\n    loop {\n        if !should_continue.load(Ordering::Relaxed) {\n            return None;\n        }\n        if stack.len() == 0 {\n            unreachable!(\"Deadended.\");\n        }\n\n        step_dfs(&mut stack, &mut seen, &mut configurations, &mut moves, &mut rng);\n\n        if stack.last().unwrap().0.in_solution_state() {\n            break;\n        }\n    };\n    should_continue.store(false, Ordering::Relaxed);\n    Some(moves)\n}\n\nfn step_dfs<const MAX_DEPTH: usize>(stack: &mut heapless::Vec<(State, heapless::Vec<Direction, 4>), MAX_DEPTH>, seen: &mut HashMap<(heapless::Vec<(usize, usize), 8>, (usize, usize)), usize>, configurations: &mut HashSet<heapless::Vec<(usize, usize), 8>>, moves: &mut Vec<Direction>, rng: &mut ThreadRng) {\n    let mut popped = false;\n    while stack.last().unwrap().1.is_empty() {\n        stack.pop();\n        moves.pop();\n        popped = true;\n    }\n    if popped {\n        // we've just removed some states; clear the seen list\n        let crates = stack.iter().map(|s| &s.0).map(to_watched_state).map(|s| s.0).collect::<HashSet<_>>();\n        seen.retain(|s, _| crates.contains(&s.0));\n    }\n    let dir = stack.last_mut().unwrap().1.pop().unwrap();\n    if let Ok(next_state) = stack.last().unwrap().0.clone().move_player(dir) {\n        let watched_state = to_watched_state(&next_state);\n        if stack.last().unwrap().0[next_state.player()] == Block::Crate {\n            // we've just moved a crate; make sure we've not tried this already\n            if !configurations.insert(watched_state.0.clone()) {\n                return;\n            }\n        }\n\n        if *seen.entry(watched_state).and_modify(|existing| if *existing > stack.len() { *existing = stack.len() }).or_insert(stack.len()) < stack.len() {\n            return;\n        }\n\n        // trim deadended\n        if is_deadended(&next_state) {\n            return;\n        }\n\n        let mut dirs = heapless::Vec::from_slice(&[Direction::Left, Direction::Right, Direction::Up, Direction::Down]).unwrap();\n        dirs.shuffle(rng);\n\n        if stack.push((next_state, dirs)).is_ok() {\n            moves.push(dir);\n        }\n    }\n}\n\n#[tokio::main]\nasync fn main() -> anyhow::Result<()> {\n    let mut client = TcpStream::connect(\"127.0.0.1:7304\").await?;\n    let (rx, tx) = client.split();\n    let mut reader = BufReader::new(rx);\n    let mut writer = BufWriter::new(tx);\n\n    {\n        let mut discard = String::new();\n        reader.read_line(&mut discard).await?;\n        reader.read_line(&mut discard).await?;\n        reader.read_line(&mut discard).await?;\n    }\n\n    for _ in 1..=25 {\n        {\n            let mut discard = String::new();\n            reader.read_line(&mut discard).await?;\n            reader.read_line(&mut discard).await?;\n            reader.read_line(&mut discard).await?;\n        }\n        let mut map = String::new();\n        for _ in 0..12 {\n            reader.read_line(&mut map).await?;\n            map.truncate(map.len() - 1);\n        }\n        let dim_r = 12;\n        let dim_c = 18;\n        let container = map\n            .chars()\n            .map(|c| match c {\n                '#' => Block::Wall,\n                '_' | '.' | 'x' | 'X' => Block::Floor,\n                'm' | 'M' => Block::Crate,\n                _ => unreachable!(\"Illegal value in response.\"),\n            })\n            .collect::<Vec<_>>();\n        let player = map\n            .char_indices()\n            .find(|(_, c)| *c == 'x' || *c == 'X')\n            .expect(\"Couldn't find the player\")\n            .0;\n\n        let player = (player / dim_c, player % dim_c);\n        let targets = map\n            .char_indices()\n            .filter_map(|(i, c)| (c.is_ascii_uppercase() || c == '.').then(|| i))\n            .map(|i| (i / dim_c, i % dim_c))\n            .collect::<Vec<_>>();\n\n        let state = SokobanState::new(container, player, targets, dim_r, dim_c)\n            .expect(\"Expected a valid state from remote\");\n        println!(\"{:?}\", state);\n\n/*\n        let cpus = available_parallelism()?.get();\n        let should_continue = Arc::new(AtomicBool::new(true));\n        let moves = (0..cpus).divvy(cpus).find_map_any(|_| {\n            solve_dfs::<1000>(state.clone(), should_continue.clone())\n        }).unwrap();\n */\n        let moves = solve_bfs(state);\n\n        println!(\"{:?}\", moves);\n\n        let rendered = moves.into_iter().map(|dir| {\n            match dir {\n                Direction::Left => b'<',\n                Direction::Right => b'>',\n                Direction::Up => b'^',\n                Direction::Down => b'v',\n            }\n        }).collect::<Vec<_>>();\n        writer.write_all(&rendered).await?;\n        writer.write_u8(b'\\n').await?;\n        writer.flush().await?;\n    }\n\n    let mut flag = String::new();\n    loop {\n        reader.read_line(&mut flag).await?;\n        if flag.contains(\"gigem\") {\n            break;\n        }\n        flag.clear();\n    }\n\n    println!(\"{}\", flag);\n\n    Ok(())\n}\n",
    "category": "misc"
}