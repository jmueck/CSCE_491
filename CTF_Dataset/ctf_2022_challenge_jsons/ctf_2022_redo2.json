{
    "README.md": "# RE-do 2\n\n## Description\nHonestly this is just a plain an simple ASM challenge.\nBest of luck.\n\n## Hints\n1. There is a lot of the same pattern in the ASM, take advantage of it\n2. Godbolt is a pretty good tool\n3. Maybe you don't necessarily need to reverse the entirety of the program, just enough to understand the data\n\n## Solution\nangr failed me :cry: \n\nAs above, I compiled the asm to a binary then slapped that bad boy in Ghidra. Extracted the following constraints:\n\n```py\nx[1] = ord('8')\nx[0] = ord('6')\nx[3] = ord('4')\nx[5] = ord('J')\nx[4] = ord('<')\nx[6] = ord('0')\nx[7] = ord('0')\nx[8] = ord('0')\nx[10] = ord('1')\nx[11] = ord('1')\nx[12] = ord('1')\nx[13] = ord('1')\nx[15] = ord('2')\nx[16] = ord('2')\nx[17] = ord('2')\nx[18] = ord('2')\nx[19] = ord('2')\nx[9] = ord('.')\nx[0x1b] = 1\nx[0x1a] = 2\nx[0x17] = 3\nx[0x18] = 4\nx[0x19] = 0\nx[0xe] = x[9]\nx[0x14] = x[9]\nx[0x16] = x[9]\nx[0x15] = x[0xf] + 1\nx[28] = x[5] + 2\nx[2] = x[0]\n```\n\nThen put it in python with:\n\n```py\n>>>> x = [0]*0x1d\n>>>> ... # copied from above\n>>>> \"\".join([chr(i + 0x31) for i in x])\n'gigem{aaa_bbbb_ccccc_d_45132}'\n```\n\nFlag: `gigem{aaa_bbbb_ccccc_d_45132}`\n",
    "redo2.S": "main:\n        lea     ecx, [esp+4]\n        and     esp, -16\n        push    DWORD PTR [ecx-4]\n        push    ebp\n        mov     ebp, esp\n        push    ebx\n        push    ecx\n        sub     esp, 32\n        mov     ebx, ecx\n        cmp     DWORD PTR [ebx], 2\n        je      .L2\n        mov     eax, 1\n        jmp     .L3\n.L2:\n        mov     DWORD PTR [ebp-12], 0\n        jmp     .L4\n.L6:\n        mov     eax, DWORD PTR [ebx+4]\n        add     eax, 4\n        mov     edx, DWORD PTR [eax]\n        mov     eax, DWORD PTR [ebp-12]\n        add     eax, edx\n        movzx   eax, BYTE PTR [eax]\n        test    al, al\n        jne     .L5\n        mov     eax, 1\n        jmp     .L3\n.L5:\n        add     DWORD PTR [ebp-12], 1\n.L4:\n        cmp     DWORD PTR [ebp-12], 28\n        jle     .L6\n        sub     esp, 12\n        push    29\n        call    malloc\n        add     esp, 16\n        mov     DWORD PTR [ebp-32], eax\n        mov     DWORD PTR [ebp-16], 0\n        jmp     .L7\n.L8:\n        mov     eax, DWORD PTR [ebx+4]\n        add     eax, 4\n        mov     edx, DWORD PTR [eax]\n        mov     eax, DWORD PTR [ebp-16]\n        add     eax, edx\n        mov     ecx, DWORD PTR [ebp-16]\n        mov     edx, DWORD PTR [ebp-32]\n        add     edx, ecx\n        movzx   eax, BYTE PTR [eax]\n        mov     BYTE PTR [edx], al\n        mov     edx, DWORD PTR [ebp-16]\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, edx\n        movzx   eax, BYTE PTR [eax]\n        lea     ecx, [eax-49]\n        mov     edx, DWORD PTR [ebp-16]\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, edx\n        mov     edx, ecx\n        mov     BYTE PTR [eax], dl\n        add     DWORD PTR [ebp-16], 1\n.L7:\n        cmp     DWORD PTR [ebp-16], 28\n        jle     .L8\n        mov     eax, DWORD PTR [ebp-32]\n        movzx   edx, BYTE PTR [eax]\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 2\n        movzx   eax, BYTE PTR [eax]\n        cmp     dl, al\n        je      .L9\n        mov     eax, 1\n        jmp     .L3\n.L9:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 1\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 56\n        je      .L10\n        mov     eax, 1\n        jmp     .L3\n.L10:\n        mov     eax, DWORD PTR [ebp-32]\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 54\n        je      .L11\n        mov     eax, 1\n        jmp     .L3\n.L11:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 3\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 52\n        je      .L12\n        mov     eax, 1\n        jmp     .L3\n.L12:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 28\n        movzx   eax, BYTE PTR [eax]\n        movsx   eax, al\n        mov     edx, DWORD PTR [ebp-32]\n        add     edx, 5\n        movzx   edx, BYTE PTR [edx]\n        movsx   edx, dl\n        add     edx, 2\n        cmp     eax, edx\n        je      .L13\n        mov     eax, 1\n        jmp     .L3\n.L13:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 5\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 74\n        je      .L14\n        mov     eax, 1\n        jmp     .L3\n.L14:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 4\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 60\n        je      .L15\n        mov     eax, 1\n        jmp     .L3\n.L15:\n        mov     DWORD PTR [ebp-20], 0\n        jmp     .L16\n.L18:\n        mov     eax, DWORD PTR [ebp-20]\n        lea     edx, [eax+6]\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, edx\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 48\n        je      .L17\n        mov     eax, 1\n        jmp     .L3\n.L17:\n        add     DWORD PTR [ebp-20], 1\n.L16:\n        cmp     DWORD PTR [ebp-20], 2\n        jle     .L18\n        mov     DWORD PTR [ebp-24], 0\n        jmp     .L19\n.L21:\n        mov     eax, DWORD PTR [ebp-24]\n        lea     edx, [eax+10]\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, edx\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 49\n        je      .L20\n        mov     eax, 1\n        jmp     .L3\n.L20:\n        add     DWORD PTR [ebp-24], 1\n.L19:\n        cmp     DWORD PTR [ebp-24], 3\n        jle     .L21\n        mov     DWORD PTR [ebp-28], 0\n        jmp     .L22\n.L24:\n        mov     eax, DWORD PTR [ebp-28]\n        lea     edx, [eax+15]\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, edx\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 50\n        je      .L23\n        mov     eax, 1\n        jmp     .L3\n.L23:\n        add     DWORD PTR [ebp-28], 1\n.L22:\n        cmp     DWORD PTR [ebp-28], 4\n        jle     .L24\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 21\n        movzx   eax, BYTE PTR [eax]\n        movsx   eax, al\n        mov     edx, DWORD PTR [ebp-32]\n        add     edx, 15\n        movzx   edx, BYTE PTR [edx]\n        movsx   edx, dl\n        add     edx, 1\n        cmp     eax, edx\n        je      .L25\n        mov     eax, 1\n        jmp     .L3\n.L25:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 9\n        movzx   edx, BYTE PTR [eax]\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 14\n        movzx   eax, BYTE PTR [eax]\n        cmp     dl, al\n        je      .L26\n        mov     eax, 1\n        jmp     .L3\n.L26:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 9\n        movzx   edx, BYTE PTR [eax]\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 20\n        movzx   eax, BYTE PTR [eax]\n        cmp     dl, al\n        je      .L27\n        mov     eax, 1\n        jmp     .L3\n.L27:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 9\n        movzx   edx, BYTE PTR [eax]\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 22\n        movzx   eax, BYTE PTR [eax]\n        cmp     dl, al\n        je      .L28\n        mov     eax, 1\n        jmp     .L3\n.L28:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 9\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 46\n        je      .L29\n        mov     eax, 1\n        jmp     .L3\n.L29:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 27\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 1\n        je      .L30\n        mov     eax, 1\n        jmp     .L3\n.L30:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 26\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 2\n        je      .L31\n        mov     eax, 1\n        jmp     .L3\n.L31:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 23\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 3\n        je      .L32\n        mov     eax, 1\n        jmp     .L3\n.L32:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 24\n        movzx   eax, BYTE PTR [eax]\n        cmp     al, 4\n        je      .L33\n        mov     eax, 1\n        jmp     .L3\n.L33:\n        mov     eax, DWORD PTR [ebp-32]\n        add     eax, 25\n        movzx   eax, BYTE PTR [eax]\n        movsx   eax, al\n.L3:\n        lea     esp, [ebp-8]\n        pop     ecx\n        pop     ebx\n        pop     ebp\n        lea     esp, [ecx-4]\n        ret\n",
    "category": "reversing"
}