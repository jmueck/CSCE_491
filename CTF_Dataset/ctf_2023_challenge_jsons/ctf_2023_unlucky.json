{
    "Dockerfile": "FROM debian:buster-slim as build\n\nARG name\n\nRUN apt-get update -y; apt-get install build-essential -y\nADD $name.c /tmp/$name.c\nADD Makefile /tmp/Makefile\nRUN cd /tmp/; make all\n\nFROM debian:buster-slim\n\nARG name\nARG port\n\nRUN apt-get update -y; apt-get install socat -y\nCOPY --from=build /tmp/$name /pwn/$name\nCOPY flag.txt /pwn/flag.txt\nWORKDIR /pwn\n\nEXPOSE $port\n\nRUN echo \"exec socat -s TCP-LISTEN:$port,reuseaddr,fork EXEC:/pwn/$name,stderr\" > /pwn/docker_entrypoint.sh\n\nENTRYPOINT [\"sh\", \"/pwn/docker_entrypoint.sh\"]\n",
    "flag.txt": "gigem{1_n33d_b3tt3r_3ntr0py_s0urc3s}\n",
    "Makefile": "CC := $(or $(CC),gcc)\nCFLAGS := \nNAME := unlucky\nPORT := 7777\nall: $(NAME)\n\nclean: .PHONY\n\trm -f $(NAME)\n\n$(NAME): $(NAME).c\n\t$(CC) $(CFLAGS) $^ -o $@\n\ndocker: Dockerfile $(NAME)\n\tdocker build -t $(NAME) --build-arg name=$(NAME) --build-arg port=$(PORT) .\n\nrun: docker\n\tdocker run -d --read-only --restart=always --name $(NAME) -p $(PORT):$(PORT) $(NAME)\n\nextract: docker\n\t$(eval id := $(shell docker create $(NAME)))\n\tdocker cp $(id):/pwn/$(NAME) - | tar xv $(NAME)\n\tdocker rm -v $(id)\n\ndist: extract\n\tzip $(NAME).zip $(NAME) $(NAME).c solver-template.py\n\n.PHONY:\n",
    "rand_nums.c": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    setvbuf(stdout, NULL, _IONBF, 0);\n    setvbuf(stdin, NULL, _IONBF, 0);\n    unsigned int x;\n    int offset;\n\n    printf(\"Please enter &main: \");\n    scanf(\"%x\", &x);\n\n    // find the offset for &seed\n    offset = 11971;\n    x = x + offset;\n\n    srand(x);\n    for(int i=1; i<=7; i++) {\n        printf(\"Randon number: %d\\n\", rand());\n    }\n}\n",
    "README.md": "# Unlucky\n\nAuthor: `nhwn`\n\nLuck won't save you here. Have fun trying to get the flag!\n## Solution\nA simple glance makes it seem like the seed is 69, but that's not quite the case. It's the address of the `static int`. Since we are given the address of `main` during execution, we just need to look at the binary and figure out the offset of seed. \n\n`objdump` can give us that. Looking at these few lines we can see the address of `main` and `seed` and calculate the offset:\n```\n    11e9: 48 8d 05 78 2e 00 00         \tlea\trax, [rip + 11896]      # 0x4068 <seed.2870>\n    11f0: 89 c7                        \tmov\tedi, eax\n    11f2: e8 69 fe ff ff               \tcall\t0x1060 <srand@plt>\n    11f7: 48 8d 35 a7 ff ff ff         \tlea\trsi, [rip - 89]         # 0x11a5 <main>\n```\n\nThen, we can write a program in c that will use `srand()` with the same seed and then output the first 7 random numbers.\n\nThe solution script uses the c program `rand_nums.c` to get the same 7 random numbers and pass them to the challenge binary. \n\nThe flag is: `gigem{1_n33d_b3tt3r_3ntr0py_s0urc3s}`\n",
    "solve.py": "from pwn import *\n\nhost = '0.0.0.0'\nport = 7777\n\nr = remote(host, port)\np = process('./rand_nums')\n\nr.recvuntil(b': ')\nmain = r.recvline()\n\n# send the random number to our c program to get us the 7 numbers\nnumbers = []\np.recvuntil(b': ')\np.sendline(main)\nfor i in range(7):\n\tp.recvuntil(b': ')\n\tnumbers.append(p.recvline().decode().strip())\np.close()\n\n# now lets send those to the server\nfor num in numbers:\n\t# send in the \n\tr.recvline()\n\tr.sendline(num)\n\n# get the flag!\nprint(r.recvline().decode())\n\n",
    "unlucky.c": "#include <stdio.h>\n#include <stdlib.h>\n\nint main() {\n    setvbuf(stdout, NULL, _IONBF, 0);\n    setvbuf(stdin, NULL, _IONBF, 0);\n\n    static int seed = 69;\n    srand(&seed);\n\n    printf(\"Here's a lucky number: %p\\n\", &main);\n\n    int lol = 1;\n    int input = 0;\n    for (int i = 1; i <= 7; ++i) {\n        printf(\"Enter lucky number #%d:\\n\", i);\n        scanf(\"%d\", &input);\n        if (rand() != input) {\n            lol = 0;\n        }\n    }\n\n    if (lol) {\n        char flag[64] = {0};\n        FILE* f = fopen(\"flag.txt\", \"r\");\n        fread(flag, 1, sizeof(flag), f);\n        printf(\"Nice work, here's the flag: %s\\n\", flag);\n    } else {\n        puts(\"How unlucky :pensive:\");\n    }\n}\n",
    "category": "pwn"
}