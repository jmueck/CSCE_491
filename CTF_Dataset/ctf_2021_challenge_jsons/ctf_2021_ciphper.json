{
    "challenge.py": "from hacksport.operations import execute\nfrom hacksport.problem import Challenge, File\n\n\nclass Problem(Challenge):\n    def setup(self):\n        self.files = [File(\"crypto.php\"), File(\"output.bin\")]\n\n    def generate_flag(self, random):\n        return r\"gigem{dont~roll~your~own~crypto}\"\n",
    "crypto.php": "<?php\n\nfunction secure_crypt($str, $key) {\n  if (!$key) {\n    return $str;\n  }\n\n  if (strlen($key) < 8) {\n    exit(\"key error\");\n  }\n\n  $n = strlen($key) < 32 ? strlen($key) : 32;\n\n  for ($i = 0; $i < strlen($str); $i++) {\n    $str[$i] = chr(ord($str[$i]) ^ (ord($key[$i % $n]) & 0x1F));\n  }\n\n  return $str;\n}\n",
    "output.bin": "sf'gh;k}.zqf/xc>{j5fvnc.wp2mxq/lrltqdtj/y|{fgi~>mff2p`ub{q2p~4{ub)jlc\u007f${a4mgijil9{}w>|{gpda9qzk=f{ujzh$`h4qg{~my|``a>ix|jv||0{}=sf'qlpa/ofsa/mk\u007fpaff>n7}{b2vv4{oh|eihh$n`p>pv,cni`f{ph7kpg2mxqb",
    "problem.json": "{\n  \"name\": \"Ciphper\",\n  \"category\": \"Crypto\",\n  \"description\": \"Background story: this code was once used on a REAL site to encrypt REAL data. Thankfully, this code is no longer being used and has not for a long time.\\n\\nA long time ago, one of the sites I was building needed to store some some potentially sensitive data. I did not know how to use any proper encryption techniques, so I wrote my own symmetric {{url_for(\\\"crypto.php\\\", display=\\\"cipher\\\")}}.\\n\\nThe encrypted content in {{url_for(\\\"output.bin\\\")}} is a well-known, olde English quote in lowercase ASCII alphabetic characters. No punctuation; just letters and spaces.\\n\\nThe flag is key to understanding this message.\",\n  \"score\" : 100,\n  \"hints\": [\"The first 6 characters of the flag are <code>gigem{</code>.\"],\n  \"walkthrough\": \"N/A\",\n  \"author\": \"Matthew Barry\",\n  \"organization\": \"TAMUctf\",\n  \"event\": \"TAMUctf\"\n}\n\n",
    "README.md": "# ciphper\n\nBackground story: this code was once used on a REAL site to encrypt REAL data.\nThankfully, this code is no longer being used and has not for a long time.\n\nA long time ago, one of the sites I was building needed to store some some\npotentially sensitive data. I did not know how to use any proper encryption\ntechniques, so I wrote my own symmetric cipher.\n\nThe encrypted content in **output.bin** is a well-known, olde English quote in\nlowercase ASCII alphabetic characters. No punctuation; just letters and spaces.\n\nThe flag is key to understanding this message.\n\nHint: The first 6 characters of the flag are `gigem{`.\n\n## solution\n\nreverse the encryption function, execute it with the key \"gigem{\" to get the first 6 chars of the key. from there with the knowledge from readme (old english quote, well known) and 'to\\`be\\`' it was pretty easy to expand the pattern out to 'to\\`be\\`or\\`not\\`to\\`be\\`that\\`is\\`the\\`question'.\n\nflag: gigem{dont~roll~your~own~crypto} true lol\n",
    "category": "crypto"
}