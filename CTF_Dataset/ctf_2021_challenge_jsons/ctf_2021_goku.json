{
    "challenge.py": "from hacksport.operations import execute\nfrom hacksport.problem import Challenge, File\n\n\nclass Problem(Challenge):\n    def setup(self):\n        pass\n\n    def generate_flag(self, random):\n        return r\"gigem{summon_the_spirit_bomb_799159}\"\n",
    "disassembly.png": "[Binary file or unsupported type: png]",
    "finish.png": "[Binary file or unsupported type: png]",
    "gef-begins.png": "[Binary file or unsupported type: png]",
    "kernel.go": "package main\n\nimport (\n    \"fmt\"\n)\n\nfunc f() string {\n    return \"799159\"\n}\nfunc a() string {\n    return \"_\"\n}\nfunc c() string {\n    return \"summon\"\n}\nfunc b() string {\n    return \"the\"\n}\nfunc e() string {\n    return \"spirit\"\n}\nfunc d() string {\n    return \"bomb\"\n}\n\nfunc function() string {\n    var cat string\n    var dog bool = true\n    var owl bool = true\n    var pig bool = true\n    var cow bool = true\n    var rat bool = true\n    for i := 1; i < 32; i++ {\n        if !rat && !dog && !owl && !pig && !cow {\n            break\n        }\n        if i % 17 == 0 && rat {\n            cat += f()\n            rat = false\n        }\n        if i % 11 == 0 && pig {\n            cat += e()\n            pig = false\n        }\n        if i % 4 == 0 {\n            cat += a()\n        }\n        if i % 5 == 0 && owl {\n            cat += b()\n            owl = false\n        }\n        if i % 2 == 0 && dog {\n            cat += c()\n            dog = false\n        }\n        if i % 13 == 0 && cow {\n            cat += d()\n            cow = false\n        }\n    }\n    cat = \"gigem{\" + cat\n    cat += \"}\"\n    return cat\n}\n\nfunc main() {\n    function()\n    fmt.Printf(\"TODO :: PUT FLAG HERE\\n\")\n}\n",
    "Makefile": "all: goku\n\ngoku:\n\tgo build -ldflags \"-s -w\" -o goku kernel.go\n\t\nclean:\n\trm goku\n",
    "problem.json": "{\n  \"name\": \"Goku\",\n  \"category\": \"Reversing\",\n  \"description\": \"Goku needs our help.\\nBefore he passed out he gave us a flash drive with an executable file that he says is necessary to stopping Vegeta.\\nCan you reverse it and get the flag? <a href='https://tamuctf.com/static-files/goku'>goku</a>\",\n  \"score\" : 150,\n  \"hints\": [\"The name of the challenge may indicate a language used\"],\n  \"walkthrough\": \"check our github or something\",\n  \"author\": \"Glenn Fitzpatrick\",\n  \"organization\": \"TAMUctf\",\n  \"event\": \"TAMUctf 2021\"\n}\n",
    "README.md": "#  Goku\n\n## Description\nGoku needs our help. Before he passed out he gave us a flash drive with an executable file that he says is necessary to stopping Vegeta. Can you reverse it and get the flag?\n\n## Solution\n\nGiving the binary a quick run results in nothing too special; seems to just start, print out some text, and quit.\n\n![](run.png)\n\nOpening up the program in gdb and inspecting the functions, we see the following:\n\n![](gef-begins.png)\n\nNow, I'm gonna tell you right now: if you attempt to reverse a Go binary statically by hand, you're gonna have a bad time.\n\nThere's a function, `main.function`, which is called by `main.main` immediately before a call to `os.Stdout` and `go.itab.*os.File,io.Writer`.\n\n![](disassembly.png)\n\nIt's quite likely that this will print out a string. Following up on this, let's just go to after the `main.function` call. To do this, I invoked the following:\n\n```\ngef\u27a4  break main.function \ngef\u27a4  continue\ngef\u27a4  finish\n```\n\nFollowing this, I was delighted to see:\n\n![](finish.png)\n\nWhile frustrating that I don't know precisely what the process is to get to this flag, it simply isn't necessary for me to know given the stdout write hint.\n\n`gigem{summon_the_spirit_bomb_799159}`",
    "run.png": "[Binary file or unsupported type: png]",
    "category": "reversing"
}