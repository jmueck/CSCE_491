{
    "addItems.sql": "INSERT INTO experiments (codename, containment, description, img) VALUES\n('Default', 'safe', 'default testing icon', 'avatar'),\n('Teddy', 'euclid', 'To please the teddy, one must offer them a sacrifice of your finest tea', 'teddy'),\n('Traffic Cone #88192', 'neutralized', 'We believe they appear from interdimensional rifts with no clear origin', 'cone'),\n('Gnomial', 'thaumiel', 'If encountered in the wild do not make eye contact. They only become more aggressive.', 'gnome'),\n('A\u0337\u030c\u0343\u0358\u0305\u031a\u0308\u0350\u0340\u031a\u031a\u0358\u030c\u0300\u033e\u0315\u033e\u033a\u0328\u033c\u0317\u0349\u0326\u0326\u031d\u0330\u0332\u034d\u034d\u0356\u035a\u0321d\u0334\u0357\u0352\u0344\u0309\u0358\u0310\u034b\u0357\u0344\u0311\u0304\u0309\u030d\u0351\u033b\u0353\u032b\u032d\u034e\u0359\u032e\u0332\u0345\u0356\u032d\u0316\u032c\u0326\u0349d\u0338\u035b\u035b\u0313\u0302\u0340\u0341\u033d\u031b\u031a\u0312\u0342\u034a\u0341\u0319\u032e\u035a\u0329\u0326\u0318\u0317i\u0337\u034b\u0303\u035d\u0340\u0305\u033d\u033e\u034b\u035d\u0351\u033f\u0301\u0301\u032b\u0356\u034e\u0356\u0355\u0321\u034es\u0335\u0307\u030d\u0332\u0324\u0325\u0332\u0323\u035a\u0325\u0320o\u0338\u031b\u0312\u034a\u030f\u0305\u0358\u0340\u033d\u033f\u030a\u0305\u0344\u034a\u0303\u0311\u0343\u0342\u033cn\u0336\u0307\u030c\u030e\u0359\u0323\u031d\u0345\u0322\u0321\u0339\u0353\u035c\u032f\u0324\u0349', 'apollyon', 'H\u0335\u0314\u0302\u0304\u0307\u0311\u031a\u033f\u035d\u0322\u0329\u033a\u031e\u0325\u032e\u0331\u0324\u0317\u0331\u0339\u0353\u0331\u0354\u0355\u0331E\u0335\u0307\u0308\u0302\u0311\u035d\u0303\u0301\u030e\u035d\u033f\u034a\u0345\u034d\u0354 \u0334\u031b\u033d\u0303\u0360\u033f\u0322\u0323\u0326I\u0335\u0358\u035b\u0360\u0351\u030b\u0341\u0350\u0314\u0313\u0311\u0342\u0331\u035a\u0355\u0347\u0331\u0345\u032eS\u0337\u0352\u0307\u0342\u030d\u0357\u030d\u0350\u032a\u035c\u031d\u0332\u032b\u031d\u0359\u0353 \u0337\u0344\u0312\u030d\u032a\u0339\u0355\u0359\u034d\u032d\u034e\u0316\u033a\u0318A\u0337\u030f\u035a\u0347\u0318\u0353\u0353L\u0334\u0340\u033f\u033d\u032d\u031d\u0317\u0325\u031c\u032d\u0339\u032a\u0349\u034e\u0322R\u0334\u033e\u030c\u0302\u030c\u0309\u034a\u0341\u034b\u030f\u031b\u0317E\u0337\u031a\u0346\u035d\u0342\u0315\u0350\u030d\u030f\u031b\u0346\u0352\u034a\u030c\u0349\u034d\u032b\u035cA\u0336\u0304\u031b\u0305\u0306\u034c\u0311\u034b\u030e\u031b\u0304\u0346\u0312\u032d\u032c\u034e\u0345\u0329\u032d\u032c\u032a\u035c\u035c\u0329\u0326\u0326\u035a\u0359\u0327\u0339\u0333D\u0337\u0312\u0310\u034c\u0360\u0305\u034c\u0342\u0351\u033c\u0319\u0323\u0332\u0331\u034e\u0318\u033a\u034e\u0355\u0329\u0349\u0333\u032a\u0328\u0332\u0349Y\u0336\u0357\u034c\u0360\u0315\u0342\u035b\u0301\u034a\u0344\u0310\u033d\u0314\u0352\u0314\u035b\u0350\u032c\u035a\u031c\u0330\u0355\u0326\u031d\u031d \u0337\u030f\u0314\u0341\u0315\u0304\u030b\u030d\u030e\u0360\u0360\u033d\u030e\u0352\u0344\u0341\u0307\u030a\u0353\u0354\u0353\u032d\u031eH\u0336\u033f\u031a\u030d\u0315\u034c\u0340\u0302\u0302\u034c\u0326\u032eE\u0336\u0303\u0304\u030e\u030b\u030e\u0304\u0313\u031b\u0352\u034c\u0304\u034c\u033d\u0341\u0308\u0326\u0356\u0316\u032a\u0322\u0316\u032c\u031c\u032dR\u0337\u0344\u035d\u0304\u030a\u030c\u0315\u0315\u0310\u0310\u0316\u0328\u0329\u0322\u0348\u0356\u033a\u0324\u0321\u0333\u0345\u031c\u033c\u0331\u032d\u0329\u0328\u0324E\u0338\u030a\u0344\u0358\u034a\u0352\u0343\u0329\u0353\u0353\u035c\u0323\u0332\u031c\u0321\u0321\u035a\u0316', 'crump');\n\nINSERT INTO users (name, password, status) VALUES\n('glenn', '9651cbc7c0b5fb1a81f2858a07813c82', 'Making More Challenges'),\n('teddy', 'e2ec2b31abe380b989ff057aef66377a', 'PWNing Away'),\n('admin', 'gigem{SQL_1nj3ct1ons_c4n_b3_fun}', 'Away on Vacation');\n",
    "challenge.py": "from hacksport.docker import DockerChallenge\n\nclass Problem(DockerChallenge):\n    dont_template = [\"templates\"]\n\n    def setup(self):\n        self.ports = {1337: fmt()}\n        self.initialize_docker({'FLAG': r\"gigem{SQL_1nj3ct1ons_c4n_b3_fun}\"})\n\n    def generate_flag(self, random):\n        return r\"gigem{SQL_1nj3ct1ons_c4n_b3_fun}\"\n\n\nclass fmt():\n    def __init__(self):\n    \tpass\n\n    def dict(self):\n\n        url = \"http://{host}/problem/{{port}}/?name=Cone\"\n        link = \"<a href='{}' target='_blank'>{}</a>\".format(url, url)\n        return {\"fmt\": link, \"desc\": \"Here's the link for my favorite one\"}",
    "Dockerfile": "# FROM postgres:13\n\nFROM debian:buster-slim\n\n\n\n\n# Move all items from directory to docker\nRUN mkdir /opt/challenge\n\nRUN apt-get -y update && apt-get -y install wget\n\nRUN sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'; \\\n\twget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -; \\\n\tapt update -y; \\\n\tapt install postgresql -y;\n\n\nUSER postgres\nRUN mkdir /var/lib/postgresql/data\nUSER root\nENV PGDATA /var/lib/postgresql/data\n\n# Golang\nRUN wget https://golang.org/dl/go1.16.2.linux-amd64.tar.gz\nRUN rm -rf /usr/local/go && tar -C /usr/local -xzf go1.16.2.linux-amd64.tar.gz\nRUN /usr/local/go/bin/go mod init sequel\nRUN /usr/local/go/bin/go get github.com/lib/pq\nADD ./ /opt/challenge\nADD templates/. /opt/challenge/.\nRUN chmod +x /opt/challenge/start.sh\n\nENV POSTGRES_PASSWORD G@Wm5C84a%ey!%pmzRTRS%!!G$!v7zR4\nEXPOSE 1337\nWORKDIR /opt/challenge\n\nRUN /usr/local/go/bin/go build\n\nENTRYPOINT [\"/opt/challenge/start.sh\"]",
    "go.mod": "module sequel\n\ngo 1.16\n\nrequire github.com/lib/pq v1.10.0 // indirect\n",
    "go.sum": "github.com/lib/pq v1.10.0 h1:Zx5DJFEYQXio93kgXnQ09fXNiUKsqv4OUEu2UtGcB1E=\ngithub.com/lib/pq v1.10.0/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\n",
    "main.go": "package main\n\nimport (\n    \"fmt\"\n    \"image\"\n    \"bytes\"\n    \"database/sql\"\n    \"encoding/base64\" \n    \"os\"\n    \"image/png\"\n    \"net/http\"\n    \"html/template\"\n    \"io/ioutil\"\n    \"net/url\"\n\n    _ \"github.com/lib/pq\"\n)\n\n// Struct for the card\ntype SCPCard struct {\n    Codename string\n    Id string\n    Containment string\n    Description string\n    Image string\n}\n\ntype CardHolder struct {\n    Cards []SCPCard\n}\n\ntype Debug struct {\n    Error string\n}\n\nconst (\n    host = \"localhost\"\n    port = 5432\n    user = \"yeetus\"\n    password = \"stardate2387jellyfish\"\n    dbname = \"scpfoundation\"\n)\n\nfunc encodeImage(path string) string {\n    var buffer bytes.Buffer\n\n    // Open image\n    imgFile, err := os.Open(path)\n\tif err != nil {\n        imgFile, err = os.Open(\"imgs/avatar.png\")\n\t}\n\tdefer imgFile.Close()\n\n\timageData, _, imgErr := image.Decode(imgFile)\n\tif err != nil {\n        panic(imgErr)\n\t}\n\n    encErr := png.Encode(&buffer, imageData)\n    if err != nil {\n        panic(encErr)\n    }\n\n    return base64.StdEncoding.EncodeToString(buffer.Bytes())\n}\n\nfunc pageHandler(w http.ResponseWriter, req *http.Request) {\n\n    // Parse the URL query into a map of key, value (strings I think)\n    newMap, err := url.ParseQuery(req.URL.RawQuery)\n    if err != nil {\n        panic(err)\n    }\n\n    if len(newMap) == 0 {\n        newMap[\"name\"] = []string{\"Default\"}\n    }\n\n    w.Header().Add(\"Content-Type\", \"text/html\")\n\n    // Read in index.html\n    file, fErr := ioutil.ReadFile(\"./index.html\")\n    if fErr != nil {\n        panic(fErr)\n    }\n    doc := string(file)\n\n    // Fill out the template\n    tmpl, err := template.New(\"anyNameForTemplate\").Parse(doc)\n    if err == nil {\n\n        // Connect to and query database\n        var id string\n        var codename string\n        var containment string\n        var description string\n        var img string\n\n        // Connection String\n        psqlInfo := fmt.Sprintf(\"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable\", host, port, user, password, dbname)\n        db, dbErr := sql.Open(\"postgres\", psqlInfo)\n        if dbErr != nil {\n            panic(dbErr)\n        }\n        defer db.Close()\n\n        // Ping Test\n        //pingErr := db.Ping()\n        //if pingErr != nil {\n        //    panic(pingErr)\n        //}\n\n        cardHolder := CardHolder{}\n\n        if len(newMap) != 0 {\n            query := \"SELECT * FROM experiments WHERE codename LIKE '%\" + newMap[\"name\"][0] + \"%'\"\n            rows, rowErr := db.Query(query)\n            if rowErr != nil {\n                file, fErr := ioutil.ReadFile(\"./debug.html\")\n                if fErr != nil {\n                    panic(fErr)\n                }\n                doc := string(file)\n\n                e := Debug{ Error: fmt.Sprintf(\"%s\", rowErr) }\n\n                // Fill out the template\n                tmpl, _ := template.New(\"debugger\").Parse(doc)\n                tmpl.Execute(w, e)\n                return\n            }\n\n            for rows.Next() {\n                rowErr = rows.Scan(&id, &codename, &containment, &description, &img)\n                if rowErr != nil {\n                    panic(rowErr) \n                }\n                data := SCPCard {\n                    Codename : codename,\n                    Id : id,\n                    Containment : containment,\n                    Description : description,\n                    Image : \"imgs/\" + img + \".png\",\n                }\n\n                // Creating the image\n                data.Image = encodeImage(data.Image)\n                cardHolder.Cards = append(cardHolder.Cards, data)\n            }\n            //fmt.Printf(\"%v %v %v %v %v\\n\", id, codename, containment, description, img)\n\n            // Fill in the template\n            tmpl.Execute(w, cardHolder)\n        }\n    }\n}\n\nfunc main() {\n    // Handler\n    http.HandleFunc(\"/\", pageHandler)\n    http.ListenAndServe(\":1337\", nil)\n}\n",
    "problem.json": "{\n  \"name\": \"API 2 : The SeQueL\",\n  \"category\": \"Web\",\n  \"description\": \"I just made my own SCP collection website. What do you think?\",\n  \"score\" : 150,\n  \"hints\": [\"Maybe you need to encode your query\", \"If you are getting stuck on mismatched types, maybe look at what the other items are named / what their values are\"],\n  \"walkthrough\": \"check our github or something\",\n  \"author\": \"Glenn Fitzpatrick\",\n  \"organization\": \"TAMUctf\",\n  \"event\": \"TAMUctf 2021\"\n}\n",
    "setup.sql": "CREATE DATABASE scpFoundation;\n\n\\c scpfoundation\n\nDROP TABLE users;\nDROP TABLE experiments;\nDROP TYPE contLevel;\n\nCREATE TYPE contLevel AS ENUM ('apollyon', 'euclid', 'keter', 'thaumiel', 'safe', 'neutralized');\n\nCREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR,\n    password VARCHAR,\n    status VARCHAR\n);\n\nCREATE TABLE experiments (\n    id SERIAL PRIMARY KEY,\n    codename VARCHAR,\n    containment contLevel,\n    description VARCHAR,\n    img VARCHAR\n);\n\nCREATE USER yeetus WITH PASSWORD 'stardate2387jellyfish';\n\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO yeetus;\n\n\\i /opt/challenge/addItems.sql\n",
    "start.sh": "#!/bin/sh\n\nsu postgres -c \"/usr/lib/postgresql/11/bin/initdb; /usr/lib/postgresql/11/bin/postgres\" &\n\nsleep 5\n\npsql -U postgres -f /opt/challenge/setup.sql\n\n./sequel\n",
    "imgs\\avatar.png": "[Binary file or unsupported type: png]",
    "imgs\\cone.png": "[Binary file or unsupported type: png]",
    "imgs\\crump.png": "[Binary file or unsupported type: png]",
    "imgs\\gnome.png": "[Binary file or unsupported type: png]",
    "imgs\\teddy.png": "[Binary file or unsupported type: png]",
    "templates\\debug.html": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>API 2 : The SeQueL</title>\n    \n    <!-- Bootstrap -->\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</head>\n\n<body style=\"background-color:grey;font-family:times\">\n    <div align=\"center\">\n        {{ .Error }}\n    </div>\n</body>\n</html>\n",
    "templates\\index.html": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>API 2 : The SeQueL</title>\n    \n    <!-- Bootstrap -->\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</head>\n\n<body style=\"background-color:grey;font-family:times\">\n    <div align=\"center\">\n        {{ range .Cards }}\n        <div class=\"card\" style=\"width:32vw; margin-top:4vh; margin-bottom: 2vh\">\n        <img class=\"card-img-top\" src=\"data:image/png; base64,{{ .Image }}\" alt=\"Card image\">\n            <div class=\"card-body\">\n                <h3 class=\"card-title\">Codename : {{ .Codename }}</h3>\n                <div class=\"card-text\">ID : {{ .Id }}</div>\n                <div class=\"card-text\">SCP Containment : {{ .Containment }}</div>\n                <div class=\"card-text\">{{ .Description }}</div>\n            </div>\n        </div>\n        {{ end }}\n    </div>\n</body>\n</html>\n",
    "category": "web"
}