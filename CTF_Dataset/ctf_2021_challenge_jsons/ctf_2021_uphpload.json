{
    "challenge.py": "from hacksport.docker import DockerChallenge\n\nclass Problem(DockerChallenge):\n    def setup(self):\n        self.ports = {80: HTTP()}\n        self.initialize_docker({'FLAG': r\"gigem{R3vER5e_R3ver5e!}\"})\n\n    def generate_flag(self, random):\n        return r\"gigem{R3vER5e_R3ver5e!}\"\n\n\nclass HTTP():\n    def __init__(self):\n    \tpass\n\n    def dict(self):\n\n        url = \"http://{host}/problem/{{port}}/\"\n        link = \"<a href='{}' target='_blank'>{}</a>\".format(url, url)\n        return {\"fmt\": link, \"desc\": \"challenge\"}",
    "Dockerfile": "FROM alpine\n\n\nRUN apk --update add apache2 php7 php7-apache2 php7-session\n\n\nenv APACHE_RUN_USER    www-data\nenv APACHE_RUN_GROUP   www-data\nenv APACHE_PID_FILE    /var/run/apache2.pid\nenv APACHE_RUN_DIR     /var/run/apache2\nenv APACHE_LOCK_DIR    /var/lock/apache2\nenv APACHE_LOG_DIR     /var/log/apache2\n\nEXPOSE 80\n\nCOPY start.sh /start.sh\nCOPY index.php /var/www/localhost/htdocs/index.php\nCOPY upload.php /var/www/localhost/htdocs/upload.php\nCOPY uploads /var/www/localhost/htdocs/uploads\nRUN chgrp www-data /var/www/localhost/htdocs/uploads\nRUN chmod g+w /var/www/localhost/htdocs/uploads\nRUN rm /etc/apache2/httpd.conf\nCOPY httpd.conf /etc/apache2/httpd.conf\n\nRUN mkdir /flag_is_here\nCOPY flag.txt /flag_is_here/flag.txt\n\nENTRYPOINT [\"sh\", \"start.sh\"]\n",
    "flag.txt": "gigem{R3vER5e_R3ver5e!}\n",
    "httpd.conf": "#\n# This is the main Apache HTTP server configuration file.  It contains the\n# configuration directives that give the server its instructions.\n# See <URL:http://httpd.apache.org/docs/2.4/> for detailed information.\n# In particular, see \n# <URL:http://httpd.apache.org/docs/2.4/mod/directives.html>\n# for a discussion of each configuration directive.\n#\n# Do NOT simply read the instructions in here without understanding\n# what they do.  They're here only as hints or reminders.  If you are unsure\n# consult the online docs. You have been warned.  \n#\n# Configuration and logfile names: If the filenames you specify for many\n# of the server's control files begin with \"/\" (or \"drive:/\" for Win32), the\n# server will use that explicit path.  If the filenames do *not* begin\n# with \"/\", the value of ServerRoot is prepended -- so \"logs/access_log\"\n# with ServerRoot set to \"/usr/local/apache2\" will be interpreted by the\n# server as \"/usr/local/apache2/logs/access_log\", whereas \"/logs/access_log\" \n# will be interpreted as '/logs/access_log'.\n\n#\n# ServerTokens\n# This directive configures what you return as the Server HTTP response\n# Header. The default is 'Full' which sends information about the OS-Type\n# and compiled in modules.\n# Set to one of:  Full | OS | Minor | Minimal | Major | Prod\n# where Full conveys the most information, and Prod the least.\n#\nServerTokens OS\n\n#\n# ServerRoot: The top of the directory tree under which the server's\n# configuration, error, and log files are kept.\n#\n# Do not add a slash at the end of the directory path.  If you point\n# ServerRoot at a non-local disk, be sure to specify a local disk on the\n# Mutex directive, if file-based mutexes are used.  If you wish to share the\n# same ServerRoot for multiple httpd daemons, you will need to change at\n# least PidFile.\n#\nServerRoot /var/www\n\n#\n# Mutex: Allows you to set the mutex mechanism and mutex file directory\n# for individual mutexes, or change the global defaults\n#\n# Uncomment and change the directory if mutexes are file-based and the default\n# mutex file directory is not on a local disk or is not appropriate for some\n# other reason.\n#\n# Mutex default:/run/apache2\n\n#\n# Listen: Allows you to bind Apache to specific IP addresses and/or\n# ports, instead of the default. See also the <VirtualHost>\n# directive.\n#\n# Change this to Listen on specific IP addresses as shown below to \n# prevent Apache from glomming onto all bound IP addresses.\n#\n#Listen 12.34.56.78:80\nListen 80\n\n#\n# Dynamic Shared Object (DSO) Support\n#\n# To be able to use the functionality of a module which was built as a DSO you\n# have to place corresponding `LoadModule' lines at this location so the\n# directives contained in it are actually available _before_ they are used.\n# Statically compiled modules (those listed by `httpd -l') do not need\n# to be loaded here.\n#\n# Example:\n# LoadModule foo_module modules/mod_foo.so\n#\n#LoadModule mpm_event_module modules/mod_mpm_event.so\nLoadModule mpm_prefork_module modules/mod_mpm_prefork.so\n#LoadModule mpm_worker_module modules/mod_mpm_worker.so\nLoadModule authn_file_module modules/mod_authn_file.so\n#LoadModule authn_dbm_module modules/mod_authn_dbm.so\n#LoadModule authn_anon_module modules/mod_authn_anon.so\n#LoadModule authn_dbd_module modules/mod_authn_dbd.so\n#LoadModule authn_socache_module modules/mod_authn_socache.so\nLoadModule authn_core_module modules/mod_authn_core.so\nLoadModule authz_host_module modules/mod_authz_host.so\nLoadModule authz_groupfile_module modules/mod_authz_groupfile.so\nLoadModule authz_user_module modules/mod_authz_user.so\n#LoadModule authz_dbm_module modules/mod_authz_dbm.so\n#LoadModule authz_owner_module modules/mod_authz_owner.so\n#LoadModule authz_dbd_module modules/mod_authz_dbd.so\nLoadModule authz_core_module modules/mod_authz_core.so\nLoadModule access_compat_module modules/mod_access_compat.so\nLoadModule auth_basic_module modules/mod_auth_basic.so\n#LoadModule auth_form_module modules/mod_auth_form.so\n#LoadModule auth_digest_module modules/mod_auth_digest.so\n#LoadModule allowmethods_module modules/mod_allowmethods.so\n#LoadModule file_cache_module modules/mod_file_cache.so\n#LoadModule cache_module modules/mod_cache.so\n#LoadModule cache_disk_module modules/mod_cache_disk.so\n#LoadModule cache_socache_module modules/mod_cache_socache.so\n#LoadModule socache_shmcb_module modules/mod_socache_shmcb.so\n#LoadModule socache_dbm_module modules/mod_socache_dbm.so\n#LoadModule socache_memcache_module modules/mod_socache_memcache.so\n#LoadModule socache_redis_module modules/mod_socache_redis.so\n#LoadModule watchdog_module modules/mod_watchdog.so\n#LoadModule macro_module modules/mod_macro.so\n#LoadModule dbd_module modules/mod_dbd.so\n#LoadModule dumpio_module modules/mod_dumpio.so\n#LoadModule echo_module modules/mod_echo.so\n#LoadModule buffer_module modules/mod_buffer.so\n#LoadModule data_module modules/mod_data.so\n#LoadModule ratelimit_module modules/mod_ratelimit.so\nLoadModule reqtimeout_module modules/mod_reqtimeout.so\n#LoadModule ext_filter_module modules/mod_ext_filter.so\n#LoadModule request_module modules/mod_request.so\n#LoadModule include_module modules/mod_include.so\nLoadModule filter_module modules/mod_filter.so\n#LoadModule reflector_module modules/mod_reflector.so\n#LoadModule substitute_module modules/mod_substitute.so\n#LoadModule sed_module modules/mod_sed.so\n#LoadModule charset_lite_module modules/mod_charset_lite.so\n#LoadModule deflate_module modules/mod_deflate.so\nLoadModule mime_module modules/mod_mime.so\nLoadModule log_config_module modules/mod_log_config.so\n#LoadModule log_debug_module modules/mod_log_debug.so\n#LoadModule log_forensic_module modules/mod_log_forensic.so\n#LoadModule logio_module modules/mod_logio.so\nLoadModule env_module modules/mod_env.so\n#LoadModule mime_magic_module modules/mod_mime_magic.so\n#LoadModule expires_module modules/mod_expires.so\nLoadModule headers_module modules/mod_headers.so\n#LoadModule usertrack_module modules/mod_usertrack.so\n#LoadModule unique_id_module modules/mod_unique_id.so\nLoadModule setenvif_module modules/mod_setenvif.so\nLoadModule version_module modules/mod_version.so\n#LoadModule remoteip_module modules/mod_remoteip.so\n#LoadModule session_module modules/mod_session.so\n#LoadModule session_cookie_module modules/mod_session_cookie.so\n#LoadModule session_crypto_module modules/mod_session_crypto.so\n#LoadModule session_dbd_module modules/mod_session_dbd.so\n#LoadModule slotmem_shm_module modules/mod_slotmem_shm.so\n#LoadModule slotmem_plain_module modules/mod_slotmem_plain.so\n#LoadModule dialup_module modules/mod_dialup.so\n#LoadModule http2_module modules/mod_http2.so\nLoadModule unixd_module modules/mod_unixd.so\n#LoadModule heartbeat_module modules/mod_heartbeat.so\n#LoadModule heartmonitor_module modules/mod_heartmonitor.so\nLoadModule status_module modules/mod_status.so\nLoadModule autoindex_module modules/mod_autoindex.so\n#LoadModule asis_module modules/mod_asis.so\n#LoadModule info_module modules/mod_info.so\n#LoadModule suexec_module modules/mod_suexec.so\n<IfModule !mpm_prefork_module>\n\t#LoadModule cgid_module modules/mod_cgid.so\n</IfModule>\n<IfModule mpm_prefork_module>\n\t#LoadModule cgi_module modules/mod_cgi.so\n</IfModule>\n#LoadModule vhost_alias_module modules/mod_vhost_alias.so\n#LoadModule negotiation_module modules/mod_negotiation.so\nLoadModule dir_module modules/mod_dir.so\n#LoadModule actions_module modules/mod_actions.so\n#LoadModule speling_module modules/mod_speling.so\n#LoadModule userdir_module modules/mod_userdir.so\nLoadModule alias_module modules/mod_alias.so\n#LoadModule rewrite_module modules/mod_rewrite.so\n\nLoadModule negotiation_module modules/mod_negotiation.so\n\n<IfModule unixd_module>\n#\n# If you wish httpd to run as a different user or group, you must run\n# httpd as root initially and it will switch.  \n#\n# User/Group: The name (or #number) of the user/group to run httpd as.\n# It is usually good practice to create a dedicated user and group for\n# running httpd, as with most system services.\n#\nUser apache\nGroup apache\n\n</IfModule>\n\n# 'Main' server configuration\n#\n# The directives in this section set up the values used by the 'main'\n# server, which responds to any requests that aren't handled by a\n# <VirtualHost> definition.  These values also provide defaults for\n# any <VirtualHost> containers you may define later in the file.\n#\n# All of these directives may appear inside <VirtualHost> containers,\n# in which case these default settings will be overridden for the\n# virtual host being defined.\n#\n\n#\n# ServerAdmin: Your address, where problems with the server should be\n# e-mailed.  This address appears on some server-generated pages, such\n# as error documents.  e.g. admin@your-domain.com\n#\nServerAdmin you@example.com\n\n#\n# Optionally add a line containing the server version and virtual host\n# name to server-generated pages (internal error documents, FTP directory\n# listings, mod_status and mod_info output etc., but not CGI generated\n# documents or custom error documents).\n# Set to \"EMail\" to also include a mailto: link to the ServerAdmin.\n# Set to one of:  On | Off | EMail\n#\nServerSignature On\n\n#\n# ServerName gives the name and port that the server uses to identify itself.\n# This can often be determined automatically, but we recommend you specify\n# it explicitly to prevent problems during startup.\n#\n# If your host doesn't have a registered DNS name, enter its IP address here.\n#\n#ServerName www.example.com:80\n\n#\n# Deny access to the entirety of your server's filesystem. You must\n# explicitly permit access to web content directories in other \n# <Directory> blocks below.\n#\n<Directory />\n    AllowOverride none\n    Require all denied\n</Directory>\n\n#\n# Note that from this point forward you must specifically allow\n# particular features to be enabled - so if something's not working as\n# you might expect, make sure that you have specifically enabled it\n# below.\n#\n\n#\n# DocumentRoot: The directory out of which you will serve your\n# documents. By default, all requests are taken from this directory, but\n# symbolic links and aliases may be used to point to other locations.\n#\nDocumentRoot \"/var/www/localhost/htdocs\"\n<Directory \"/var/www/localhost/htdocs\">\n    #\n    # Possible values for the Options directive are \"None\", \"All\",\n    # or any combination of:\n    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews\n    #\n    # Note that \"MultiViews\" must be named *explicitly* --- \"Options All\"\n    # doesn't give it to you.\n    #\n    # The Options directive is both complicated and important.  Please see\n    # http://httpd.apache.org/docs/2.4/mod/core.html#options\n    # for more information.\n    #\n    Options Indexes FollowSymLinks\n\n    #\n    # AllowOverride controls what directives may be placed in .htaccess files.\n    # It can be \"All\", \"None\", or any combination of the keywords:\n    #   AllowOverride FileInfo AuthConfig Limit\n    #\n    AllowOverride None\n\n    #\n    # Controls who can get stuff from this server.\n    #\n    Require all granted\n</Directory>\n\n#\n# DirectoryIndex: sets the file that Apache will serve if a directory\n# is requested.\n#\n<IfModule dir_module>\n    DirectoryIndex index.php\n</IfModule>\n\n#\n# The following lines prevent .htaccess and .htpasswd files from being \n# viewed by Web clients. \n#\n<Files \".ht*\">\n    Require all denied\n</Files>\n\n#\n# ErrorLog: The location of the error log file.\n# If you do not specify an ErrorLog directive within a <VirtualHost>\n# container, error messages relating to that virtual host will be\n# logged here.  If you *do* define an error logfile for a <VirtualHost>\n# container, that host's errors will be logged there and not here.\n#\nErrorLog logs/error.log\n\n#\n# LogLevel: Control the number of messages logged to the error_log.\n# Possible values include: debug, info, notice, warn, error, crit,\n# alert, emerg.\n#\nLogLevel warn\n\n<IfModule log_config_module>\n    #\n    # The following directives define some format nicknames for use with\n    # a CustomLog directive (see below).\n    #\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\n\n    <IfModule logio_module>\n      # You need to enable mod_logio.c to use %I and %O\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\n    </IfModule>\n\n    #\n    # The location and format of the access logfile (Common Logfile Format).\n    # If you do not define any access logfiles within a <VirtualHost>\n    # container, they will be logged here.  Contrariwise, if you *do*\n    # define per-<VirtualHost> access logfiles, transactions will be\n    # logged therein and *not* in this file.\n    #\n    #CustomLog logs/access.log common\n\n    #\n    # If you prefer a logfile with access, agent, and referer information\n    # (Combined Logfile Format) you can use the following directive.\n    #\n    CustomLog logs/access.log combined\n</IfModule>\n\n<IfModule alias_module>\n    #\n    # Redirect: Allows you to tell clients about documents that used to \n    # exist in your server's namespace, but do not anymore. The client \n    # will make a new request for the document at its new location.\n    # Example:\n    # Redirect permanent /foo http://www.example.com/bar\n\n    #\n    # Alias: Maps web paths into filesystem paths and is used to\n    # access content that does not live under the DocumentRoot.\n    # Example:\n    # Alias /webpath /full/filesystem/path\n    #\n    # If you include a trailing / on /webpath then the server will\n    # require it to be present in the URL.  You will also likely\n    # need to provide a <Directory> section to allow access to\n    # the filesystem path.\n\n    #\n    # ScriptAlias: This controls which directories contain server scripts. \n    # ScriptAliases are essentially the same as Aliases, except that\n    # documents in the target directory are treated as applications and\n    # run by the server when requested rather than as documents sent to the\n    # client.  The same rules about trailing \"/\" apply to ScriptAlias\n    # directives as to Alias.\n    #\n    ScriptAlias /cgi-bin/ \"/var/www/localhost/cgi-bin/\"\n\n</IfModule>\n\n<IfModule cgid_module>\n    #\n    # ScriptSock: On threaded servers, designate the path to the UNIX\n    # socket used to communicate with the CGI daemon of mod_cgid.\n    #\n    #Scriptsock cgisock\n</IfModule>\n\n#\n# \"/var/www/localhost/cgi-bin\" should be changed to whatever your ScriptAliased\n# CGI directory exists, if you have that configured.\n#\n<Directory \"/var/www/localhost/cgi-bin\">\n    AllowOverride None\n    Options None\n    Require all granted\n</Directory>\n\n<IfModule headers_module>\n    #\n    # Avoid passing HTTP_PROXY environment to CGI's on this or any proxied\n    # backend servers which have lingering \"httpoxy\" defects.\n    # 'Proxy' request header is undefined by the IETF, not listed by IANA\n    #\n    RequestHeader unset Proxy early\n</IfModule>\n\n<IfModule mime_module>\n    #\n    # TypesConfig points to the file containing the list of mappings from\n    # filename extension to MIME-type.\n    #\n    TypesConfig /etc/apache2/mime.types\n\n    #\n    # AddType allows you to add to or override the MIME configuration\n    # file specified in TypesConfig for specific file types.\n    #\n    #AddType application/x-gzip .tgz\n    #\n    # AddEncoding allows you to have certain browsers uncompress\n    # information on the fly. Note: Not all browsers support this.\n    #\n    #AddEncoding x-compress .Z\n    #AddEncoding x-gzip .gz .tgz\n    #\n    # If the AddEncoding directives above are commented-out, then you\n    # probably should define those extensions to indicate media types:\n    #\n    AddType application/x-compress .Z\n    AddType application/x-gzip .gz .tgz\n\n    #\n    # AddHandler allows you to map certain file extensions to \"handlers\":\n    # actions unrelated to filetype. These can be either built into the server\n    # or added with the Action directive (see below)\n    #\n    # To use CGI scripts outside of ScriptAliased directories:\n    # (You will also need to add \"ExecCGI\" to the \"Options\" directive.)\n    #\n    #AddHandler cgi-script .cgi\n\n    # For type maps (negotiated resources):\n    #AddHandler type-map var\n\n    #\n    # Filters allow you to process content before it is sent to the client.\n    #\n    # To parse .shtml files for server-side includes (SSI):\n    # (You will also need to add \"Includes\" to the \"Options\" directive.)\n    #\n    #AddType text/html .shtml\n    #AddOutputFilter INCLUDES .shtml\n</IfModule>\n\n#\n# The mod_mime_magic module allows the server to use various hints from the\n# contents of the file itself to determine its type.  The MIMEMagicFile\n# directive tells the module where the hint definitions are located.\n#\n<IfModule mime_magic_module>\n    MIMEMagicFile /etc/apache2/magic\n</IfModule>\n\n#\n# Customizable error responses come in three flavors:\n# 1) plain text 2) local redirects 3) external redirects\n#\n# Some examples:\n#ErrorDocument 500 \"The server made a boo boo.\"\n#ErrorDocument 404 /missing.html\n#ErrorDocument 404 \"/cgi-bin/missing_handler.pl\"\n#ErrorDocument 402 http://www.example.com/subscription_info.html\n#\n\n#\n# MaxRanges: Maximum number of Ranges in a request before\n# returning the entire resource, or one of the special\n# values 'default', 'none' or 'unlimited'.\n# Default setting is to accept 200 Ranges.\n#MaxRanges unlimited\n\n#\n# EnableMMAP and EnableSendfile: On systems that support it, \n# memory-mapping or the sendfile syscall may be used to deliver\n# files.  This usually improves server performance, but must\n# be turned off when serving from networked-mounted \n# filesystems or if support for these functions is otherwise\n# broken on your system.\n# Defaults: EnableMMAP On, EnableSendfile Off\n#\n#EnableMMAP off\n#EnableSendfile on\n\n# Load config files from the config directory \"/etc/apache2/conf.d\".\n#\nIncludeOptional /etc/apache2/conf.d/*.conf\n",
    "index.php": "<?php\nsession_start(); \n?>\n<!DOCTYPE html>\n<html>\n<head>\n  <title>React! </title>\n  <link href=\"https://unpkg.com/nes.css@2.3.0/css/nes.min.css\" rel=\"stylesheet\" />\n  <link href=\"https://fonts.googleapis.com/css?family=Press+Start+2P\" rel=\"stylesheet\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\"></link>\n  <script\n          src=\"https://code.jquery.com/jquery-3.1.1.min.js\"\n          integrity=\"sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=\"\n          crossorigin=\"anonymous\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.js\"></script>\n  <style>\n    body {\n\n      font-size:12pt;\n    }\n    html, body, pre, code, kbd, samp {\n        font-family: \"Press Start 2P\";\n    }\n  </style>\n</head>\n<body>\n  <?php\n    if (isset($_SESSION['message']) && $_SESSION['message'])\n    {\n      printf('\n      <dialog class=\"nes-dialog\"  style=\"z-index:2;transform: translateY(30px);\" open>\n        <form method=\"dialog\">\n          <p>%s</p>\n          <menu class=\"dialog-menu\">\n            <button class=\"nes-btn is-primary\">OK</button>\n          </menu>\n        </form>\n      </dialog>\n      ', $_SESSION['message']);\n      unset($_SESSION['message']);\n    }\n  ?>\n  <div class=\"ui container\" style=\"padding-top: 2%\">\n  <form method=\"POST\" action=\"upload.php\" enctype=\"multipart/form-data\">\n      <span>Upload your reaction images for storage in our high security server.  Never lose a meme again! </span>\n    <div style=\"display:inline\">\n\n      <label class=\"nes-btn\">\n        <span>Select your file</span>\n            <input type=\"file\"  name=\"uploadedFile\" />\n      </label>\n      <input type=\"submit\" name=\"uploadBtn\" class=\"nes-btn is-success\" value=\"Upload\" />\n      <a href=\"uploads/\" class=\"nes-btn is-primary\">Uploaded Files</a>\n    </div>\n\n\n  </form>\n</div>\n</body>\n</html>\n\n",
    "problem.json": "{\n  \"name\": \"uphpload\",\n  \"category\": \"Web\",\n  \"description\": \"I made a website to collect reaction images, feel free to upload some!\",\n  \"score\" : 100,\n  \"hints\": [\"\"],\n  \"walkthrough\": \"N/A\",\n  \"author\": \"Matthew Le\",\n  \"organization\": \"TAMUctf\",\n  \"event\": \"TAMUctf\"\n}\n\n",
    "README.md": "## Description\n\nI made a website to collect reaction images, feel free to upload some!\n(provide them the ip, if you're following the setup to test the challgenge it would be the ip of the machine running the docker container)\n\n### Setup\n\n1. docker build . -t revshl\n2. docker run -p 80:80 revshl\n\nthis is an instanced challenge -- we'll try using Pico's instanced docker challenge type\n\n## Solution\n\n`gigem{R3vER5e_R3ver5e!}`\n\nI downloaded a php reverse shell off the internet, named it revshell.png.php, and navigated to that location in the uploads directory.  File extension is calculated by splitting the filename by a period and then comparing filename[1] to an array of allowed file extensions.  png.php passes that but is still a PHP file so Apache will execute code for us.  \n",
    "start.sh": "while :\ndo\n\thttpd -D FOREGROUND\ndone",
    "upload.php": "<?php\nsession_start();\n\n$message = ''; \nif (isset($_POST['uploadBtn']) && $_POST['uploadBtn'] == 'Upload')\n{\n  if (isset($_FILES['uploadedFile']) && $_FILES['uploadedFile']['error'] === UPLOAD_ERR_OK)\n  {\n    // get details of the uploaded file\n    $fileTmpPath = $_FILES['uploadedFile']['tmp_name'];\n    $fileName = $_FILES['uploadedFile']['name'];\n    $fileSize = $_FILES['uploadedFile']['size'];\n    $fileType = $_FILES['uploadedFile']['type'];\n    $fileNameCmps = explode(\".\", $fileName);\n    $fileExtension = strtolower($fileNameCmps[1]);\n\n    // sanitize file-name\n    // $newFileName = md5(time() . $fileName) . '.' . $fileExtension;\n\n    // check if file has one of the following extensions\n    $allowedfileExtensions = array('jpg', 'gif', 'png', 'jpeg');\n\n    if (in_array($fileExtension, $allowedfileExtensions))\n    {\n      // directory in which the uploaded file will be moved\n      $uploadFileDir = './uploads/';\n      // $dest_path = $uploadFileDir . $newFileName;\n      $dest_path = $uploadFileDir . $fileName;\n\n      if(move_uploaded_file($fileTmpPath, $dest_path)) \n      {\n        $message ='File is successfully uploaded! find it in /uploads';\n\t\n      }\n      else \n      {\n        $message = 'There was some error moving the file to upload directory. Please make sure the upload directory is writable by web server.';\n      }\n    }\n    else\n    {\n      $message = 'Upload failed. Allowed file types: ' . implode(',', $allowedfileExtensions);\n    }\n  }\n  else\n  {\n    $message = 'There is some error in the file upload. Please check the following error.<br>';\n    $message .= 'Error:' . $_FILES['uploadedFile']['error'];\n  }\n}\n$_SESSION['message'] = $message;\nheader(\"Location: index.php\");\n\n",
    "uploads\\delet.jpg": "[Binary file or unsupported type: jpg]",
    "uploads\\EEEH.png": "[Binary file or unsupported type: png]",
    "uploads\\feb14.jpg": "[Binary file or unsupported type: jpg]",
    "uploads\\head_empty.png": "[Binary file or unsupported type: png]",
    "uploads\\me.jpg": "[Binary file or unsupported type: jpg]",
    "category": "web"
}