{
    "Covfefe.class": "[Binary file or unsupported type: class]",
    "README.md": "# Covfefe\n\n## Description\n\nThis one might require a nice hot cup of Java to get through.\n\n## Solution\nApparently, Ghidra supports .class files, so I took the decompiled output, cleaned it up a bit, then printed the buffer that it modified. \n```c\n#include <stdlib.h>\n#include <stdio.h>\n\nint main(void) {\n    double dVar1;\n    int iVar2;\n    char* piVar3 = calloc(0x24, 1);\n    int iVar4;\n    int iVar5;\n    char* piVar6;\n    int iVar7;\n    char* piVar8;\n    int iVar9;\n    char* piVar10;\n    int iVar11;\n    char* piVar12;\n\n    iVar2 = 0x23;\n    piVar3[0] = 0x67;\n    piVar3[1] = piVar3[0] + 2;\n    piVar3[2] = piVar3[0];\n    for (iVar4 = 3; iVar4 < 8; iVar4 = iVar4 + 1) {\n        switch(iVar4) {\n            case 3:\n                piVar3[iVar4] = 0x65;\n                break;\n            case 4:\n                piVar3[6] = 99;\n                break;\n            case 5:\n                piVar3[5] = 0x7b;\n                break;\n            case 6:\n                piVar3[iVar4 + 1] = 0x30;\n                break;\n            case 7:\n                piVar3[4] = 0x6d;\n        }\n    }\n    piVar3[8] = 0x66;\n    piVar3[9] = piVar3[8];\n    iVar4 = piVar3[7];\n    piVar3[0x1c] = iVar4;\n    piVar3[0x19] = iVar4;\n    piVar3[0x18] = iVar4;\n    piVar3[10] = 0x33;\n    piVar3[0xb] = piVar3[10];\n    iVar11 = 0xc;\n    iVar9 = 0xf;\n    iVar7 = 0x16;\n    iVar5 = 0x1b;\n    iVar4 = piVar3[0];\n    piVar6 = piVar3;\n    piVar12 = piVar3;\n    piVar8 = piVar3;\n    piVar10 = piVar3;\n    // Math.pow(2.0,3.0)\n    dVar1 = 8;\n    iVar4 = iVar4 - dVar1;\n    piVar6[iVar5] = iVar4;\n    piVar8[iVar7] = iVar4;\n    piVar10[iVar9] = iVar4;\n    piVar12[iVar11] = iVar4;\n    piVar3[0xd] = 0x31;\n    piVar3[0xe] = 0x73;\n    for (iVar4 = 0x10; iVar4 < 0x16; iVar4 = iVar4 + 1) {\n        switch(iVar4) {\n            case 0x10:\n                piVar3[iVar4 + 1] = 0x6c;\n                break;\n            case 0x11:\n                piVar3[iVar4 + -1] = 0x34;\n                break;\n            case 0x12:\n                piVar3[iVar4 + 1] = 0x34;\n                break;\n            case 0x13:\n                piVar3[iVar4 + -1] = 0x77;\n                break;\n            case 0x14:\n                piVar3[iVar4 + 1] = 0x73;\n                break;\n            case 0x15:\n                piVar3[iVar4 + -1] = 0x79;\n        }\n    }\n    piVar3[0x17] = 0x67;\n    piVar3[0x1a] = piVar3[0x17] + -3;\n    piVar3[0x1d] = piVar3[0x1a] + 0x14;\n    piVar3[0x1e] = piVar3[0x1d] % 0x35 + 0x35;\n    piVar3[0x1f] = piVar3[0] + -0x12;\n    piVar3[0x20] = 0x50;\n    piVar3[0x21] = 0x53;\n    iVar2 = iVar2 + -1;\n    // Math.pow(5.0,3.0)\n    dVar1 = 125;\n    // piVar3[iVar2] = SUB84(ROUND(dVar1),0);\n    piVar3[iVar2] = dVar1;\n    piVar3[0x24 - 1] = 0;\n    puts(piVar3);\n    return 0;\n}\n```\nFlag: gigem{c0ff33_1s_4lw4ys_g00d_0xCUPS}\n",
    "category": "reversing"
}