{
    "challenge.py": "from hacksport.operations import execute\nfrom hacksport.problem import Challenge, File, Compiled\n\nclass Problem(Compiled):\n    files = [File(\"flag.enc\")]\n    compiler_sources = [\"simple_cipher.c\"]\n    program_name = \"simple_cipher\"\n\n    def generate_flag(self, random):\n        return r\"gigem{d0n7_wr173_y0ur_0wn_c1ph3r5}\"\n",
    "encrypt.sh": "gcc simple_cipher.c -o simple_cipher;\n./simple_cipher $(cat flag.txt) > flag.enc;",
    "flag.enc": "[Binary file or unsupported type: enc]",
    "flag.txt": "gigem{d0n7_wr173_y0ur_0wn_c1ph3r5}",
    "Makefile": "CC := $(or $(CC),gcc)\nall: simple_cipher\n\nclean: .PHONY\n\trm -f simple_cipher\n\nsimple_cipher: simple_cipher.c\n\t$(CC) $(CFLAGS) $^ -o $@\n\n.PHONY:\n",
    "problem.json": "{\n  \"name\": \"simple_cipher\",\n  \"category\": \"Reversing\",\n  \"description\": \"We have a flag encrypted using this program. Can you figure out what it is? {{url_for('simple_cipher')}} {{url_for('flag.enc')}}\",\n  \"score\" : 150,\n  \"hints\": [\"\"],\n  \"walkthrough\": \"check our github or something\",\n  \"author\": \"Teddy Heinen\",\n  \"organization\": \"TAMUctf\",\n  \"event\": \"TAMUctf 2021\"\n}\n",
    "README.md": "# simple_cipher\n\n## Description\n\nWe have a flag encrypted using this program.  Can you figure out what it is?  \n\n## Solution\n\n`gigem{d0n7_wr173_y0ur_0wn_c1ph3r5}`\n\n1. Open in Ghidra.\n2. Browse to main using the function search.\n3. Retype, rename variables for clarity:\n\nOriginal:\n\n![figur\u00eb](https://media.github.tamu.edu/user/4480/files/29480880-1ff4-11eb-9089-5251fd7dc468)\n\nPost:\n\n![figur\u00eb](https://media.github.tamu.edu/user/4480/files/54325c80-1ff4-11eb-94c2-4027a19f16c2)\n\n4. Select > Function, File > Export Program > C/C++ > Selection Only (this tacks in all the types we need to compile)\n5. Add stdio.h, stdlib.h, and string.h headers\n6. Swap pos offset:\n\n![figur\u00eb](https://media.github.tamu.edu/user/4480/files/eaff1900-1ff4-11eb-8bf0-58b8367bf3a9)\n\n7. Compile and run:\n\n![figur\u00eb](https://media.github.tamu.edu/user/4480/files/2863a680-1ff5-11eb-8acd-f99b9663e236)\n\n8. Profit\n",
    "simple_cipher.c": "#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\n\n\nint main(int argc, char** argv) {\n\tif(argc < 2) {\n\t\tprintf(\"./simple_cipher <plaintext>\\n\");\n\t\texit(1);\n\t}\n\tint len = strlen(argv[1]);\n\tchar* encrypted = malloc(len);\n\n\tsrand(0x1337);\n\n\tfor(int i = 0; i < len; i++) {\n\t\tencrypted[i] = (argv[1][(i + 15) % len] ^ rand() ^ rand()) % 256;\n\t}\n\tprintf(\"%s\", encrypted);\n\tfree(encrypted);\n}",
    "solve.py": "from ctypes import *\nfrom string import printable \n\nlibc = libc = CDLL(\"libc.so.6\")\n\nlibc.srand(0x1337)\n\nencrypted = open(\"flag.enc\",\"rb\").read()\n\nflag = ['' for x in range(34)]\n\n\nfor i in range(34):\n\tidx = (i + 15) % 34\n\tr1 = libc.rand()\n\tr2 = libc.rand()\n\tfor j in printable:\n\t\tif (ord(j) ^ r1 ^ r2) % 256 == encrypted[i]:\n\t\t\tflag[idx] = j\n\nprint(\"\".join(flag))\n",
    "category": "reversing"
}