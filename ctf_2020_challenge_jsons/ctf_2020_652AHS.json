{
    "Dockerfile": "FROM alpine\n\nRUN apk --no-cache add socat python3\n\nRUN addgroup ctf\n\nRUN mkdir /crypto\n\nRUN adduser --disabled-password -G ctf --home=/crypto cryptouser\n\nCOPY server.py /crypto/server.py\nCOPY flag.txt /crypto/flag.txt\nCOPY start.sh /crypto/start.sh\nCOPY questions.txt /crypto/questions.txt\nCOPY security_hashes.txt /crypto/security_hashes.txt\nCOPY password_hash.txt /crypto/password_hash.txt\nCOPY flag.txt /crypto/flag.txt\n\nRUN chown -R cryptouser /crypto\nRUN chmod -R 777 /crypto\n\nEXPOSE 7393\n\nENTRYPOINT [\"/crypto/start.sh\"]\n",
    "flag.txt": "gigem{t1ck_t0cK_toCk_t111ck_tiCK_tockk}\n",
    "password_hash.txt": "089542505d659cecbb988bb5ccff5bccf85be2dfa8c221359079aee2531298bb\n",
    "questions.txt": "Does pineapple belong on pizza?\nDo you read for fun?\nAre you scared of the dark?\nDo you like tea?\nIs Coke better than Pepsi?\nAre parrots more fun than chimpanzees?\nIs December your favorite month?\nHave you ever seen the rain?\nWould you rather fight one hundred duck-sized horses than one horse-sized duck?\nIs it ever okay to lie?\nHave you ever been in an earthquake?\nDo you sleep on your side?\nHave you traveled outside of the country?\nIs Star Wars better than Star Trek?\nAre long nights better than early mornings?\nDo you prefer your water with ice?\nIs happiness a choice?\nAre a few close friends better than many average friends?\nDo you have kids?\nIs it better to be bold or welcoming?\n",
    "README.md": "# 652AHS\n\n```text\nAdam the admin spent awhile writing a really nifty Python server to do admin things. He protected it with state of the art cryptography.\n\nnc <host-ip> 7393\n<insert-script-download-link>\n```\n\n## Setup\n\n1. `docker build -t 652ahs .`\n2. `docker run --rm -p 7393:7393 -d 652ahs`\n\n## Brief Dev Description\n\nA Python server running over socat which has password reset feature to be exploited. The flag is printed after one successfully logs in with a password that has been updated.\n\n## Solution\n\nSee `solver.py`. It's a rather simple timing based attack, since correct answers take longer to get a response than incorrect answers.\n\n",
    "security_hashes.txt": "1ea442a134b2a184bd5d40104401f2a37fbc09ccf3f4bc9da161c6099be3691d\n1ea442a134b2a184bd5d40104401f2a37fbc09ccf3f4bc9da161c6099be3691d\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n1ea442a134b2a184bd5d40104401f2a37fbc09ccf3f4bc9da161c6099be3691d\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n1ea442a134b2a184bd5d40104401f2a37fbc09ccf3f4bc9da161c6099be3691d\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n1ea442a134b2a184bd5d40104401f2a37fbc09ccf3f4bc9da161c6099be3691d\n1ea442a134b2a184bd5d40104401f2a37fbc09ccf3f4bc9da161c6099be3691d\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n1ea442a134b2a184bd5d40104401f2a37fbc09ccf3f4bc9da161c6099be3691d\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n1ea442a134b2a184bd5d40104401f2a37fbc09ccf3f4bc9da161c6099be3691d\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n1ea442a134b2a184bd5d40104401f2a37fbc09ccf3f4bc9da161c6099be3691d\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n85a39ab345d672ff8ca9b9c6876f3adcacf45ee7c1e2dbd2408fd338bd55e07e\n",
    "server.py": "import random\nimport hashlib\n\n'''\nEncrypt plaintext using SHA-256\n'''\ndef encrypt(plaintext):\n    # sha256\n    return hashlib.sha256(plaintext.encode()).hexdigest()\n\n'''\nChecks that plaintext hashes to ciphertext\n'''\ndef check(plaintext, ciphertext, redundancy_check=100000):\n    good = True\n\n    # needed to make sure cosmic rays haven't flipped any bits\n    for x in range(redundancy_check):\n        good = good and (encrypt(plaintext) == ciphertext)\n        if not good:\n            return good\n\n    return good\n\n'''\nMain menu\n'''\ndef print_menu():\n    print('Welcome admin. Select an option:\\n')\n    print('\\t1. Enter password')\n    print('\\t2. Reset password')\n    print('\\t3. Exit')\n\n'''\nAdmin login\n'''\ndef login():\n    print('-------------------------')\n    print('          Login          ')\n    print('-------------------------')\n\n    password = input('Password: ')\n\n    with open('password_hash.txt', 'r') as pwfile:\n        pw_hash = pwfile.readline().rstrip()\n        if check(password, pw_hash):\n            print('Welcome admin!')\n        else:\n            print('Incorrect password.') # :(\n\n'''\nReset admin password using security questions\n'''\ndef reset():\n    print('--------------------------')\n    print('      Password Reset      ')\n    print('--------------------------')\n\n    print('Please answer the following yes/no security questions to prove your identity. Type either \"Yes\" or \"No\" for each (without quotation marks).')\n    questions = open('questions.txt', 'r').readlines()\n\n    with open('security_hashes.txt', 'r') as securityfile:\n        good = True\n        for q in questions:\n            answer = input(q)\n            answer_hash = securityfile.readline().rstrip()\n            good = good and check(answer, answer_hash)\n\n        if good:\n            new_pw = input('New password:\\n')\n\n            with open('flag.txt', 'r') as flagfile:\n                print(flagfile.readline()) # :)\n                exit()\n            with open('password_hash.txt', 'w') as pwfile:\n                pwfile.write(encrypt(new_pw))\n        else:\n            # incorrect\n            print('You\\'re not who you say you are.') # :(\n\n\n# what more could an admin want?\noptions = [login, reset, exit]\ndef run_server():\n    while True:\n        print_menu()\n        option = int(input())\n        options[option-1]() # sneak\n\nif __name__ == '__main__':\n    # let's run the server!\n    run_server()\n\n\n",
    "solver.py": "from pwn import *\nimport time\n\nans = []\nr = remote('172.17.0.2', 7393)\nwhile len(ans) < 20:\n    print(ans)\n    # try yes\n    print('Trying yes...')\n    r.recvuntil(\"Exit\\n\")\n    r.sendline('2')\n    r.recvuntil('.\\n')\n\n    for i in range(len(ans)):\n        r.recvline()\n        r.sendline(ans[i])\n\n    r.recvline()\n    syes = time.time()\n    r.sendline(\"Yes\")\n    resp = r.recvline()\n    tyes = time.time() - syes\n\n    for i in range(len(ans)+2, 21):\n        if i != len(ans)+2:\n            r.recvline()\n        r.sendline(\"No\")\n\n    if resp.startswith(bytes(\"New\", 'ascii')):\n        ans.append(\"Yes\")\n        break\n\n    r.close()\n    time.sleep(.05)\n\n    # try no\n    print('Trying no...')\n    r = remote('172.17.0.2', 7393)\n    r.recvuntil(\"Exit\\n\")\n    r.sendline('2')\n    r.recvuntil('.\\n')\n\n    for i in range(len(ans)):\n        r.recvline()\n        r.sendline(ans[i])\n\n    r.recvline()\n    sno = time.time()\n    r.sendline(\"No\")\n    resp = r.recvline()\n    tno = time.time() - sno\n\n    for i in range(len(ans)+2, 21):\n        if i != len(ans)+2:\n            r.recvline()\n        r.sendline(\"No\")\n\n    if resp.startswith(bytes(\"New\", 'ascii')):\n        ans.append(\"No\")\n        break\n\n    r.close()\n    time.sleep(.05)\n\n    r = remote('172.17.0.2', 7393)\n    if tyes > tno:\n        ans.append(\"Yes\")\n    else:\n        ans.append(\"No\")\n\n\nr.interactive()\n\n",
    "solver.rs": "use std::io::prelude::*;\nuse std::net::TcpStream;\nuse std::io::BufReader;\nuse std::io::LineWriter;\nuse std::error::Error;\nuse std::time::Instant;\n\nfn answer_questions(reader: &mut BufReader<&TcpStream>, writer: &mut LineWriter<&TcpStream>, results: &mut [u128], answers: &[&[u8]]) -> Result<(), Box<dyn Error>> {\n    let mut line = String::new();\n    results.iter_mut().map(|x| *x = 0).count();\n\n    // clear the existing results\n    for _ in 0..5 {\n        reader.read_line(&mut line)?;\n    }\n    line.clear();\n\n    writer.write_all(\"2\\n\".as_bytes())?;\n\n    for _ in 0..4 {\n        reader.read_line(&mut line)?;\n        line.clear();\n    }\n\n    reader.read_line(&mut line)?;\n    for i in 0..20usize {\n        line.clear();\n        writer.write_all(answers[i])?;\n        let now = Instant::now();\n        reader.read_line(&mut line)?;\n        let time = now.elapsed().as_micros();\n        results[i] += time;\n    }\n    println!(\"{}\", line.trim());\n    Ok(())\n}\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let stream = TcpStream::connect(\"172.17.0.2:7393\")?;\n    let mut reader = BufReader::new(&stream);\n    let mut writer = LineWriter::new(&stream);\n    let mut answers = [\"No\\n\".as_bytes(); 20];\n    let mut results = [0; 20];\n\n    answer_questions(&mut reader, &mut writer, &mut results, &[\"No\\n\".as_bytes(); 20])?;\n    let no = results[0];\n    answer_questions(&mut reader, &mut writer, &mut results, &[\"Yes\\n\".as_bytes(); 20])?;\n\n    let baseline_split = (no + results[0]) / 2;\n\n    let mut index = 0usize;\n    let mut results = [0; 20];\n    while index < answers.len() {\n        answer_questions(&mut reader, &mut writer, &mut results, &answers)?;\n        while index < answers.len() && baseline_split < results[index] {\n            index += 1;\n        }\n        if index == answers.len() {\n            break;\n        }\n        answers[index] = \"Yes\\n\".as_bytes();\n        println!(\"Current results: {:?}\", results)\n    }\n\n    writer.write_all(\"lmao\\n\".as_bytes())?;\n    let mut line = String::new();\n    reader.read_line(&mut line)?;\n    println!(\"{}\", line.trim());\n\n    Ok(())\n}\n",
    "start.sh": "#!/bin/sh\n\nwhile : \ndo\n    su -c \"exec socat TCP-LISTEN:7393,reuseaddr,fork EXEC:\\\"python3 /crypto/server.py\\\",stderr\" - cryptouser;\ndone\n",
    "category": "Crypto"
}