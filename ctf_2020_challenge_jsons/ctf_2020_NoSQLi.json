{
    ".gitlab-ci.yml": "image: messy/nosql:latest\n\ntest:\n  script:\n    - \"./tests/entry.sh\"\n",
    "db.js": "const assert = require(\"assert\");\nconst client = require(\"mongodb\").MongoClient;\n\nlet _db;\n\nmodule.exports = {\n    getDb,\n    initDb\n};\n\nfunction initDb(callback) {\n    if (_db) {\n        console.warn(\"Trying to init DB again!\");\n        return callback(null, _db);\n    }\n\n    client.connect('mongodb://localhost:27017',  { useNewUrlParser: true },  connected);\n\n    function connected(err, db) {\n        if (err) {\n            return callback(err);\n        }\n        console.log(\"DB initialized - connected to: \" );\n        _db = db;\n        return callback(null, _db);\n    }\n}\n\nfunction getDb() {\n    assert.ok(_db, \"Db has not been initialized. Please called init first.\");\n    return _db;\n}\n\n",
    "Dockerfile": "FROM ubuntu:latest\n\nCOPY db.js .\nCOPY server.js .\nCOPY index.html .\n\nRUN mkdir -p /data/db\nRUN apt update && apt install -y nodejs npm python-pip\nRUN pip install pika\nRUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4\nRUN echo \"deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse\" | tee /etc/apt/sources.list.d/mongodb-org-4.0.list\nRUN apt update\nRUN export DEBIAN_FRONTEND=noninteractive && apt install -y mongodb-org\nRUN ln -fs /usr/share/zoneinfo/America/Chicago /etc/localtime\nRUN dpkg-reconfigure --frontend noninteractive tzdata\nRUN npm install express mongodb\n\n",
    "index.html": "<html>\n    <head>\n    <title>TAMUctf</title>\n    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n    <style class=\"cp-pen-styles\">@import url(https://fonts.googleapis.com/css?family=Roboto:300);\n\n    .login-page {\n      width: 360px;\n      padding: 8% 0 0;\n      margin: auto;\n    }\n    .form {\n      position: relative;\n      z-index: 1;\n      background: #FFFFFF;\n      max-width: 360px;\n      margin: 0 auto 100px;\n      padding: 45px;\n      text-align: center;\n      box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);\n    }\n    .form input {\n      font-family: \"Roboto\", sans-serif;\n      outline: 0;\n      background: #f2f2f2;\n      width: 100%;\n      border: 0;\n      margin: 0 0 15px;\n      padding: 15px;\n      box-sizing: border-box;\n      font-size: 14px;\n    }\n    .form button {\n      font-family: \"Roboto\", sans-serif;\n      text-transform: uppercase;\n      outline: 0;\n      background: #4CAF50;\n      width: 100%;\n      border: 0;\n      padding: 15px;\n      color: #FFFFFF;\n      font-size: 14px;\n      -webkit-transition: all 0.3 ease;\n      transition: all 0.3 ease;\n      cursor: pointer;\n    }\n    .form button:hover,.form button:active,.form button:focus {\n      background: #43A047;\n    }\n    .form .message {\n      margin: 15px 0 0;\n      color: #b3b3b3;\n      font-size: 12px;\n    }\n    .form .message a {\n      color: #4CAF50;\n      text-decoration: none;\n    }\n    .form .register-form {\n      display: none;\n    }\n    .container {\n      position: relative;\n      z-index: 1;\n      max-width: 300px;\n      margin: 0 auto;\n    }\n    .container:before, .container:after {\n      content: \"\";\n      display: block;\n      clear: both;\n    }\n    .container .info {\n      margin: 50px auto;\n      text-align: center;\n    }\n    .container .info h1 {\n      margin: 0 0 15px;\n      padding: 0;\n      font-size: 36px;\n      font-weight: 300;\n      color: #1a1a1a;\n    }\n    .container .info span {\n      color: #4d4d4d;\n      font-size: 12px;\n    }\n    .container .info span a {\n      color: #000000;\n      text-decoration: none;\n    }\n    .container .info span .fa {\n      color: #EF3B3A;\n    }\n    body {\n      background: #76b852; /* fallback for old browsers */\n      background: -webkit-linear-gradient(right, #76b852, #8DC26F);\n      background: -moz-linear-gradient(right, #76b852, #8DC26F);\n      background: -o-linear-gradient(right, #76b852, #8DC26F);\n      background: linear-gradient(to left, #76b852, #8DC26F);\n      font-family: \"Roboto\", sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;      \n    }</style>\n    </head>\n    <div class=\"login-page\">\n      <div class=\"form\">\n        <form class=\"register-form\">\n          <input type=\"text\" placeholder=\"name\"/>\n          <input type=\"password\" placeholder=\"password\"/>\n          <input type=\"text\" placeholder=\"email address\"/>\n          <button>create</button>\n        </form>\n        <form class=\"login-form\">\n          <input id=\"username\" type=\"text\" placeholder=\"username\"/>\n          <input id=\"password\" type=\"password\" placeholder=\"password\"/>\n          <button id=\"submit\">login</button>\n        </form>\n      </div>\n    </div>\n\n    <script>\n        $(\"#submit\").on('click', function(){\n            $.ajax({\n                url: 'login', \n                type : \"POST\", \n                dataType : 'json', \n                data : JSON.stringify({\"username\": $(\"#username\").val(), \"password\": $(\"#password\").val()}),\n                contentType: 'application/json;charset=UTF-8',\n                success : function(result) {\n                    $(\".result\").html(result);\n                    console.log(result);\n                    alert(result);\n                },\n                error: function(xhr, resp, text) {\n                    $(\".result\").html(\"Something went wrong\"); \n                    console.log(xhr, resp, text);\n                }\n            })\n        });\n    </script>\n\n    </body>\n</html>\n",
    "nosql.py": "from .. import ServiceFrame\nimport requests\nimport structlog\nimport docker\n\nlogger = structlog.get_logger()\n\nclass ServiceCheck(ServiceFrame.ServiceFrame):\n    def __init__(self, serviceInfo):\n        ServiceFrame.ServiceFrame.__init__(self, serviceInfo)\n        self.flag = \"gigem{3y3_SQL_n0w_6b95d3035a3755a}\"\n\n    def checkService(self):\n        msg = \"ServiceCheck Started\"\n        logger.info(\"nosql_server\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n        try:\n            url = 'http://{}:{}/'.format(self.serviceInfo.serviceHost,self.serviceInfo.servicePort)\n            index = requests.get(url)\n            if '<title>TAMUctf</title>' not in index.text:\n                msg = 'Failed ServiceCheck: {}'.format(index.text)\n                logger.info(\"flask_server\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n                return False\n\n            data = {\"username\": \"admin\", \"password\": \"945IYMib!u@u\"}\n            login = requests.post(url + \"login\", json=data) \n\n            if 'Login Failed' in login.text:\n                msg = 'Failed ServiceCheck'\n                logger.info(\"nosql_server\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n                return False\n\n            msg = 'Passed ServiceCheck'\n            logger.info(\"nosql_server\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n\n            return True\n\n        except Exception as e:\n            msg = 'Failed ServiceCheck: {}'.format(e)\n            logger.info(\"nosql_server\", msg=msg, serviceInfo=self.serviceInfo.__dict__)\n            return False\n\n    def getLogs(self):\n        client = docker.from_env(version=\"auto\")\n        container = client.containers.get(self.serviceInfo.serviceName)\n        return container.logs()\n",
    "nosql_exploit.py": "\nfrom ExploitFrame import ExploitFrame\nimport requests\nimport structlog\n\nlogger = structlog.get_logger()\n\nclass Exploit(ExploitFrame):\n    def __init_(self, serviceInfo):\n        self.name = 'nosql_exploit'\n        self.output = None\n        ExploitFrame.__init__(self, serviceInfo)\n\n    def exploit(self):\n        url = 'http://{}:{}/login'.format(self.serviceInfo.serviceHost,self.serviceInfo.servicePort)\n        data = {\"username\": \"admin\", \"password\": {\"$ne\": \"null\"}}\n\n        try:\n            exp = requests.post(url, json=data)\n            if 'Login Failed' in exp.text:\n                logger.info('Nosql Exploit', msg='Login Failed', serviceInfo=self.serviceInfo.__dict__)\n                self.output = False\n            else:\n                self.output = True\n\n        except Exception as e:\n            msg = \"Exploit crashed: {}\".format(e)\n            logger.info('Nosql Exploit', msg=msg, serviceInfo=self.serviceInfo.__dict__)\n            self.output = True\n\n    def exploitSuccess(self):\n        return self.output\n",
    "README.md": "# NoSQL Injection Secure Coding\n\nFix the NoSQL challenge\n\n## Setup\nMake sure in the file `/etc/gitlab-runner/config.toml` the line `pull_policy = \"if-not-present\"` is added under the `[runners.docker]` section.   \nBuild the docker image locally with `docker build -t messy/nosql .`  \nCopy `nosql_exploit.py` and `nosql.py` to their respective locations.\nAdd `'nosql_server': ('nosql_server', ['nosql_exploit'], ['nosql'], 4000)` to the config file.\n\n## Solution\nThe simplest solution is to modify `server.js` to change:\n```\n25 -            username: req.body.username,\n26 -            password: req.body.password \n25 +            username: req.body.username.toString(),\n26 +            password: req.body.password.toString()\n```\n",
    "server.js": "// server.js\n\nconst initDb = require(\"./db\").initDb;\nconst getDb = require(\"./db\").getDb;\nconst express = require('express');\nconst app = express();\nvar bodyParser = require('body-parser')\napp.use(bodyParser.json())\n\nvar path = require(\"path\");\n\nconst PORT = 4000;\n\ninitDb(function (err) {\n    app.get('/', function(req, res) {\n        res.sendFile(path.join(__dirname+'/index.html'));\n    });  \n\n    app.post('/login', function (req, res) {\n\n        const db = getDb();\n        c = db.db('test');\n    \n        var query = {\n            username: req.body.username,\n            password: req.body.password\n        }\n\n        c.collection('users').findOne(query, function (err, user) {\n            if(user == null) {\n                res.send(JSON.stringify(\"Login Failed\"))\n            }\n            else {\n                resp = \"Welcome: \" + user['username'] + \"!\";\n                res.send(JSON.stringify(resp));\n            }\n        });\n    });\n \n    app.listen(PORT, function (err) {\n        const db = getDb();\n\n        user = {username: 'bob', password: 'lVeYMg4U4$@L'}\n        admin = {username: 'admin', password: '945IYMib!u@u'}\n\n        c = db.db('test');\n        c.collection('users').insertOne(user)\n        c.collection('users').insertOne(admin)\n\n        if (err) {\n            throw err; //\n        }\n        console.log(\"Up and running on port \" + PORT);\n    });\n});\n",
    "tests\\entry.sh": "#!/bin/bash\n\nmongod --quiet 1>/dev/null &\nsleep 5s;\nnode server.js &\nsleep 2s;\npython tests/queue.py\n",
    "tests\\queue.py": "import pika\nimport json\nimport sys\nimport os\nimport socket\nimport binascii\n\ndef callback(ch, method, properties, body):\n    print body\n    ch.basic_ack(delivery_tag = method.delivery_tag)\n    sys.exit()\n    return\n\ncredentials = pika.PlainCredentials('guest', 'guest')\nparameters = pika.ConnectionParameters('172.17.0.2')\n\nconnection = pika.BlockingConnection(parameters)\nchannel = connection.channel()\nchannel.queue_declare(queue='attackQueue', durable=True)\n\n\nuserinfo = binascii.hexlify(os.urandom(32)).decode('ascii')\n\n#Stupid hack I found to get host ip\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\ns.connect((\"8.8.8.8\", 80))\nhostname = s.getsockname()[0]\nprint(hostname)\ns.close()\n\n# A lot of this I won't need anymore\nservice = {\n    'chal': 'nosql_server',\n    'userInfo': userinfo,\n    'serviceHost': hostname,\n}\n\nprint \"Pushing: {}\".format(service)\nchannel.basic_publish(exchange='',\n                      routing_key='attackQueue',\n                      body=json.dumps(service))\n\n\nconnection = pika.BlockingConnection(pika.ConnectionParameters('172.17.0.2'))\nuserChannel = connection.channel()\nuserChannel.exchange_declare(exchange='resultX')\nuserChannel.queue_declare(queue='resultQueue', durable=True)\n\n\nuserChannel.queue_bind(exchange='resultX',\n                       queue='resultQueue',\n                       routing_key=userinfo)\n\nuserChannel.basic_consume(callback, queue='resultQueue' )\nuserChannel.start_consuming()\n\nuserChannel.close()\n",
    "category": "Secure_Coding"
}