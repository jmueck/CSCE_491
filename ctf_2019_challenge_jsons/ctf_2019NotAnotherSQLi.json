{
    "db_gen.sh": "#start, set up mysql database\n#create user 'sqli-user' with permissions on\n#DATABASE: SqliDB;\n#one TABLE: login, two parameters in login: (user, password)\n#randomize password for root\nservice mysql start && mysql -uroot -e \"CREATE DATABASE SqliDB; CREATE USER 'sqli-user'@'localhost' IDENTIFIED BY 'AxU3a9w-azMC7LKzxrVJ^tu5qnM_98Eb'; GRANT ALL PRIVILEGES ON SqliDB.* TO 'sqli-user'@'localhost'; USE SqliDB; CREATE TABLE login (User varchar(20), Password varchar(100)); INSERT INTO login (User,Password) VALUES ('admin', 'tS&LjHue6Z&m*&JeTU#U%btyA8gmJXh'); INSERT INTO login (User,Password) VALUES ('bobsagget', 'password'); SET PASSWORD FOR root@'localhost' = PASSWORD('^wn=GBr^92@&wf+Ebq3w!CsTP4%Mr6+_')\";\n#run in background\napache2 -D FOREGROUND",
    "Dockerfile": "#pull latest ubuntu image\nFROM ubuntu:latest\n\n#sets cmdline interface as noninteractive for installing packages below\nenv DEBIAN_FRONTEND=\"noninteractive\"\n\n#set up php/mysql/apache and dependencies\nRUN apt-get -y update && apt-get install -y apache2 apache2-doc apache2-utils mysql-server php libapache2-mod-php php-mysql\n\n#set up files\nCOPY index.html /var/www/html/\nCOPY login.php /var/www/html/web/\nCOPY logo.png /var/www/html/images/\nCOPY db_gen.sh /db_gen.sh\n\n#set up environment for apache serv\nenv APACHE_RUN_USER    www-data\nenv APACHE_RUN_GROUP   www-data\nenv APACHE_PID_FILE    /var/run/apache2.pid\nenv APACHE_RUN_DIR     /var/run/apache2\nenv APACHE_LOCK_DIR    /var/lock/apache2\nenv APACHE_LOG_DIR     /var/log/apache2\n\n#allows running of file via changing permissions\nRUN chmod 700 /db_gen.sh\n\n\n#gives access to port 80\nEXPOSE 80\n\n#runs on boot of container\nENTRYPOINT [\"sh\",\"/db_gen.sh\"]\n",
    "index.html": "<html>\n\t<head>\n    <title>Central Authentication Service RC1.2</title>\n\t</head>\n\n\t<body bgcolor=\"#800000\">\n\t\t\t<h1 style=\"color:white\">Howdy!</h1>\n\t\t\t<img align = \"right\" src = \"/images/logo.png\" width=\"50%\">\n\n\t\t<div>\n\t\t\t<form action = \"/web/login.php\" method = \"POST\">\n\t\t   \t\t<p align=\"left\" style=\"color:white\">\n\t\t\tNetID: <br>\n\t\t\t<input type = \"text\" name = \"username\" align = \"justify\"/><br><br>\n\t\t   \t\tPassword: <br>\n\t\t\t<input type = \"password\" name = \"password\" align = \"justify\"/><br>\n\t\t\t</p>\n\t\t   \t\t<input type = \"submit\" value=\"Login\" />\n\t\t\t</form>\n\t\t</div>\n\t</body>\n</html>\n",
    "login.php": "<?php\n  ini_set('display_errors', 'On');\n  error_reporting(E_ALL | E_STRICT);\n\n  echo \"<html>\";\n  if (isset($_POST[\"username\"]) && isset($_POST[\"password\"])) {\n    $servername = \"localhost\";\n    $username = \"sqli-user\";\n    $password = 'AxU3a9w-azMC7LKzxrVJ^tu5qnM_98Eb';\n    $dbname = \"SqliDB\";\n\n\n    // Establish connection exists to mysql\n    $conn = new mysqli($servername, $username, $password, $dbname);\n    if ($conn->connect_error)\n        die(\"Connection failed: \" . $conn->connect_error);\n\n    // User and pass for index.html POST form, in plaintext\n    $user = $_POST['username'];\n    $pass = $_POST['password'];\n\n    // SQL query syntax checking for matching user/pass in table login\n    $sql = \"SELECT * FROM login WHERE User='$user' AND Password='$pass'\";\n    if ($result = $conn->query($sql)) // Actually starting sql query\n    {\n      if ($result->num_rows >= 1) // If matching rows found...\n      {\n        $row = $result->fetch_assoc(); \n        if ($row[\"User\"] == \"admin\") // If admin is matched in query\n          echo \"gigem{f4rm3r5_f4rm3r5_w3'r3_4ll_r16h7}!\";\n        else\n          echo \"You logged in as \" . $row[\"User\"];\n\n      }\n      else {\n        echo \"Sorry to say, that's invalid login info!\"; // Invalid login\n      }\n    }\n\n    $conn->close();\n  }\n  else\n    echo \"Must supply username and password...\";\n\n  echo \"</html>\";\n?>\n",
    "logo.png": "[Binary file or unsupported type: png]",
    "README.md": "### BASIC SQL CHALLENGE ###\n\nThis challenge sets up a Dockerized ubuntu image, which is then set up as a LAMP server,\nand runs a simple login php/mysql system which tests the challenger's knowledge of basic\nSQL injection.\n\n\n### INSTALLATION ###\n1.) sudo docker build -t websql .\n2.) sudo docker run websql\n\nNOTE: ServerName is not suppressed, so container will spit out what IP the site is at (for me it was 172.17.0.2)\n",
    "category": "Web"
}