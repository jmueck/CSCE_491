{
    "docker-compose.yml": "version: '2.4'\n\nx-limits: &limits\n    pids_limit: 1024\n    cpu_shares: 256\n    mem_limit: 512m\n    logging:\n        options:\n            max-size: 10m\n            max-file: '3'\n\nservices:\n    bob:\n        <<: *limits\n        build: ./bob\n        image: naumachia/aes.bob\n        restart: unless-stopped\n        hostname: bob\n        networks:\n            default:\n                ipv4_address: 172.30.0.2\n        restart: unless-stopped\n\n    alice:\n        <<: *limits\n        build: ./alice\n        image: naumachia/aes.alice\n        restart: unless-stopped\n        hostname: alice\n        depends_on:\n            - bob\n        networks:\n            default:\n                ipv4_address: 172.30.0.3\n        restart: unless-stopped\n\nnetworks:\n    default:\n        driver: l2bridge\n        ipam:\n            driver: static\n            config:\n                - subnet: 172.30.0.0/28\n",
    "README.md": "# AES Malleability\n\n## Challenge\n\nThis challenge involves having the player construct an encrypted telnet command that copies the flag file to a directory that can be seen.\n\n## Setup\nPlace the entire `aes_ecb` folder into the challenges folder for Naumachia. Add the appropriate lines to the Naumachia config:\n```\naes_ecb:\n    # [default: 1194] The exposed external port for this challenges OpenVPN server\n    port: 2000\n    # [required] The compose files to which define this challenge\n    # Paths should be relative to the challenges directory\n    files:\n        - aes_ecb/docker-compose.yml\n        - common/docker-compose.yml\n```\n\n## Solution\nThe solution requires a few steps.\n\n1. VPN into Naumachia environment\n2. Start ettercap ettercap -G\n3. Set to unified listen on tap0\n4. Scan for hosts\n5. Start wireshark\n6. Start arp spoofing in sniff remote connections mode\n7. Note the ip of \"bob\" and \"alice\"\n8. Capture at least one full conversation\n8. Stop arp spoofing\n9. Construct the command `cp flag.txt /logs` from the encrypted bytes (PoC in `attacker/attacker.py`)\n10. Send encrypted messages to telnet server\n11. Grab the flag from `<ip>:8080/flag.txt`\n",
    "alice\\client.py": "import asyncio, telnetlib3\nimport sys\nfrom Crypto.Cipher import AES\nimport hashlib\nfrom base64 import b64encode, b64decode\nimport os\nimport time\nimport random\nimport logging\n\nSERVER = 'bob'\nPORT = 6023\nSEED = 1234\n\nrandom.seed(SEED)\n\ndef pad(s):\n    return s + ('\\x00'*(16-(len(s)%16)))\n\n\n@asyncio.coroutine\ndef shell(reader, writer):\n\n    cmds = open('monitor.sh').read().split('\\n')\n    for cmd in cmds:\n        print(cmd)\n        cmd += '\\n'\n        for c in cmd:\n            print(hex(ord(c)))\n            sys.stdout.flush()\n            c = b64encode(cipher.encrypt(pad(c))).decode()\n            writer.write(c)\n            outp = yield from reader.read(24)\n            print(outp)\n            #print(len(b64decode(outp)))\n            sys.stdout.flush()\n            outp = cipher.decrypt(b64decode(outp)).decode().replace('\\x00', '')\n            #sys.stdout.write(outp)\n\n        outp = yield from reader.read(4096)\n        print(outp)\n        sys.stdout.flush()\n        try:\n            print(len(b64decode(outp)))\n            outp = cipher.decrypt(b64decode(outp)).decode().replace('\\x00', '')\n            print(outp)\n        except:\n            print(\"Failure in shell\")\n            print(outp)\n            sys.stdout.flush()\n            writer.close()\n            return\n\n    writer.close()\n    print()\n\nwhile True:\n    try:\n        m = hashlib.sha256()\n        m.update(str(random.random()).encode())\n        key = m.digest()[:16]\n        print(key)\n        key = b'Sixteen byte key'\n        cipher = AES.new(key, AES.MODE_ECB)\n\n        loop = asyncio.get_event_loop()\n        coro = telnetlib3.open_connection(SERVER, PORT, shell=shell)\n        r, w = loop.run_until_complete(coro)\n        loop.run_until_complete(w.protocol.waiter_closed)\n    except Exception as err:\n        logging.exception(\"Failure in main loop\")\n\n    time.sleep(30)\n",
    "alice\\Dockerfile": "FROM ubuntu:18.04\n\nRUN apt update && apt install -y python3-pip \nRUN pip3 install telnetlib3\n\nCOPY ./client.py .\nCOPY ./monitor.sh .\n\nENTRYPOINT [\"python3\", \"./client.py\"]\n",
    "alice\\monitor.sh": "ls -la\ndate > monitor.txt\necho \"=========================================\" >> monitor.txt\necho \"ps -aux\" >> monitor.txt\nps -aux >> monitor.txt\necho \"=========================================\" >> monitor.txt\necho \"df -h\" >> monitor.txt\ndf -h >> monitor.txt\ncp ./monitor.txt /logs\nexit\n",
    "attacker\\attacker.py": "import asyncio, telnetlib3\nimport sys\nimport time\n\nSERVER = \"172.25.0.2\"\nPORT = 6023\n\nenc_cmds = open('cmds.txt').read().split('==')\ncmds = open('../alice/monitor.sh').read()\ncmds = list(cmds)\n#print(cmds)\ncmd_mapping = {}\nfor ec, c in zip(enc_cmds, cmds):\n    if c not in cmd_mapping:\n        cmd_mapping[c] = ec + '=='\ncmds = [\ncmd_mapping['c'],\ncmd_mapping['p'],\ncmd_mapping[' '],\ncmd_mapping['.'],\ncmd_mapping['/'],\ncmd_mapping['f'],\ncmd_mapping['l'],\ncmd_mapping['a'],\ncmd_mapping['g'],\ncmd_mapping['.'],\ncmd_mapping['t'],\ncmd_mapping['x'],\ncmd_mapping['t'],\ncmd_mapping[' '],\ncmd_mapping['/'],\ncmd_mapping['l'],\ncmd_mapping['o'],\ncmd_mapping['g'],\ncmd_mapping['s'],\ncmd_mapping['\\n']\n]\nprint(cmds)\n@asyncio.coroutine\ndef shell(reader, writer):\n\n    for cmd in cmds:\n        print(cmd)\n        writer.write(cmd)\n        outp = yield from reader.read(24)\n        sys.stdout.write(outp)\n\n    outp = yield from reader.read(1024)\n    print(outp)\n    print('done')\n    writer.close()\n    print()\n\nwhile True:\n    #key = b'Sixteen byte key'\n    loop = asyncio.get_event_loop()\n    coro = telnetlib3.open_connection(SERVER, PORT, shell=shell)\n    r, w = loop.run_until_complete(coro)\n    loop.run_until_complete(w.protocol.waiter_closed)\n\n    time.sleep(1)\n\n\n\n",
    "attacker\\cmds.txt": "YiqMxpZQz+5dPf+qELowBw==US5MJOeTx6L69iQT3Y8B9g==83jbJmmZc/RUXML8GcGuVg==h8zZvECdaFr730Mgo5EgYQ==YiqMxpZQz+5dPf+qELowBw==RdGNIA97r2yYuQsdXjbQGA==S+79/0xJH6oVAqvGSE+Vlw==vCffRJyLzPpoDVYNvxEtoA==RdGNIA97r2yYuQsdXjbQGA==MufXoG4oKY+tLj7TNMzMtQ==9+fXRGjlf3TvpwR6XiqcSw==83jbJmmZc/RUXML8GcGuVg==bIyEa1uO0qUPR+sBqjAJ8g==83jbJmmZc/RUXML8GcGuVg==0bGyNN1VKjWCxituvKDVvg==/Ks7iNV5tZaZT32Epav0CA==KLVDOWDtxnck6THwQuPfGg==L2/wiXcz7QQyFdbuDe14+w==MufXoG4oKY+tLj7TNMzMtQ==/Ks7iNV5tZaZT32Epav0CA==MC9KVKLGfFmxvdr6qNuZpA==gCe+M22NmuwF6cPVKGGoZQ==MufXoG4oKY+tLj7TNMzMtQ==wJNrzltAAb7rg/64niXZNg==MufXoG4oKY+tLj7TNMzMtQ==S+79/0xJH6oVAqvGSE+Vlw==9+fXRGjlf3TvpwR6XiqcSw==XpjdNQ+r0XfWy25TW5lyAg==4iLXaYY1As8N9+wW+PVQOg==/Ks7iNV5tZaZT32Epav0CA==83jbJmmZc/RUXML8GcGuVg==WSThaqht6loKlvNDraoarw==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==WSThaqht6loKlvNDraoarw==83jbJmmZc/RUXML8GcGuVg==bIyEa1uO0qUPR+sBqjAJ8g==bIyEa1uO0qUPR+sBqjAJ8g==83jbJmmZc/RUXML8GcGuVg==0bGyNN1VKjWCxituvKDVvg==/Ks7iNV5tZaZT32Epav0CA==KLVDOWDtxnck6THwQuPfGg==L2/wiXcz7QQyFdbuDe14+w==MufXoG4oKY+tLj7TNMzMtQ==/Ks7iNV5tZaZT32Epav0CA==MC9KVKLGfFmxvdr6qNuZpA==gCe+M22NmuwF6cPVKGGoZQ==MufXoG4oKY+tLj7TNMzMtQ==wJNrzltAAb7rg/64niXZNg==MufXoG4oKY+tLj7TNMzMtQ==S+79/0xJH6oVAqvGSE+Vlw==9+fXRGjlf3TvpwR6XiqcSw==XpjdNQ+r0XfWy25TW5lyAg==4iLXaYY1As8N9+wW+PVQOg==/Ks7iNV5tZaZT32Epav0CA==83jbJmmZc/RUXML8GcGuVg==WSThaqht6loKlvNDraoarw==lwzGU75ZfX1C+vFQE1ahTQ==US5MJOeTx6L69iQT3Y8B9g==83jbJmmZc/RUXML8GcGuVg==h8zZvECdaFr730Mgo5EgYQ==RdGNIA97r2yYuQsdXjbQGA==mJoY/dqOlVLjsIzq/ZmGbg==wJNrzltAAb7rg/64niXZNg==WSThaqht6loKlvNDraoarw==83jbJmmZc/RUXML8GcGuVg==bIyEa1uO0qUPR+sBqjAJ8g==bIyEa1uO0qUPR+sBqjAJ8g==83jbJmmZc/RUXML8GcGuVg==0bGyNN1VKjWCxituvKDVvg==/Ks7iNV5tZaZT32Epav0CA==KLVDOWDtxnck6THwQuPfGg==L2/wiXcz7QQyFdbuDe14+w==MufXoG4oKY+tLj7TNMzMtQ==/Ks7iNV5tZaZT32Epav0CA==MC9KVKLGfFmxvdr6qNuZpA==gCe+M22NmuwF6cPVKGGoZQ==MufXoG4oKY+tLj7TNMzMtQ==wJNrzltAAb7rg/64niXZNg==MufXoG4oKY+tLj7TNMzMtQ==S+79/0xJH6oVAqvGSE+Vlw==lwzGU75ZfX1C+vFQE1ahTQ==US5MJOeTx6L69iQT3Y8B9g==83jbJmmZc/RUXML8GcGuVg==h8zZvECdaFr730Mgo5EgYQ==RdGNIA97r2yYuQsdXjbQGA==mJoY/dqOlVLjsIzq/ZmGbg==wJNrzltAAb7rg/64niXZNg==83jbJmmZc/RUXML8GcGuVg==bIyEa1uO0qUPR+sBqjAJ8g==bIyEa1uO0qUPR+sBqjAJ8g==83jbJmmZc/RUXML8GcGuVg==0bGyNN1VKjWCxituvKDVvg==/Ks7iNV5tZaZT32Epav0CA==KLVDOWDtxnck6THwQuPfGg==L2/wiXcz7QQyFdbuDe14+w==MufXoG4oKY+tLj7TNMzMtQ==/Ks7iNV5tZaZT32Epav0CA==MC9KVKLGfFmxvdr6qNuZpA==gCe+M22NmuwF6cPVKGGoZQ==MufXoG4oKY+tLj7TNMzMtQ==wJNrzltAAb7rg/64niXZNg==MufXoG4oKY+tLj7TNMzMtQ==S+79/0xJH6oVAqvGSE+Vlw==9+fXRGjlf3TvpwR6XiqcSw==XpjdNQ+r0XfWy25TW5lyAg==4iLXaYY1As8N9+wW+PVQOg==/Ks7iNV5tZaZT32Epav0CA==83jbJmmZc/RUXML8GcGuVg==WSThaqht6loKlvNDraoarw==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==Tkb8E728rfsc+V1i5HtOzQ==WSThaqht6loKlvNDraoarw==83jbJmmZc/RUXML8GcGuVg==bIyEa1uO0qUPR+sBqjAJ8g==bIyEa1uO0qUPR+sBqjAJ8g==83jbJmmZc/RUXML8GcGuVg==0bGyNN1VKjWCxituvKDVvg==/Ks7iNV5tZaZT32Epav0CA==KLVDOWDtxnck6THwQuPfGg==L2/wiXcz7QQyFdbuDe14+w==MufXoG4oKY+tLj7TNMzMtQ==/Ks7iNV5tZaZT32Epav0CA==MC9KVKLGfFmxvdr6qNuZpA==gCe+M22NmuwF6cPVKGGoZQ==MufXoG4oKY+tLj7TNMzMtQ==wJNrzltAAb7rg/64niXZNg==MufXoG4oKY+tLj7TNMzMtQ==S+79/0xJH6oVAqvGSE+Vlw==9+fXRGjlf3TvpwR6XiqcSw==XpjdNQ+r0XfWy25TW5lyAg==4iLXaYY1As8N9+wW+PVQOg==/Ks7iNV5tZaZT32Epav0CA==83jbJmmZc/RUXML8GcGuVg==WSThaqht6loKlvNDraoarw==vCffRJyLzPpoDVYNvxEtoA==qgZnSf9/KcpMFM90/ZaklQ==83jbJmmZc/RUXML8GcGuVg==h8zZvECdaFr730Mgo5EgYQ==4iLXaYY1As8N9+wW+PVQOg==WSThaqht6loKlvNDraoarw==83jbJmmZc/RUXML8GcGuVg==bIyEa1uO0qUPR+sBqjAJ8g==bIyEa1uO0qUPR+sBqjAJ8g==83jbJmmZc/RUXML8GcGuVg==0bGyNN1VKjWCxituvKDVvg==/Ks7iNV5tZaZT32Epav0CA==KLVDOWDtxnck6THwQuPfGg==L2/wiXcz7QQyFdbuDe14+w==MufXoG4oKY+tLj7TNMzMtQ==/Ks7iNV5tZaZT32Epav0CA==MC9KVKLGfFmxvdr6qNuZpA==gCe+M22NmuwF6cPVKGGoZQ==MufXoG4oKY+tLj7TNMzMtQ==wJNrzltAAb7rg/64niXZNg==MufXoG4oKY+tLj7TNMzMtQ==S+79/0xJH6oVAqvGSE+Vlw==vCffRJyLzPpoDVYNvxEtoA==qgZnSf9/KcpMFM90/ZaklQ==83jbJmmZc/RUXML8GcGuVg==h8zZvECdaFr730Mgo5EgYQ==4iLXaYY1As8N9+wW+PVQOg==83jbJmmZc/RUXML8GcGuVg==bIyEa1uO0qUPR+sBqjAJ8g==bIyEa1uO0qUPR+sBqjAJ8g==83jbJmmZc/RUXML8GcGuVg==0bGyNN1VKjWCxituvKDVvg==/Ks7iNV5tZaZT32Epav0CA==KLVDOWDtxnck6THwQuPfGg==L2/wiXcz7QQyFdbuDe14+w==MufXoG4oKY+tLj7TNMzMtQ==/Ks7iNV5tZaZT32Epav0CA==MC9KVKLGfFmxvdr6qNuZpA==gCe+M22NmuwF6cPVKGGoZQ==MufXoG4oKY+tLj7TNMzMtQ==wJNrzltAAb7rg/64niXZNg==MufXoG4oKY+tLj7TNMzMtQ==S+79/0xJH6oVAqvGSE+Vlw==XpjdNQ+r0XfWy25TW5lyAg==lwzGU75ZfX1C+vFQE1ahTQ==83jbJmmZc/RUXML8GcGuVg==gCe+M22NmuwF6cPVKGGoZQ==pxsE18FW3UofpVPzG1RchA==0bGyNN1VKjWCxituvKDVvg==/Ks7iNV5tZaZT32Epav0CA==KLVDOWDtxnck6THwQuPfGg==L2/wiXcz7QQyFdbuDe14+w==MufXoG4oKY+tLj7TNMzMtQ==/Ks7iNV5tZaZT32Epav0CA==MC9KVKLGfFmxvdr6qNuZpA==gCe+M22NmuwF6cPVKGGoZQ==MufXoG4oKY+tLj7TNMzMtQ==wJNrzltAAb7rg/64niXZNg==MufXoG4oKY+tLj7TNMzMtQ==83jbJmmZc/RUXML8GcGuVg==pxsE18FW3UofpVPzG1RchA==YiqMxpZQz+5dPf+qELowBw==/Ks7iNV5tZaZT32Epav0CA==lwA3zobBmueRmJyafjFH9A==US5MJOeTx6L69iQT3Y8B9g==S+79/0xJH6oVAqvGSE+Vlw==9+fXRGjlf3TvpwR6XiqcSw==wJNrzltAAb7rg/64niXZNg==L2/wiXcz7QQyFdbuDe14+w==MufXoG4oKY+tLj7TNMzMtQ==S+79/0xJH6oVAqvGSE+Vlw==\n",
    "bob\\Dockerfile": "FROM ubuntu:18.04\n\nRUN apt update && apt install -y python3-pip \nRUN pip3 install telnetlib3\n\nRUN mkdir logs\nRUN mkdir chal\n\nCOPY ./server.py /chal/\nCOPY ./flag.txt /chal/\nCOPY ./entry.sh .\n\nENTRYPOINT [\"./entry.sh\"]\n",
    "bob\\entry.sh": "#!/bin/bash\n\npushd /logs\n    python3 -m http.server 8080 &\npopd\n\npushd /chal\n    python3 ./server.py\npopd\n",
    "bob\\flag.txt": "gigem{43s_3cb_b4d_a5c452ed22aa5f1a}\n",
    "bob\\server.py": "import asyncio, telnetlib3\nimport os\nimport logging\nimport codecs\nimport subprocess\nimport sys\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\nimport hashlib\nimport random\n\nSEED = 1234\nrandom.seed(SEED)\n\ndef pad(s):\n    return s + ('\\x00'*(16-(len(s)%16)))\n\n@asyncio.coroutine\ndef shell(reader, writer):\n    #m = hashlib.sha256()\n    #m.update(str(random.random()).encode())\n    #key = m.digest()[:16]\n    cipher = AES.new(key, AES.MODE_ECB)\n    cmd = \"\"\n    try: \n        while True:\n            inp = yield from reader.read(24)\n            if not inp:\n                return\n\n            tmp = inp\n            inp = b64decode(inp)\n            inp = cipher.decrypt(inp).decode()\n            print(inp)\n\n            writer.echo(tmp)\n            inp = inp.replace('\\x00', '')\n            cmd += inp\n            if cmd == 'exit\\n':\n                writer.close()\n                return\n            if '\\n' in cmd:\n                print(cmd)\n                #cmd = cmd.replace('\\r', '\\n')\n                cmd = cmd.strip('\\n')\n                ret = subprocess.check_output(cmd, shell=True)\n                ret = ret.decode('utf-8')\n                if len(ret) == 0:\n                    ret = 'a'*4\n                print(len(pad(ret)))\n                sys.stdout.flush()\n                ret = b64encode(cipher.encrypt(pad(ret))).decode()\n                writer.write(ret)\n                print(ret)\n                sys.stdout.flush()\n                cmd = \"\"\n\n            yield from writer.drain()\n\n    except Exception as e:\n        print(e)\n        sys.stdout.flush()\n        writer.close()\n        return\n\nwhile True:\n    try:\n        key = b'Sixteen byte key'\n        loop = asyncio.get_event_loop()\n        coro = telnetlib3.create_server(port=6023, shell=shell)\n        server = loop.run_until_complete(coro)\n        loop.run_until_complete(server.wait_closed())\n    except (subprocess.CalledProcessError, ConnectionError):\n        logging.exception(\"Exception in main\")\n        time.sleep(1)\n\n    except Exception as e:\n        print(e)\n        sys.stdout.flush()\n        time.sleep(1)\n",
    "category": "NetworkPentest"
}