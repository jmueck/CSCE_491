{
    "Dockerfile": "FROM python:slim-buster\n\nARG port\n\nRUN apt-get update -y; apt-get install socat -y\n\nCOPY flag.txt /flag.txt\nCOPY server.py /server.py\n\nRUN echo \"exec socat -s TCP-LISTEN:$port,reuseaddr,fork EXEC:\\\"python3 /server.py\\\",stderr\" > /docker_entrypoint.sh\n\nENTRYPOINT [\"sh\", \"/docker_entrypoint.sh\"]\n",
    "flag.txt": "gigem{3_bYt3_MD5_1s_Ju5t_pr00f_0f_W0rK}\n",
    "Makefile": "NAME := diffiecc\nPORT := 7001\n\ndocker: Dockerfile\n\tdocker build -t $(NAME) --build-arg name=$(NAME) --build-arg port=$(PORT) .\n\nrun: docker\n\tdocker run -d --read-only --restart=always --name $(NAME) -p $(PORT):$(PORT) $(NAME)\n\ndist:\n\tzip $(NAME).zip server.py\n\nclean:\n\tdocker kill $(NAME) ; docker rm $(NAME) ; docker rmi $(NAME)\n\n",
    "README.md": "# MD5\nMD5 jail?!?!?!?!\n\nAuthor: `anomie`\n\n## Dev Notes\nGiven `server.py`. Set up remote with `make run`\n\n## Solution\nSince the md5sum is shortened to only 3 bytes, we can just brute force the command. Here I'm using \n`cat flag.txt; echo '<number>'`\nwhere I'm brute forcing the number until the hash matches. In this case, 8726574 works.\n\nFlag: `gigem{3_bYt3_MD5_1s_Ju5t_pr00f_0f_W0rK}`\n\n",
    "server.py": "import hashlib\nimport subprocess\n\ndef md5sum(b: bytes):\n    return hashlib.md5(b).digest()[:3]\n\n\nwhitelisted_cmd = b'echo lmao'\nwhitelisted_hash = md5sum(whitelisted_cmd)\n\ndef main():\n    while True:\n        cmd = input('> ').encode()\n        if cmd == b'exit':\n            print('Goodbye')\n            exit()\n\n        if md5sum(cmd) != whitelisted_hash:\n            print(f'Invalid command, try \"{whitelisted_cmd.decode()}\"')\n            continue\n\n        try:\n            out = subprocess.check_output(['/bin/bash', '-c', cmd])\n            print(out.decode())\n        except subprocess.CalledProcessError as e:\n            print(f'Command returned non-zero exit status {e.returncode}')\n\nif __name__ == \"__main__\":\n    main()\n",
    "solve.py": "import hashlib\nimport string\nfrom pwn import *\n\nHOST = '0.0.0.0'\nPORT = 7001\n\n\ndef md5sum(b: bytes):\n    return hashlib.md5(b).digest()[:3]\n\ntarget = md5sum(b'echo lmao')\n\ncmd = b\"cat flag.txt; echo '\"\njunk = b''\ncount = 1\nfound = False\n\nfor i in range(256 * 256 * 256):\n    junk = str(i).encode()\n    if md5sum(cmd + junk + b\"'\") == target:\n        print(junk)\n        cmd = cmd + junk + b\"'\"\n        found = True\n        break\n\nif found:\n    p = remote(HOST, PORT)\n    p.sendlineafter(b'> ', cmd)\n    print(\"FLAG: %s\" % p.recvline().decode())\n",
    "category": "crypto"
}